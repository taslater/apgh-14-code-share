{
  "room_name": "codeovertime",
  "room_creator": "John Lange (he/him)",
  "topic": "Where we put code during class",
  "export_date": "2022/04/17",
  "exported_by": "Tom Slater (he/him)",
  "messages": [
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@ibrahimmanfoud:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "awesome fragment crew: Justin, Chris S, Dakota"
      },
      "event_id": "$1637701677104154CEFkq:matrix.workhardpgh.com",
      "origin_server_ts": 1637701677823,
      "unsigned": {
        "age": 12514051261
      },
      "user_id": "@ibrahimmanfoud:matrix.workhardpgh.com",
      "age": 12513991657
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@cbend:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "team tight tails Jeremiah, Joyce, Chris, Caitlin\n\nhttps://gitlab.lfgpgh.com:5443/cbender/colortime"
      },
      "event_id": "$1637702007104155LdqLE:matrix.workhardpgh.com",
      "origin_server_ts": 1637702007005,
      "unsigned": {
        "age": 12513722079
      },
      "user_id": "@cbend:matrix.workhardpgh.com",
      "age": 12513662475
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "React - 100 states, 1 variable (app.js)\n```\nimport React from 'react';\nimport './App.css';\nimport Box from './Box';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"box-holder\">\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n        <Box />\n      </div>\n    );\n  }\n}\nexport default App;\n```",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>React - 100 states, 1 variable (app.js)</p>\n<pre><code>import React from 'react';\nimport './App.css';\nimport Box from './Box';\n\nclass App extends React.Component {\n  render() {\n    return (\n      &lt;div className=&quot;box-holder&quot;&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n        &lt;Box /&gt;\n      &lt;/div&gt;\n    );\n  }\n}\nexport default App;\n</code></pre>\n"
      },
      "event_id": "$1637763900104192NkkdJ:matrix.workhardpgh.com",
      "origin_server_ts": 1637763900604,
      "unsigned": {
        "age": 12451828480,
        "m.relations": {
          "m.replace": {
            "event_id": "$1637763929104194NGhiZ:matrix.workhardpgh.com",
            "origin_server_ts": 1637763929128,
            "sender": "@uugengiven:matrix.workhardpgh.com"
          }
        }
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 12451768876
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "React - 100 states, 1 variable (box.js)\n```\nimport React from 'react';\nimport './App.css';\n\nclass Box extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      boxColor: \"red\"\n    };\n\n    this.whenClicked = this.whenClicked.bind(this);\n  }\n\n  render() {\n    return (\n      <div id=\"box\" className=\"box\" onMouseOver={this.whenClicked} style={{backgroundColor: this.state.boxColor}}></div>\n    );\n  }\n\n  getRandomNumber() {\n      return Math.floor(Math.random() * 255);\n  }\n\n  whenClicked() {\n    // don't ever do the line below in react\n    // document.getElementById(\"box\").style.backgroundColor = \"magenta\";\n\n    // rgb(10, 10, 100)\n    this.setState({boxColor: `rgb(${this.getRandomNumber()}, ${this.getRandomNumber()}, ${this.getRandomNumber()})`});\n  }\n}\nexport default Box;\n",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>React - 100 states, 1 variable (box.js)</p>\n<pre><code>import React from 'react';\nimport './App.css';\n\nclass Box extends React.Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      boxColor: &quot;red&quot;\n    };\n\n    this.whenClicked = this.whenClicked.bind(this);\n  }\n\n  render() {\n    return (\n      &lt;div id=&quot;box&quot; className=&quot;box&quot; onMouseOver={this.whenClicked} style={{backgroundColor: this.state.boxColor}}&gt;&lt;/div&gt;\n    );\n  }\n\n  getRandomNumber() {\n      return Math.floor(Math.random() * 255);\n  }\n\n  whenClicked() {\n    // don't ever do the line below in react\n    // document.getElementById(&quot;box&quot;).style.backgroundColor = &quot;magenta&quot;;\n\n    // rgb(10, 10, 100)\n    this.setState({boxColor: `rgb(${this.getRandomNumber()}, ${this.getRandomNumber()}, ${this.getRandomNumber()})`});\n  }\n}\nexport default Box;\n</code></pre>\n"
      },
      "event_id": "$1637763919104193cTMSU:matrix.workhardpgh.com",
      "origin_server_ts": 1637763919390,
      "unsigned": {
        "age": 12451809694
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 12451750090
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "React - 1 state, 100 variables (app.js)\n```\nimport React from 'react';\nimport './App.css';\nimport Box from './Box';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      boxColors: [\"red\", \"green\", \"blue\"]\n    };\n\n    this.changeColor = this.changeColor.bind(this);\n  }\n\n  changeColor(color_index)\n  {\n    // get a copy of all my colors\n    // change the one that needs to be changed\n    // put all the colors back into the state\n\n    let newColors = [...this.state.boxColors];\n    newColors[color_index] = this.randomColor()\n    this.setState({boxColors: newColors});\n    console.log(\"Hi there!\");\n  }\n\n  randomColor()\n  {\n    return \"#\" + Math.floor(Math.random() * 16777215).toString(16); // 00 00 00 - FF FF FF\n  }\n\n  render() {\n    return (\n      <div className=\"box-holder\">\n        <Box hue={this.state.boxColors[0]} onMouseOver={()=>this.changeColor(0)}/>\n        <Box hue={this.state.boxColors[1]} onMouseOver={()=>this.changeColor(1)}/>\n        <Box hue={this.state.boxColors[2]} onMouseOver={()=>this.changeColor(2)}/>\n      </div>\n    );\n  }\n}\nexport default App;\n",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>React - 1 state, 100 variables (app.js)</p>\n<pre><code>import React from 'react';\nimport './App.css';\nimport Box from './Box';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      boxColors: [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;]\n    };\n\n    this.changeColor = this.changeColor.bind(this);\n  }\n\n  changeColor(color_index)\n  {\n    // get a copy of all my colors\n    // change the one that needs to be changed\n    // put all the colors back into the state\n\n    let newColors = [...this.state.boxColors];\n    newColors[color_index] = this.randomColor()\n    this.setState({boxColors: newColors});\n    console.log(&quot;Hi there!&quot;);\n  }\n\n  randomColor()\n  {\n    return &quot;#&quot; + Math.floor(Math.random() * 16777215).toString(16); // 00 00 00 - FF FF FF\n  }\n\n  render() {\n    return (\n      &lt;div className=&quot;box-holder&quot;&gt;\n        &lt;Box hue={this.state.boxColors[0]} onMouseOver={()=&gt;this.changeColor(0)}/&gt;\n        &lt;Box hue={this.state.boxColors[1]} onMouseOver={()=&gt;this.changeColor(1)}/&gt;\n        &lt;Box hue={this.state.boxColors[2]} onMouseOver={()=&gt;this.changeColor(2)}/&gt;\n      &lt;/div&gt;\n    );\n  }\n}\nexport default App;\n</code></pre>\n"
      },
      "event_id": "$1637766747104201oOqpr:matrix.workhardpgh.com",
      "origin_server_ts": 1637766747843,
      "unsigned": {
        "age": 12448981241
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 12448921637
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "React - 1 state, 100 variables (box.js)\n```\nimport React from 'react';\nimport './App.css';\n\nclass Box extends React.Component {\n  render() {\n    return (\n      <div id=\"box\" className=\"box\" onMouseOver={this.props.onMouseOver} style={{backgroundColor: this.props.hue}}></div>\n    );\n  }\n}\nexport default Box;\n",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>React - 1 state, 100 variables (box.js)</p>\n<pre><code>import React from 'react';\nimport './App.css';\n\nclass Box extends React.Component {\n  render() {\n    return (\n      &lt;div id=&quot;box&quot; className=&quot;box&quot; onMouseOver={this.props.onMouseOver} style={{backgroundColor: this.props.hue}}&gt;&lt;/div&gt;\n    );\n  }\n}\nexport default Box;\n</code></pre>\n"
      },
      "event_id": "$1637766765104202MkgMa:matrix.workhardpgh.com",
      "origin_server_ts": 1637766765498,
      "unsigned": {
        "age": 12448963586
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 12448903982
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "React - Maps example\n```\nimport React from 'react';\nimport './App.css';\nimport Box from './Box';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const colors = []\n    for(let i = 0; i < 100; i++)\n    {\n      colors.push(\"grey\");\n    }\n\n    this.state = {\n      boxColors: colors\n    };\n\n    this.changeColor = this.changeColor.bind(this);\n  }\n\n  changeColor(color_index)\n  {\n    // get a copy of all my colors\n    // change the one that needs to be changed\n    // put all the colors back into the state\n\n    let newColors = [...this.state.boxColors];\n    newColors[color_index] = this.randomColor()\n    this.setState({boxColors: newColors});\n    console.log(\"Hi there!\");\n  }\n\n  randomColor()\n  {\n    return \"#\" + Math.floor(Math.random() * 16777215).toString(16); // 00 00 00 - FF FF FF\n  }\n\n  render() {\n\n    const divs = [];\n    for(let i = 0; i < this.state.boxColors.length; i++)\n    {\n      divs.push(<Box hue={this.state.boxColors[i]} onMouseOver={()=>this.changeColor(i)}/>);\n    }\n\n    const mapDivs = this.state.boxColors.map((color, index) => {\n      return <Box hue={color} onMouseOver={()=>this.changeColor(index)} />\n    });\n\n    return (\n      <div className=\"box-holder\">\n        {this.state.boxColors.map((color, index) => {\n          return <Box hue={color} onMouseOver={()=>this.changeColor(index)} />\n        })}\n      </div>\n    );\n  }\n}\nexport default App;\n",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>React - Maps example</p>\n<pre><code>import React from 'react';\nimport './App.css';\nimport Box from './Box';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const colors = []\n    for(let i = 0; i &lt; 100; i++)\n    {\n      colors.push(&quot;grey&quot;);\n    }\n\n    this.state = {\n      boxColors: colors\n    };\n\n    this.changeColor = this.changeColor.bind(this);\n  }\n\n  changeColor(color_index)\n  {\n    // get a copy of all my colors\n    // change the one that needs to be changed\n    // put all the colors back into the state\n\n    let newColors = [...this.state.boxColors];\n    newColors[color_index] = this.randomColor()\n    this.setState({boxColors: newColors});\n    console.log(&quot;Hi there!&quot;);\n  }\n\n  randomColor()\n  {\n    return &quot;#&quot; + Math.floor(Math.random() * 16777215).toString(16); // 00 00 00 - FF FF FF\n  }\n\n  render() {\n\n    const divs = [];\n    for(let i = 0; i &lt; this.state.boxColors.length; i++)\n    {\n      divs.push(&lt;Box hue={this.state.boxColors[i]} onMouseOver={()=&gt;this.changeColor(i)}/&gt;);\n    }\n\n    const mapDivs = this.state.boxColors.map((color, index) =&gt; {\n      return &lt;Box hue={color} onMouseOver={()=&gt;this.changeColor(index)} /&gt;\n    });\n\n    return (\n      &lt;div className=&quot;box-holder&quot;&gt;\n        {this.state.boxColors.map((color, index) =&gt; {\n          return &lt;Box hue={color} onMouseOver={()=&gt;this.changeColor(index)} /&gt;\n        })}\n      &lt;/div&gt;\n    );\n  }\n}\nexport default App;\n</code></pre>\n"
      },
      "event_id": "$1637767601104203YKlhW:matrix.workhardpgh.com",
      "origin_server_ts": 1637767601607,
      "unsigned": {
        "age": 12448127477
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 12448067873
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "React - Inputs\n```\nimport logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      text: \"hello!\",\n      name: \"John\",\n      characterName: \"Lumpy\",\n      stats: {\n        strength: 18,\n        dexterity: 10,\n        wisdom: 2\n      },\n      spells: []\n    }\n\n    this.updateText = this.updateText.bind(this);\n  }\n\n  updateText(event)\n  {\n    this.setState({text: event.target.value});\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <input type=\"text\" value={this.state.text} onChange={this.updateText} />\n          <h2>{this.state.text}</h2>\n        </header>\n      </div>\n    );\n  }\n}\nexport default App;\n",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>React - Inputs</p>\n<pre><code>import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      text: &quot;hello!&quot;,\n      name: &quot;John&quot;,\n      characterName: &quot;Lumpy&quot;,\n      stats: {\n        strength: 18,\n        dexterity: 10,\n        wisdom: 2\n      },\n      spells: []\n    }\n\n    this.updateText = this.updateText.bind(this);\n  }\n\n  updateText(event)\n  {\n    this.setState({text: event.target.value});\n  }\n  \n  render() {\n    return (\n      &lt;div className=&quot;App&quot;&gt;\n        &lt;header className=&quot;App-header&quot;&gt;\n          &lt;img src={logo} className=&quot;App-logo&quot; alt=&quot;logo&quot; /&gt;\n          &lt;p&gt;\n            Edit &lt;code&gt;src/App.js&lt;/code&gt; and save to reload.\n          &lt;/p&gt;\n          &lt;input type=&quot;text&quot; value={this.state.text} onChange={this.updateText} /&gt;\n          &lt;h2&gt;{this.state.text}&lt;/h2&gt;\n        &lt;/header&gt;\n      &lt;/div&gt;\n    );\n  }\n}\nexport default App;\n</code></pre>\n"
      },
      "event_id": "$1637770256104205sAWfX:matrix.workhardpgh.com",
      "origin_server_ts": 1637770256320,
      "unsigned": {
        "age": 12445472764
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 12445413160
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@christoforro:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "Last Mistake Friends (Tyler, Emily, Niko) This could be my last mistake. Tried to create a repository - if something is not setup correctly, let me know and I'll take a look\nhttps://gitlab.lfgpgh.com:5443/Chris_Schmidt/dndreact"
      },
      "event_id": "$1637784394104216KlsLc:matrix.workhardpgh.com",
      "origin_server_ts": 1637784394495,
      "unsigned": {
        "age": 12431334589,
        "m.relations": {
          "m.annotation": {
            "chunk": [
              {
                "type": "m.reaction",
                "key": "🎉",
                "count": 1
              }
            ]
          }
        }
      },
      "user_id": "@christoforro:matrix.workhardpgh.com",
      "age": 12431274985
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@meenenc:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "Mateo, Ben, Jeremiah, Chris\n```\nimport logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\nimport Stat from './Stat.js';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n\n    this.state = {\n      characterName: \"Enter character name\",\n      strength: \"Enter your strength\",\n      strengthBonus: \"\",\n      dexterity: \"Enter your dexterity\",\n      dexterityBonus: \"\"\n    }\n  }\n\n  getModifier = (event) => {\n    this.setState({strengthBonus : Math.floor((event.target.value - 10)/2)}); //gives NaN if it's a string\n  }\n\n  updateText = (event) => {\n    this.setState({characterName: event.target.value});\n  }\n\n  render () {\n    return (\n      <div>\n        <Stat baseStat={this.state.strength} statModifier={this.state.strengthBonus} modifier = {this.getModifier}/>\n        {/* <Stat baseStat={this.state.dexterity} statModifier={this.state.dexterityBonus} modifier ={ ()=> this.getModifier(event, this.state.dexterity)}/> */}\n        <input type=\"text\" placeholder={this.state.characterName} onChange={this.updateText}/>\n        <h2>{this.state.characterName}</h2>\n      </div>\n    );\n  }\n}\n\n// App will hold all the input divs AND hold states\n// Inputs will dynamically change based on states\n\nexport default App;\n",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Mateo, Ben, Jeremiah, Chris</p>\n<pre><code>import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\nimport Stat from './Stat.js';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n\n\n    this.state = {\n      characterName: &quot;Enter character name&quot;,\n      strength: &quot;Enter your strength&quot;,\n      strengthBonus: &quot;&quot;,\n      dexterity: &quot;Enter your dexterity&quot;,\n      dexterityBonus: &quot;&quot;\n    }\n  }\n\n  getModifier = (event) =&gt; {\n    this.setState({strengthBonus : Math.floor((event.target.value - 10)/2)}); //gives NaN if it's a string\n  }\n\n  updateText = (event) =&gt; {\n    this.setState({characterName: event.target.value});\n  }\n\n  render () {\n    return (\n      &lt;div&gt;\n        &lt;Stat baseStat={this.state.strength} statModifier={this.state.strengthBonus} modifier = {this.getModifier}/&gt;\n        {/* &lt;Stat baseStat={this.state.dexterity} statModifier={this.state.dexterityBonus} modifier ={ ()=&gt; this.getModifier(event, this.state.dexterity)}/&gt; */}\n        &lt;input type=&quot;text&quot; placeholder={this.state.characterName} onChange={this.updateText}/&gt;\n        &lt;h2&gt;{this.state.characterName}&lt;/h2&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n\n// App will hold all the input divs AND hold states\n// Inputs will dynamically change based on states\n\nexport default App;\n</code></pre>\n"
      },
      "event_id": "$1637785469104218ulZws:matrix.workhardpgh.com",
      "origin_server_ts": 1637785469888,
      "unsigned": {
        "age": 12430259196
      },
      "user_id": "@meenenc:matrix.workhardpgh.com",
      "age": 12430199592
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@meenenc:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "Stat file\n```\nimport React from 'react';\nimport './App.css';\n\nclass Stat extends React.Component {\n    render () {\n      return (\n        <div>\n          <input type=\"text\" placeholder={this.props.baseStat} onChange={this.props.modifier}/>\n          <div>\n          <h2>{this.props.modifier}</h2>\n            <h2>{this.props.statModifier}</h2>\n          </div>\n        </div>\n      );\n    }\n  }\n\n  export default Stat;",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Stat file</p>\n<pre><code>import React from 'react';\nimport './App.css';\n\nclass Stat extends React.Component {\n    render () {\n      return (\n        &lt;div&gt;\n          &lt;input type=&quot;text&quot; placeholder={this.props.baseStat} onChange={this.props.modifier}/&gt;\n          &lt;div&gt;\n          &lt;h2&gt;{this.props.modifier}&lt;/h2&gt;\n            &lt;h2&gt;{this.props.statModifier}&lt;/h2&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      );\n    }\n  }\n\n  export default Stat;\n</code></pre>\n"
      },
      "event_id": "$1637785491104219YEEMy:matrix.workhardpgh.com",
      "origin_server_ts": 1637785491309,
      "unsigned": {
        "age": 12430237775
      },
      "user_id": "@meenenc:matrix.workhardpgh.com",
      "age": 12430178171
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "React - Movie Setup\n```\nimport React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      movie_library: []\n    }\n\n  }\n\n  componentDidMount()\n  {\n    // this runs once this page has loaded\n    // this only runs once, unlike the constructor that runs twice, for whatever reason\n    this.loadMovies();\n  }\n\n  loadMovies() {\n    // go to that url\n    // get the results\n    // put them into this.state.movie_library\n\n    fetch(\"https://api.themoviedb.org/3/discover/movie?api_key=b6fbc7f3f313bd395902af464ef47262&language=en-US&sort_by=popularity.desc&include_adult=false&include_video=false&page=1&with_watch_monetization_types=flatrate\")\n      .then(res =>\n        res.json())\n      .then(json_response => \n        this.setState({movie_library: json_response.results}));\n    \n  }\n  \n  render() {\n    let movies = [];\n    for(let i = 0; i < this.state.movie_library.length; i++)\n    {\n      movies.push(<img src={\"https://image.tmdb.org/t/p/w500\" + this.state.movie_library[i].poster_path} />)\n    }\n\n    return (\n      <div className=\"App\">\n        Put movies here\n        {movies}\n      </div>\n    );\n  }\n}\n\nexport default App;\n",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>React - Movie Setup</p>\n<pre><code>import React from 'react';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      movie_library: []\n    }\n\n  }\n\n  componentDidMount()\n  {\n    // this runs once this page has loaded\n    // this only runs once, unlike the constructor that runs twice, for whatever reason\n    this.loadMovies();\n  }\n\n  loadMovies() {\n    // go to that url\n    // get the results\n    // put them into this.state.movie_library\n\n    fetch(&quot;https://api.themoviedb.org/3/discover/movie?api_key=b6fbc7f3f313bd395902af464ef47262&amp;language=en-US&amp;sort_by=popularity.desc&amp;include_adult=false&amp;include_video=false&amp;page=1&amp;with_watch_monetization_types=flatrate&quot;)\n      .then(res =&gt;\n        res.json())\n      .then(json_response =&gt; \n        this.setState({movie_library: json_response.results}));\n    \n  }\n  \n  render() {\n    let movies = [];\n    for(let i = 0; i &lt; this.state.movie_library.length; i++)\n    {\n      movies.push(&lt;img src={&quot;https://image.tmdb.org/t/p/w500&quot; + this.state.movie_library[i].poster_path} /&gt;)\n    }\n\n    return (\n      &lt;div className=&quot;App&quot;&gt;\n        Put movies here\n        {movies}\n      &lt;/div&gt;\n    );\n  }\n}\n\nexport default App;\n</code></pre>\n"
      },
      "event_id": "$1637787280104220TVjhj:matrix.workhardpgh.com",
      "origin_server_ts": 1637787280477,
      "unsigned": {
        "age": 12428448607
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 12428389003
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@ibrahimmanfoud:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "https://gitlab.lfgpgh.com:5443/ibrahimmanfoud/mars"
      },
      "event_id": "$1638221310104393lkjma:matrix.workhardpgh.com",
      "origin_server_ts": 1638221310925,
      "unsigned": {
        "age": 11994418159
      },
      "user_id": "@ibrahimmanfoud:matrix.workhardpgh.com",
      "age": 11994358555
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@ibrahimmanfoud:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "Jeremiah, Niko, Mateo, Sam"
      },
      "event_id": "$1638221324104394deJkF:matrix.workhardpgh.com",
      "origin_server_ts": 1638221324926,
      "unsigned": {
        "age": 11994404158
      },
      "user_id": "@ibrahimmanfoud:matrix.workhardpgh.com",
      "age": 11994344554
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@emily.hall:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "https://github.com/ginskye/apipractice\n\n^ Ghibli API practice, with hover effects and clickable audio! Emily, Ary, Dakota, Echo, Kelvin, Victor"
      },
      "event_id": "$1638222525104395EgjzH:matrix.workhardpgh.com",
      "origin_server_ts": 1638222525542,
      "unsigned": {
        "age": 11993203542
      },
      "user_id": "@emily.hall:matrix.workhardpgh.com",
      "age": 11993139398
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@cbend:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "https://gitlab.lfgpgh.com:5443/cbender/lunar-watch/-/tree/main/src"
      },
      "event_id": "$1638223428104397jiJjh:matrix.workhardpgh.com",
      "origin_server_ts": 1638223428199,
      "unsigned": {
        "age": 11992300885
      },
      "user_id": "@cbend:matrix.workhardpgh.com",
      "age": 11992236741
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@cbend:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "Alex, Ben, Justin, Sean, Caitlin"
      },
      "event_id": "$1638223455104398ZHzgU:matrix.workhardpgh.com",
      "origin_server_ts": 1638223455902,
      "unsigned": {
        "age": 11992273182,
        "m.relations": {
          "m.replace": {
            "event_id": "$1638223464104399vhpVL:matrix.workhardpgh.com",
            "origin_server_ts": 1638223464188,
            "sender": "@cbend:matrix.workhardpgh.com"
          }
        }
      },
      "user_id": "@cbend:matrix.workhardpgh.com",
      "age": 11992209038
    },
    {
      "type": "m.room.member",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@leslie.triceratops:matrix.workhardpgh.com",
      "content": {
        "membership": "join",
        "displayname": "Leslie Reiderdai",
        "avatar_url": "mxc://matrix.workhardpgh.com/dbYcuXuTFBbkxScwKTFIdNSq"
      },
      "state_key": "@leslie.triceratops:matrix.workhardpgh.com",
      "event_id": "$1638369896104518ksXxW:matrix.workhardpgh.com",
      "origin_server_ts": 1638369896820,
      "unsigned": {
        "replaces_state": "$15568209665471dnFyB:matrix.workhardpgh.com",
        "prev_content": {
          "membership": "join",
          "displayname": "leslie.triceratops",
          "avatar_url": "mxc://matrix.workhardpgh.com/dbYcuXuTFBbkxScwKTFIdNSq"
        },
        "prev_sender": "@leslie.triceratops:matrix.workhardpgh.com",
        "age": 11845832264
      },
      "user_id": "@leslie.triceratops:matrix.workhardpgh.com",
      "age": 11845832264,
      "replaces_state": "$15568209665471dnFyB:matrix.workhardpgh.com",
      "prev_content": {
        "membership": "join",
        "displayname": "leslie.triceratops",
        "avatar_url": "mxc://matrix.workhardpgh.com/dbYcuXuTFBbkxScwKTFIdNSq"
      }
    },
    {
      "type": "m.room.member",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@niko-ibakoo:matrix.workhardpgh.com",
      "content": {
        "membership": "join",
        "displayname": "niko",
        "avatar_url": "mxc://matrix.workhardpgh.com/pZocPTydCduPFeumDKFhCxyx"
      },
      "state_key": "@niko-ibakoo:matrix.workhardpgh.com",
      "event_id": "$1638799845104862mviRW:matrix.workhardpgh.com",
      "origin_server_ts": 1638799845992,
      "unsigned": {
        "replaces_state": "$163216168196974dGodl:matrix.workhardpgh.com",
        "prev_content": {
          "membership": "join",
          "displayname": "niko-ibakoo",
          "avatar_url": "mxc://matrix.workhardpgh.com/pZocPTydCduPFeumDKFhCxyx"
        },
        "prev_sender": "@niko-ibakoo:matrix.workhardpgh.com",
        "age": 11415883092
      },
      "user_id": "@niko-ibakoo:matrix.workhardpgh.com",
      "age": 11415883092,
      "replaces_state": "$163216168196974dGodl:matrix.workhardpgh.com",
      "prev_content": {
        "membership": "join",
        "displayname": "niko-ibakoo",
        "avatar_url": "mxc://matrix.workhardpgh.com/pZocPTydCduPFeumDKFhCxyx"
      }
    },
    {
      "type": "m.room.member",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@justice:matrix.workhardpgh.com",
      "content": {
        "membership": "join",
        "displayname": "Justice Engle"
      },
      "state_key": "@justice:matrix.workhardpgh.com",
      "event_id": "$1639061980105098vYEGt:matrix.workhardpgh.com",
      "origin_server_ts": 1639061980928,
      "unsigned": {
        "replaces_state": "$161409931951727lfMiN:matrix.workhardpgh.com",
        "prev_content": {
          "membership": "join",
          "displayname": "justice"
        },
        "prev_sender": "@justice:matrix.workhardpgh.com",
        "age": 11153748156
      },
      "user_id": "@justice:matrix.workhardpgh.com",
      "age": 11153748156,
      "replaces_state": "$161409931951727lfMiN:matrix.workhardpgh.com",
      "prev_content": {
        "membership": "join",
        "displayname": "justice"
      }
    },
    {
      "type": "m.room.member",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@niko-ibakoo:matrix.workhardpgh.com",
      "content": {
        "membership": "leave"
      },
      "state_key": "@niko-ibakoo:matrix.workhardpgh.com",
      "event_id": "$1639244263105311yGMEF:matrix.workhardpgh.com",
      "origin_server_ts": 1639244263277,
      "unsigned": {
        "replaces_state": "$1638799845104862mviRW:matrix.workhardpgh.com",
        "prev_content": {
          "membership": "join",
          "displayname": "niko",
          "avatar_url": "mxc://matrix.workhardpgh.com/pZocPTydCduPFeumDKFhCxyx"
        },
        "prev_sender": "@niko-ibakoo:matrix.workhardpgh.com",
        "age": 10971465807
      },
      "user_id": "@niko-ibakoo:matrix.workhardpgh.com",
      "age": 10971465807,
      "replaces_state": "$1638799845104862mviRW:matrix.workhardpgh.com",
      "prev_content": {
        "membership": "join",
        "displayname": "niko",
        "avatar_url": "mxc://matrix.workhardpgh.com/pZocPTydCduPFeumDKFhCxyx"
      }
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@alex_vanlan:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "```\nusing System;\n\nnamespace LinkdListLearning\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            LinkedList list1 = new LinkedList();\n            list1.head = new Node(1);\n            Console.WriteLine(list1.head.value);\n            Console.WriteLine(\"\");\n\n            list1.addFirst(2, list1.head);\n            Console.WriteLine(list1.head.value);\n            Console.WriteLine(list1.head.nextNode.value);\n\n            list1.addLast(7,)\n        }\n        \n     class Node //creating an object (called \"Node\")\n    {\n        public int value; //the value it holds\n        public Node nextNode; //the next thing down the list\n        \n        public Node(int value) //this is a \"constructor\" that allows us to create a new node by passing in the value at the initial location of itself\n        {\n            this.value = value; //this is the value we passed in \n            this.nextNode = null; //this sets the location of the next node as null.. to be overrided later\n        }\n        public Node(int value, Node passedNode) //this constructor can \"override\" the previous one\n        {\n            this.value = value; // this is just like the previous constructor\n            this.nextNode = passedNode; //this allows us to instert a node \"before\" the node we passed in\n        }\n        public Node next() //look at the next node... this will either return a node or it will return \"null\", which means we're at the end of the line\n        {\n            return this.nextNode;\n        }\n        public void setNext(Node last)\n        {\n            this.nextNode = last;\n        }\n    }\n    class LinkedList\n    {\n        public Node head;\n\n         public void addLast(int data, Node location)\n            {\n\n                if (location.next() != null)\n                {\n                    addLast(data, location.next()); //recursion for the fuckin' win\n                }\n                else\n                {\n                    Node last = new Node(data);\n                }\n\n            }\n            public void addFirst(int data, Node head)\n            {\n                Node newfirst = new Node(data, head);\n                this.head = newfirst;\n                \n         \n            }\n            public void deleteLast()\n            {\n\n            }\n            public void deleteFirst()\n            {\n\n            }\n        }\n\n    }\n}\n\n",
        "format": "org.matrix.custom.html",
        "formatted_body": "<pre><code>using System;\n\nnamespace LinkdListLearning\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            LinkedList list1 = new LinkedList();\n            list1.head = new Node(1);\n            Console.WriteLine(list1.head.value);\n            Console.WriteLine(&quot;&quot;);\n\n            list1.addFirst(2, list1.head);\n            Console.WriteLine(list1.head.value);\n            Console.WriteLine(list1.head.nextNode.value);\n\n            list1.addLast(7,)\n        }\n        \n     class Node //creating an object (called &quot;Node&quot;)\n    {\n        public int value; //the value it holds\n        public Node nextNode; //the next thing down the list\n        \n        public Node(int value) //this is a &quot;constructor&quot; that allows us to create a new node by passing in the value at the initial location of itself\n        {\n            this.value = value; //this is the value we passed in \n            this.nextNode = null; //this sets the location of the next node as null.. to be overrided later\n        }\n        public Node(int value, Node passedNode) //this constructor can &quot;override&quot; the previous one\n        {\n            this.value = value; // this is just like the previous constructor\n            this.nextNode = passedNode; //this allows us to instert a node &quot;before&quot; the node we passed in\n        }\n        public Node next() //look at the next node... this will either return a node or it will return &quot;null&quot;, which means we're at the end of the line\n        {\n            return this.nextNode;\n        }\n        public void setNext(Node last)\n        {\n            this.nextNode = last;\n        }\n    }\n    class LinkedList\n    {\n        public Node head;\n\n         public void addLast(int data, Node location)\n            {\n\n                if (location.next() != null)\n                {\n                    addLast(data, location.next()); //recursion for the fuckin' win\n                }\n                else\n                {\n                    Node last = new Node(data);\n                }\n\n            }\n            public void addFirst(int data, Node head)\n            {\n                Node newfirst = new Node(data, head);\n                this.head = newfirst;\n                \n         \n            }\n            public void deleteLast()\n            {\n\n            }\n            public void deleteFirst()\n            {\n\n            }\n        }\n\n    }\n}\n\n</code></pre>\n"
      },
      "event_id": "$1639426048105381nwwlQ:matrix.workhardpgh.com",
      "origin_server_ts": 1639426048658,
      "unsigned": {
        "age": 10789680426
      },
      "user_id": "@alex_vanlan:matrix.workhardpgh.com",
      "age": 10789616282
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@alex_vanlan:matrix.workhardpgh.com",
      "content": {
        "body": "^^^ this is where c# room is at so far. ",
        "format": "org.matrix.custom.html",
        "msgtype": "m.text",
        "formatted_body": "^^^ this is where c# room is at so far."
      },
      "event_id": "$1639426176105382DQOzh:matrix.workhardpgh.com",
      "origin_server_ts": 1639426176976,
      "unsigned": {
        "age": 10789552108
      },
      "user_id": "@alex_vanlan:matrix.workhardpgh.com",
      "age": 10789487964
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@alex_vanlan:matrix.workhardpgh.com",
      "content": {},
      "event_id": "$1639435928105386eJAgc:matrix.workhardpgh.com",
      "origin_server_ts": 1639435928101,
      "unsigned": {
        "redacted_by": "$1639435949105387MJsMK:matrix.workhardpgh.com",
        "redacted_because": {
          "type": "m.room.redaction",
          "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
          "sender": "@alex_vanlan:matrix.workhardpgh.com",
          "content": {},
          "redacts": "$1639435928105386eJAgc:matrix.workhardpgh.com",
          "event_id": "$1639435949105387MJsMK:matrix.workhardpgh.com",
          "origin_server_ts": 1639435949211,
          "unsigned": {
            "age": 10779779873
          },
          "user_id": "@alex_vanlan:matrix.workhardpgh.com",
          "age": 10779779873
        },
        "age": 10779800983
      },
      "user_id": "@alex_vanlan:matrix.workhardpgh.com",
      "age": 10779736839,
      "redacted_because": {
        "type": "m.room.redaction",
        "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
        "sender": "@alex_vanlan:matrix.workhardpgh.com",
        "content": {},
        "redacts": "$1639435928105386eJAgc:matrix.workhardpgh.com",
        "event_id": "$1639435949105387MJsMK:matrix.workhardpgh.com",
        "origin_server_ts": 1639435949211,
        "unsigned": {
          "age": 10779715729
        },
        "user_id": "@alex_vanlan:matrix.workhardpgh.com",
        "age": 10779715729
      }
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@alex_vanlan:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "it got worse before it got better \n```\nusing System;\n\nnamespace LinkdListLearning //or how I learned to stop worrying and love recursion\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            LinkedList list1 = new LinkedList();\n            list1.head = new Node(1);\n            Console.WriteLine(list1.head.value);\n            Console.WriteLine(\"\");\n\n            list1.addFirst(0);\n            Console.WriteLine(list1.head.value);\n            Console.WriteLine(list1.head.nextNode.value);\n\n            list1.addLast(2); // our addLast function requires to params, the value of the new node that you want to pass in, and at least one node to begin the process. there's always a \"head\", so we just used that node. \n            list1.printList();\n            list1.addLast(3);\n            list1.addLast(4);\n            list1.deleteLast();\n            list1.printList();\n\n            list1.deleteFirst();\n            list1.printList();\n\n        }\n        \n     class Node //creating an object (called \"Node\")\n    {\n        public int value; //the value it holds\n        public Node nextNode; //the next thing down the list\n        \n        public Node(int value) //this is a \"constructor\" that allows us to create a new node by passing in the value at the initial location of itself\n        {\n            this.value = value; //this is the value we passed in \n            this.nextNode = null; //this sets the location of the next node as null.. to be overrided later\n        }\n        public Node(int value, Node passedNode) //this constructor can \"override\" the previous one\n        {\n            this.value = value; // this is just like the previous constructor\n            this.nextNode = passedNode; //this allows us to instert a node \"before\" the node we passed in\n        }\n        public void deleteNode()\n            {\n\n            }\n        public void addLast(int data)\n            {\n                if (this.nextNode == null)\n                {\n                    this.nextNode = new Node(data);\n                }\n                else\n                {\n                    this.nextNode.addLast(data);\n                }\n            }\n    }\n    class LinkedList\n    {\n        public Node head;\n\n\n            public void addLast(int value) //takes in the value\n            {\n                head.addLast(value); //passes the node head to the recursive version in the Node class\n\n            }\n        public void printList()\n            {\n                printList1(this.head); //passes the node head and calls the the recursive version\n            }\n        public void printList1(Node head)\n            {\n                if (head.nextNode != null) //if the next value is NOT null....\n                {\n                    Console.WriteLine(head.value); //print the current value\n                    head = head.nextNode; //change the focus/parameter of the function\n                    printList1(head); //call the function recursively with the newly changed parameter\n                }\n                else\n                {\n                    Console.WriteLine(head.value); //this is now the last node, so just print its value\n                }\n            }\n\n\n            public void addFirst(int data) //takes in the new value you want and requires the current head\n            {\n                Node newfirst = new Node(data, head); //setsup a new Node with the value as the data and the nextNode as the previous head\n                this.head = newfirst; //changes the location of the head to begin at that new node\n                \n            }\n        public void deleteLast()\n            {\n                deleteLast1(head); //passes the specific Node.head to the recursive function\n            }\n        public void deleteLast1(Node head)\n            {\n                if (head.nextNode.nextNode != null) //looks two Nodes deep to check  for the null (seeking the last value)\n                {\n                    head = head.nextNode; //swaps the focus of the parameter to the next Node\n                    deleteLast1(head); //recursive with the new parameter/focus\n                }\n               \n                else\n                {\n                   head.nextNode = null; //stops the current focus from pointing at the next node. it floats away into the great digital sea of memory like Wilson the Volleyball\n                }\n            }\n\n            public void deleteFirst()\n            {\n                this.head = this.head.nextNode;\n            }\n        }\n\n    }\n}\n\n",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>it got worse before it got better</p>\n<pre><code>using System;\n\nnamespace LinkdListLearning //or how I learned to stop worrying and love recursion\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            LinkedList list1 = new LinkedList();\n            list1.head = new Node(1);\n            Console.WriteLine(list1.head.value);\n            Console.WriteLine(&quot;&quot;);\n\n            list1.addFirst(0);\n            Console.WriteLine(list1.head.value);\n            Console.WriteLine(list1.head.nextNode.value);\n\n            list1.addLast(2); // our addLast function requires to params, the value of the new node that you want to pass in, and at least one node to begin the process. there's always a &quot;head&quot;, so we just used that node. \n            list1.printList();\n            list1.addLast(3);\n            list1.addLast(4);\n            list1.deleteLast();\n            list1.printList();\n\n            list1.deleteFirst();\n            list1.printList();\n\n        }\n        \n     class Node //creating an object (called &quot;Node&quot;)\n    {\n        public int value; //the value it holds\n        public Node nextNode; //the next thing down the list\n        \n        public Node(int value) //this is a &quot;constructor&quot; that allows us to create a new node by passing in the value at the initial location of itself\n        {\n            this.value = value; //this is the value we passed in \n            this.nextNode = null; //this sets the location of the next node as null.. to be overrided later\n        }\n        public Node(int value, Node passedNode) //this constructor can &quot;override&quot; the previous one\n        {\n            this.value = value; // this is just like the previous constructor\n            this.nextNode = passedNode; //this allows us to instert a node &quot;before&quot; the node we passed in\n        }\n        public void deleteNode()\n            {\n\n            }\n        public void addLast(int data)\n            {\n                if (this.nextNode == null)\n                {\n                    this.nextNode = new Node(data);\n                }\n                else\n                {\n                    this.nextNode.addLast(data);\n                }\n            }\n    }\n    class LinkedList\n    {\n        public Node head;\n\n\n            public void addLast(int value) //takes in the value\n            {\n                head.addLast(value); //passes the node head to the recursive version in the Node class\n\n            }\n        public void printList()\n            {\n                printList1(this.head); //passes the node head and calls the the recursive version\n            }\n        public void printList1(Node head)\n            {\n                if (head.nextNode != null) //if the next value is NOT null....\n                {\n                    Console.WriteLine(head.value); //print the current value\n                    head = head.nextNode; //change the focus/parameter of the function\n                    printList1(head); //call the function recursively with the newly changed parameter\n                }\n                else\n                {\n                    Console.WriteLine(head.value); //this is now the last node, so just print its value\n                }\n            }\n\n\n            public void addFirst(int data) //takes in the new value you want and requires the current head\n            {\n                Node newfirst = new Node(data, head); //setsup a new Node with the value as the data and the nextNode as the previous head\n                this.head = newfirst; //changes the location of the head to begin at that new node\n                \n            }\n        public void deleteLast()\n            {\n                deleteLast1(head); //passes the specific Node.head to the recursive function\n            }\n        public void deleteLast1(Node head)\n            {\n                if (head.nextNode.nextNode != null) //looks two Nodes deep to check  for the null (seeking the last value)\n                {\n                    head = head.nextNode; //swaps the focus of the parameter to the next Node\n                    deleteLast1(head); //recursive with the new parameter/focus\n                }\n               \n                else\n                {\n                   head.nextNode = null; //stops the current focus from pointing at the next node. it floats away into the great digital sea of memory like Wilson the Volleyball\n                }\n            }\n\n            public void deleteFirst()\n            {\n                this.head = this.head.nextNode;\n            }\n        }\n\n    }\n}\n\n</code></pre>\n"
      },
      "event_id": "$1639435976105388gtUFy:matrix.workhardpgh.com",
      "origin_server_ts": 1639435976138,
      "unsigned": {
        "age": 10779752946
      },
      "user_id": "@alex_vanlan:matrix.workhardpgh.com",
      "age": 10779688802
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "Ruby Linked List\n```\nclass LinkedList\n    def initialize\n        @front = Bulb.new\n    end\n\n    def add value\n        @front.add value\n    end\n\n    def get index\n        return @front.get index\n    end\nend\n\nclass Bulb\n    attr_accessor :value\n    attr_accessor :next\n\n    def add data\n        # if I don't have a number, I put this data in me\n        if @value == nil\n            @value = data\n        else\n            # if I do have a number, I see if I have a neighbor\n            # if not, I make the neighbor\n            # then, either way, I give the neighbor this data to add\n            if @next == nil\n                @next = Bulb.new\n            end\n            @next.add data\n        end\n    end\n\n    def get index\n        if index == 0\n            return @value\n        else\n            if @next == nil\n                return nil\n            end\n            return @next.get(index - 1)\n        end\n    end\nend\n\n# to test, I want to add 3 things\n# then make sure all 3 are in there\n# in the right order/places\n\n# I'm going to need to be able to add\n# I'm going to need to see what's at a particular place\n\nmy_list = Bulb.new\nmy_list.add 1\nmy_list.add 2\nmy_list.add 5\n\nputs my_list.get(0) # should print 1\nputs my_list.get(1) # should print 2\nputs my_list.get(2) # should print 5\nputs my_list.get(3) # should print nil (nothing)",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Ruby Linked List</p>\n<pre><code>class LinkedList\n    def initialize\n        @front = Bulb.new\n    end\n\n    def add value\n        @front.add value\n    end\n\n    def get index\n        return @front.get index\n    end\nend\n\nclass Bulb\n    attr_accessor :value\n    attr_accessor :next\n\n    def add data\n        # if I don't have a number, I put this data in me\n        if @value == nil\n            @value = data\n        else\n            # if I do have a number, I see if I have a neighbor\n            # if not, I make the neighbor\n            # then, either way, I give the neighbor this data to add\n            if @next == nil\n                @next = Bulb.new\n            end\n            @next.add data\n        end\n    end\n\n    def get index\n        if index == 0\n            return @value\n        else\n            if @next == nil\n                return nil\n            end\n            return @next.get(index - 1)\n        end\n    end\nend\n\n# to test, I want to add 3 things\n# then make sure all 3 are in there\n# in the right order/places\n\n# I'm going to need to be able to add\n# I'm going to need to see what's at a particular place\n\nmy_list = Bulb.new\nmy_list.add 1\nmy_list.add 2\nmy_list.add 5\n\nputs my_list.get(0) # should print 1\nputs my_list.get(1) # should print 2\nputs my_list.get(2) # should print 5\nputs my_list.get(3) # should print nil (nothing)\n</code></pre>\n"
      },
      "event_id": "$1639495937105442Clxik:matrix.workhardpgh.com",
      "origin_server_ts": 1639495937171,
      "unsigned": {
        "age": 10719791913
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 10719727769
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@joyce_swope:matrix.workhardpgh.com",
      "content": {},
      "event_id": "$1639508033105613nygdd:matrix.workhardpgh.com",
      "origin_server_ts": 1639508033442,
      "unsigned": {
        "redacted_by": "$1639508043105614krxNG:matrix.workhardpgh.com",
        "redacted_because": {
          "type": "m.room.redaction",
          "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
          "sender": "@joyce_swope:matrix.workhardpgh.com",
          "content": {},
          "redacts": "$1639508033105613nygdd:matrix.workhardpgh.com",
          "event_id": "$1639508043105614krxNG:matrix.workhardpgh.com",
          "origin_server_ts": 1639508043304,
          "unsigned": {
            "age": 10707685780
          },
          "user_id": "@joyce_swope:matrix.workhardpgh.com",
          "age": 10707685780
        },
        "age": 10707695642
      },
      "user_id": "@joyce_swope:matrix.workhardpgh.com",
      "age": 10707631498,
      "redacted_because": {
        "type": "m.room.redaction",
        "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
        "sender": "@joyce_swope:matrix.workhardpgh.com",
        "content": {},
        "redacts": "$1639508033105613nygdd:matrix.workhardpgh.com",
        "event_id": "$1639508043105614krxNG:matrix.workhardpgh.com",
        "origin_server_ts": 1639508043304,
        "unsigned": {
          "age": 10707621636
        },
        "user_id": "@joyce_swope:matrix.workhardpgh.com",
        "age": 10707621636
      }
    },
    {
      "type": "m.room.member",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@nataliepina:matrix.workhardpgh.com",
      "content": {
        "membership": "join",
        "displayname": "natalie",
        "avatar_url": "mxc://matrix.workhardpgh.com/HxpsCBVzKeqrbOqcmuwvgVuT"
      },
      "state_key": "@nataliepina:matrix.workhardpgh.com",
      "event_id": "$1642806586108744QGQZd:matrix.workhardpgh.com",
      "origin_server_ts": 1642806586188,
      "unsigned": {
        "replaces_state": "$162748820986606gtUeH:matrix.workhardpgh.com",
        "prev_content": {
          "membership": "join"
        },
        "prev_sender": "@nataliepina:matrix.workhardpgh.com",
        "age": 7409142896
      },
      "user_id": "@nataliepina:matrix.workhardpgh.com",
      "age": 7409142896,
      "replaces_state": "$162748820986606gtUeH:matrix.workhardpgh.com",
      "prev_content": {
        "membership": "join"
      }
    },
    {
      "type": "m.room.member",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@meenenc:matrix.workhardpgh.com",
      "content": {
        "membership": "join",
        "displayname": "Chris",
        "avatar_url": "mxc://matrix.workhardpgh.com/zvcsFqjxLpzRIhFdniGBUIMS"
      },
      "state_key": "@meenenc:matrix.workhardpgh.com",
      "event_id": "$1643745999109341Wufap:matrix.workhardpgh.com",
      "origin_server_ts": 1643745999348,
      "unsigned": {
        "replaces_state": "$163216165296968kzXZT:matrix.workhardpgh.com",
        "prev_content": {
          "membership": "join",
          "displayname": "Chris"
        },
        "prev_sender": "@meenenc:matrix.workhardpgh.com",
        "age": 6469729736
      },
      "user_id": "@meenenc:matrix.workhardpgh.com",
      "age": 6469729736,
      "replaces_state": "$163216165296968kzXZT:matrix.workhardpgh.com",
      "prev_content": {
        "membership": "join",
        "displayname": "Chris"
      }
    },
    {
      "type": "m.room.member",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@meenenc:matrix.workhardpgh.com",
      "content": {
        "membership": "join",
        "displayname": "Chris Meenen",
        "avatar_url": "mxc://matrix.workhardpgh.com/zvcsFqjxLpzRIhFdniGBUIMS"
      },
      "state_key": "@meenenc:matrix.workhardpgh.com",
      "event_id": "$1643823518109375URJbT:matrix.workhardpgh.com",
      "origin_server_ts": 1643823518953,
      "unsigned": {
        "replaces_state": "$1643745999109341Wufap:matrix.workhardpgh.com",
        "prev_content": {
          "membership": "join",
          "displayname": "Chris",
          "avatar_url": "mxc://matrix.workhardpgh.com/zvcsFqjxLpzRIhFdniGBUIMS"
        },
        "prev_sender": "@meenenc:matrix.workhardpgh.com",
        "age": 6392210131
      },
      "user_id": "@meenenc:matrix.workhardpgh.com",
      "age": 6392210131,
      "replaces_state": "$1643745999109341Wufap:matrix.workhardpgh.com",
      "prev_content": {
        "membership": "join",
        "displayname": "Chris",
        "avatar_url": "mxc://matrix.workhardpgh.com/zvcsFqjxLpzRIhFdniGBUIMS"
      }
    },
    {
      "type": "m.room.member",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@lyockey:matrix.workhardpgh.com",
      "content": {
        "membership": "join",
        "displayname": "Lainey Yockey",
        "avatar_url": "mxc://matrix.workhardpgh.com/fgjtIuSEftnaNiPinnPpqZAd"
      },
      "state_key": "@lyockey:matrix.workhardpgh.com",
      "event_id": "$1648700800127PXGRM:matrix.workhardpgh.com",
      "origin_server_ts": 1648700800269,
      "unsigned": {
        "replaces_state": "$163216165296967trRiK:matrix.workhardpgh.com",
        "prev_content": {
          "membership": "join",
          "displayname": "lyockey",
          "avatar_url": "mxc://matrix.workhardpgh.com/fgjtIuSEftnaNiPinnPpqZAd"
        },
        "prev_sender": "@lyockey:matrix.workhardpgh.com",
        "age": 1514928815
      },
      "user_id": "@lyockey:matrix.workhardpgh.com",
      "age": 1514928815,
      "replaces_state": "$163216165296967trRiK:matrix.workhardpgh.com",
      "prev_content": {
        "membership": "join",
        "displayname": "lyockey",
        "avatar_url": "mxc://matrix.workhardpgh.com/fgjtIuSEftnaNiPinnPpqZAd"
      }
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "Example Console Readline\n```\nusing System;\n\nnamespace Session14Kata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int a;\n            a = 10;\n            Console.WriteLine(a);\n\n            int b = 20;\n            Console.WriteLine(b);\n\n            a = b * 2;\n            Console.WriteLine(a);\n\n            a = a * 2;\n            Console.WriteLine(a);\n\n            string name;\n            name = Console.ReadLine();\n            Console.WriteLine(name.ToUpper());\n        }\n    }\n}\n",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Example Console Readline</p>\n<pre><code>using System;\n\nnamespace Session14Kata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int a;\n            a = 10;\n            Console.WriteLine(a);\n\n            int b = 20;\n            Console.WriteLine(b);\n\n            a = b * 2;\n            Console.WriteLine(a);\n\n            a = a * 2;\n            Console.WriteLine(a);\n\n            string name;\n            name = Console.ReadLine();\n            Console.WriteLine(name.ToUpper());\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$164909649016QBVhn:matrix.workhardpgh.com",
      "origin_server_ts": 1649096490382,
      "unsigned": {
        "age": 1119238702
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 1119168309
    },
    {
      "type": "m.room.member",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@jallison:matrix.workhardpgh.com",
      "content": {
        "membership": "join",
        "displayname": "jallison"
      },
      "state_key": "@jallison:matrix.workhardpgh.com",
      "event_id": "$164909651317yWjQN:matrix.workhardpgh.com",
      "origin_server_ts": 1649096513339,
      "unsigned": {
        "age": 1119215745
      },
      "user_id": "@jallison:matrix.workhardpgh.com",
      "age": 1119215745
    },
    {
      "type": "m.room.member",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@harrisonthurman:matrix.workhardpgh.com",
      "content": {
        "membership": "join",
        "displayname": "Harrison (They / Them)"
      },
      "state_key": "@harrisonthurman:matrix.workhardpgh.com",
      "event_id": "$164909652118EsFjF:matrix.workhardpgh.com",
      "origin_server_ts": 1649096521704,
      "unsigned": {
        "age": 1119207380
      },
      "user_id": "@harrisonthurman:matrix.workhardpgh.com",
      "age": 1119207380
    },
    {
      "type": "m.room.member",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@jim_code:matrix.workhardpgh.com",
      "content": {
        "membership": "join",
        "displayname": "James Helt"
      },
      "state_key": "@jim_code:matrix.workhardpgh.com",
      "event_id": "$164909655019CaLXI:matrix.workhardpgh.com",
      "origin_server_ts": 1649096550337,
      "unsigned": {
        "age": 1119178747
      },
      "user_id": "@jim_code:matrix.workhardpgh.com",
      "age": 1119178747
    },
    {
      "type": "m.room.member",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@shaunapage:matrix.workhardpgh.com",
      "content": {
        "membership": "join",
        "displayname": "shaunapage"
      },
      "state_key": "@shaunapage:matrix.workhardpgh.com",
      "event_id": "$164909660420hmuOv:matrix.workhardpgh.com",
      "origin_server_ts": 1649096604390,
      "unsigned": {
        "age": 1119124694
      },
      "user_id": "@shaunapage:matrix.workhardpgh.com",
      "age": 1119124694
    },
    {
      "type": "m.room.member",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@taslater:matrix.workhardpgh.com",
      "content": {
        "membership": "join",
        "displayname": "Tom Slater (he/him)",
        "avatar_url": "mxc://matrix.workhardpgh.com/JBdBqibKOsqlCZAiJNOAcxFS"
      },
      "state_key": "@taslater:matrix.workhardpgh.com",
      "event_id": "$164909661921EGSHu:matrix.workhardpgh.com",
      "origin_server_ts": 1649096619809,
      "unsigned": {
        "age": 1119109275
      },
      "user_id": "@taslater:matrix.workhardpgh.com",
      "age": 1119109275
    },
    {
      "type": "m.room.member",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@tobiasfunction:matrix.workhardpgh.com",
      "content": {
        "membership": "join",
        "displayname": "Tobias Tobak (he/him)",
        "avatar_url": "mxc://matrix.workhardpgh.com/WzlNOtUOBdJMXSZeCZhuBpPE"
      },
      "state_key": "@tobiasfunction:matrix.workhardpgh.com",
      "event_id": "$164909972924mvbxY:matrix.workhardpgh.com",
      "origin_server_ts": 1649099729028,
      "unsigned": {
        "age": 1116000056
      },
      "user_id": "@tobiasfunction:matrix.workhardpgh.com",
      "age": 1116000056
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "```\nusing System;\n\nnamespace Session14Kata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"What is your name?\");\n            string name;\n            name = Console.ReadLine();\n\n            Console.WriteLine(\"Nice to meet you, \" + name);\n\n            Console.WriteLine(\"How old are you?\");\n            int age;\n            age = Convert.ToInt32(Console.ReadLine());\n\n            Console.WriteLine(\"You are \" + age + \" years old!\");\n\n            Console.WriteLine(\"You will be \" + (age + 5) + \" years old in 5 years.\");\n        }\n    }\n}\n",
        "format": "org.matrix.custom.html",
        "formatted_body": "<pre><code>using System;\n\nnamespace Session14Kata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(&quot;What is your name?&quot;);\n            string name;\n            name = Console.ReadLine();\n\n            Console.WriteLine(&quot;Nice to meet you, &quot; + name);\n\n            Console.WriteLine(&quot;How old are you?&quot;);\n            int age;\n            age = Convert.ToInt32(Console.ReadLine());\n\n            Console.WriteLine(&quot;You are &quot; + age + &quot; years old!&quot;);\n\n            Console.WriteLine(&quot;You will be &quot; + (age + 5) + &quot; years old in 5 years.&quot;);\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$164910087825bAMSj:matrix.workhardpgh.com",
      "origin_server_ts": 1649100878329,
      "unsigned": {
        "age": 1114850755
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 1114780362
    },
    {
      "type": "m.room.member",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@onoyemi:matrix.workhardpgh.com",
      "content": {
        "membership": "join",
        "displayname": "Yemi Truechild (she/her)"
      },
      "state_key": "@onoyemi:matrix.workhardpgh.com",
      "event_id": "$164910091426lPiHv:matrix.workhardpgh.com",
      "origin_server_ts": 1649100914737,
      "unsigned": {
        "age": 1114814347
      },
      "user_id": "@onoyemi:matrix.workhardpgh.com",
      "age": 1114814347
    },
    {
      "type": "m.room.member",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@andrew:matrix.workhardpgh.com",
      "content": {
        "membership": "join",
        "displayname": "andrew"
      },
      "state_key": "@andrew:matrix.workhardpgh.com",
      "event_id": "$164910091727vJRqP:matrix.workhardpgh.com",
      "origin_server_ts": 1649100917964,
      "unsigned": {
        "age": 1114811120
      },
      "user_id": "@andrew:matrix.workhardpgh.com",
      "age": 1114811120
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "Garden Boxes Day 1\n```\nusing System;\n\nnamespace Session14Kata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Ask for a length and width\n            Console.WriteLine(\"Please enter the length of the garden box.\");\n            int length;\n            length = Convert.ToInt32(Console.ReadLine());\n\n            Console.WriteLine(\"Please enter the width of the garden box.\");\n            int width = Convert.ToInt32(Console.ReadLine());\n\n            // Show the area\n            Console.WriteLine(\"The area of your gardenbox is \" + (length * width));\n            // Show the perimeter\n            Console.WriteLine(\"The perimeter of your gardenbox is \" + (length * 2 + width * 2));\n\n\n            int area = length * width;\n\n            // show how many corn\n            int totalCorn = area * 3 / 16;\n            Console.WriteLine(\"The amount of corn you can plant is: \" + totalCorn);\n            // show how many beets\n            double beetsPerSquareFoot = 9.0 / 16;\n            Console.WriteLine(\"The amount of beets you can plant is: \" + (area * beetsPerSquareFoot));\n            // show how many carrots\n            double carrotsPerSquareFoot = 1;\n            Console.WriteLine(\"The amount of carrots you can plant is: \" + (area * carrotsPerSquareFoot));\n        }\n    }\n}\n",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Garden Boxes Day 1</p>\n<pre><code>using System;\n\nnamespace Session14Kata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Ask for a length and width\n            Console.WriteLine(&quot;Please enter the length of the garden box.&quot;);\n            int length;\n            length = Convert.ToInt32(Console.ReadLine());\n\n            Console.WriteLine(&quot;Please enter the width of the garden box.&quot;);\n            int width = Convert.ToInt32(Console.ReadLine());\n\n            // Show the area\n            Console.WriteLine(&quot;The area of your gardenbox is &quot; + (length * width));\n            // Show the perimeter\n            Console.WriteLine(&quot;The perimeter of your gardenbox is &quot; + (length * 2 + width * 2));\n\n\n            int area = length * width;\n\n            // show how many corn\n            int totalCorn = area * 3 / 16;\n            Console.WriteLine(&quot;The amount of corn you can plant is: &quot; + totalCorn);\n            // show how many beets\n            double beetsPerSquareFoot = 9.0 / 16;\n            Console.WriteLine(&quot;The amount of beets you can plant is: &quot; + (area * beetsPerSquareFoot));\n            // show how many carrots\n            double carrotsPerSquareFoot = 1;\n            Console.WriteLine(&quot;The amount of carrots you can plant is: &quot; + (area * carrotsPerSquareFoot));\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$164910392331sKNwY:matrix.workhardpgh.com",
      "origin_server_ts": 1649103923444,
      "unsigned": {
        "age": 1111805640
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 1111735247
    },
    {
      "type": "m.room.member",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@spensermg:matrix.workhardpgh.com",
      "content": {
        "membership": "join",
        "displayname": "Spenser Greeley"
      },
      "state_key": "@spensermg:matrix.workhardpgh.com",
      "event_id": "$164910431232JoTLL:matrix.workhardpgh.com",
      "origin_server_ts": 1649104312444,
      "unsigned": {
        "age": 1111416640
      },
      "user_id": "@spensermg:matrix.workhardpgh.com",
      "age": 1111416640
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "If Examples\n```\n            if(true)\n            {\n                Console.WriteLine(\"I am in the true if statement\");\n            }\n\n            if(false)\n            {\n                Console.WriteLine(\"I should skip over this, cause this is in the false if statement\");\n            }\n\n            if(5 > 2)\n            {\n                Console.WriteLine(\"Five is more than 2!\");\n            }\n\n            if(\"hello\" == \"hello\")\n            {\n                Console.WriteLine(\"hello equals hello\");\n            }\n\n            if(5 > 2 && 10 < 20)\n            {\n                Console.WriteLine(\"5 > 2 AND 10 < 20\");\n            }\n\n            if(5 < 2 || 10 < 20)\n            {\n                Console.WriteLine(\"5 < 2 OR 10 < 20\");\n            }\n\n            if(!(5<2))\n            {\n                Console.WriteLine(\"NOT 5 < 2\");\n            }",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>If Examples</p>\n<pre><code>            if(true)\n            {\n                Console.WriteLine(&quot;I am in the true if statement&quot;);\n            }\n\n            if(false)\n            {\n                Console.WriteLine(&quot;I should skip over this, cause this is in the false if statement&quot;);\n            }\n\n            if(5 &gt; 2)\n            {\n                Console.WriteLine(&quot;Five is more than 2!&quot;);\n            }\n\n            if(&quot;hello&quot; == &quot;hello&quot;)\n            {\n                Console.WriteLine(&quot;hello equals hello&quot;);\n            }\n\n            if(5 &gt; 2 &amp;&amp; 10 &lt; 20)\n            {\n                Console.WriteLine(&quot;5 &gt; 2 AND 10 &lt; 20&quot;);\n            }\n\n            if(5 &lt; 2 || 10 &lt; 20)\n            {\n                Console.WriteLine(&quot;5 &lt; 2 OR 10 &lt; 20&quot;);\n            }\n\n            if(!(5&lt;2))\n            {\n                Console.WriteLine(&quot;NOT 5 &lt; 2&quot;);\n            }\n</code></pre>\n"
      },
      "event_id": "$164916605883anopw:matrix.workhardpgh.com",
      "origin_server_ts": 1649166058433,
      "unsigned": {
        "age": 1049670651
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 1049600258
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "If Input Example\n```\n            Console.WriteLine(\"Give me a number!\");\n            int number = Convert.ToInt32(Console.ReadLine());\n\n            if (number > 10)\n            {\n                Console.WriteLine(\"That number is bigger than 10!\");\n            }",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>If Input Example</p>\n<pre><code>            Console.WriteLine(&quot;Give me a number!&quot;);\n            int number = Convert.ToInt32(Console.ReadLine());\n\n            if (number &gt; 10)\n            {\n                Console.WriteLine(&quot;That number is bigger than 10!&quot;);\n            }\n</code></pre>\n"
      },
      "event_id": "$164916628485XXXra:matrix.workhardpgh.com",
      "origin_server_ts": 1649166284737,
      "unsigned": {
        "age": 1049444347
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 1049373954
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "Field Painting\n```\nusing System;\n\nnamespace Session14Kata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int radius;\n            int area;\n            int buckets = 0;\n            string color;\n            double coverage;\n\n            // [Ask] the user for the __radius__ of the circle\n            Console.WriteLine(\"What is the radius of your circle?\");\n            radius = Convert.ToInt32(Console.ReadLine());\n            // [Figure out] the __area__\n            area = (int)(radius * radius * Math.PI);\n\n            // [Ask] the user for the __color__ of the circle\n            // [Figure out] the __coverage__ of the paint\n            Console.WriteLine(\"What is the color of your circle?\");\n            color = Console.ReadLine().ToLower();\n            \n            if(color == \"red\")\n            {\n                buckets = (int)Math.Ceiling(area / 100.0);\n            }\n            if(color == \"blue\")\n            {\n                buckets = (int)Math.Ceiling(area / 120.0);\n            }\n            \n            // [Tell] them how many __buckets__ it takes to cover the area\n\n            Console.WriteLine(\"It will take \" + buckets + \" buckets to cover the area.\");\n        }\n    }\n}\n",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Field Painting</p>\n<pre><code>using System;\n\nnamespace Session14Kata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int radius;\n            int area;\n            int buckets = 0;\n            string color;\n            double coverage;\n\n            // [Ask] the user for the __radius__ of the circle\n            Console.WriteLine(&quot;What is the radius of your circle?&quot;);\n            radius = Convert.ToInt32(Console.ReadLine());\n            // [Figure out] the __area__\n            area = (int)(radius * radius * Math.PI);\n\n            // [Ask] the user for the __color__ of the circle\n            // [Figure out] the __coverage__ of the paint\n            Console.WriteLine(&quot;What is the color of your circle?&quot;);\n            color = Console.ReadLine().ToLower();\n            \n            if(color == &quot;red&quot;)\n            {\n                buckets = (int)Math.Ceiling(area / 100.0);\n            }\n            if(color == &quot;blue&quot;)\n            {\n                buckets = (int)Math.Ceiling(area / 120.0);\n            }\n            \n            // [Tell] them how many __buckets__ it takes to cover the area\n\n            Console.WriteLine(&quot;It will take &quot; + buckets + &quot; buckets to cover the area.&quot;);\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$164917450396zJsEx:matrix.workhardpgh.com",
      "origin_server_ts": 1649174503554,
      "unsigned": {
        "age": 1041225530
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 1041155137
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "If and Switch Statements\n```\nusing System;\n\nnamespace Session14Kata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"What is your name?\");\n            string name = Console.ReadLine();\n\n            if (name == \"red\")\n            {\n                Console.WriteLine(\"red\");\n            }\n            else if(name == \"blue\")\n            {\n                Console.WriteLine(\"blue\");\n            }\n            else if (name == \"green\")\n            {\n                Console.WriteLine(\"green\");\n            }\n            else\n            {\n                Console.WriteLine(\"I don't know that color, so I'll default to 100 sq ft per bucket\");\n            }\n\n            switch(name)\n            {\n                case \"green\":\n                case \"red\":\n                    Console.WriteLine(\"red or maybe green\");\n                    break;\n                case \"blue\":\n                    Console.WriteLine(\"blue\");\n                    break;\n                default:\n                    Console.WriteLine(\"None of the above\");\n                    break;\n            }\n\n\n        }\n    }\n}\n",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>If and Switch Statements</p>\n<pre><code>using System;\n\nnamespace Session14Kata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(&quot;What is your name?&quot;);\n            string name = Console.ReadLine();\n\n            if (name == &quot;red&quot;)\n            {\n                Console.WriteLine(&quot;red&quot;);\n            }\n            else if(name == &quot;blue&quot;)\n            {\n                Console.WriteLine(&quot;blue&quot;);\n            }\n            else if (name == &quot;green&quot;)\n            {\n                Console.WriteLine(&quot;green&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;I don't know that color, so I'll default to 100 sq ft per bucket&quot;);\n            }\n\n            switch(name)\n            {\n                case &quot;green&quot;:\n                case &quot;red&quot;:\n                    Console.WriteLine(&quot;red or maybe green&quot;);\n                    break;\n                case &quot;blue&quot;:\n                    Console.WriteLine(&quot;blue&quot;);\n                    break;\n                default:\n                    Console.WriteLine(&quot;None of the above&quot;);\n                    break;\n            }\n\n\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$1649180266104HpnXa:matrix.workhardpgh.com",
      "origin_server_ts": 1649180266942,
      "unsigned": {
        "age": 1035462142
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 1035391749
    },
    {
      "type": "m.room.member",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@renata42:matrix.workhardpgh.com",
      "content": {
        "membership": "join",
        "displayname": "Renat "
      },
      "state_key": "@renata42:matrix.workhardpgh.com",
      "event_id": "$1649181231105CWGEB:matrix.workhardpgh.com",
      "origin_server_ts": 1649181231835,
      "unsigned": {
        "age": 1034497249
      },
      "user_id": "@renata42:matrix.workhardpgh.com",
      "age": 1034497249
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "Months and Seasons\n```\nusing System;\n\nnamespace Session14Kata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // ask the person for what month they were born\n            // tell them what season it was when they were born\n\n            Console.WriteLine(\"What month were you born? Please type a number from 1-12\");\n            int month;\n            month = Convert.ToInt32(Console.ReadLine());\n\n            if(month <= 3)\n            {\n                Console.WriteLine(\"You were born in lemon pepper.\");\n            }\n            else if (month <= 6)\n            {\n                Console.WriteLine(\"You were born in cajun jerk\");\n            }\n            else if (month <= 9)\n            {\n                Console.WriteLine(\"You were born in curry\");\n            }\n            else\n            {\n                Console.WriteLine(\"You were born in szechuan\");\n            }\n\n        }\n    }\n}\n",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Months and Seasons</p>\n<pre><code>using System;\n\nnamespace Session14Kata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // ask the person for what month they were born\n            // tell them what season it was when they were born\n\n            Console.WriteLine(&quot;What month were you born? Please type a number from 1-12&quot;);\n            int month;\n            month = Convert.ToInt32(Console.ReadLine());\n\n            if(month &lt;= 3)\n            {\n                Console.WriteLine(&quot;You were born in lemon pepper.&quot;);\n            }\n            else if (month &lt;= 6)\n            {\n                Console.WriteLine(&quot;You were born in cajun jerk&quot;);\n            }\n            else if (month &lt;= 9)\n            {\n                Console.WriteLine(&quot;You were born in curry&quot;);\n            }\n            else\n            {\n                Console.WriteLine(&quot;You were born in szechuan&quot;);\n            }\n\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$1649183999107AxgzL:matrix.workhardpgh.com",
      "origin_server_ts": 1649183999166,
      "unsigned": {
        "age": 1031729918
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 1031659525
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "Months and Seasons - month names\n```\nusing System;\n\nnamespace Session14Kata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // ask the person for what month they were born\n            // tell them what season it was when they were born\n\n            Console.WriteLine(\"What month were you born? Please type the whole month name\");\n            string month;\n            month = Console.ReadLine().ToLower();\n\n            string summerAnswerKey = \"july august september\";\n\n            if(month == \"january\" || month == \"february\" || month == \"march\")\n            {\n                Console.WriteLine(\"You were born in lemon pepper.\");\n            }\n            else if (month == \"april\" || month == \"may\" || month == \"june\")\n            {\n                Console.WriteLine(\"You were born in cajun jerk\");\n            }\n            else if (summerAnswerKey.Contains(month))\n            {\n                Console.WriteLine(\"You were born in curry\");\n            }\n            else if (month.Contains(\"oct\") || month.Contains(\"nov\") || month.Contains(\"dec\"))\n            {\n                Console.WriteLine(\"You were born in szechuan\");\n            }\n\n        }\n    }\n}\n",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Months and Seasons - month names</p>\n<pre><code>using System;\n\nnamespace Session14Kata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // ask the person for what month they were born\n            // tell them what season it was when they were born\n\n            Console.WriteLine(&quot;What month were you born? Please type the whole month name&quot;);\n            string month;\n            month = Console.ReadLine().ToLower();\n\n            string summerAnswerKey = &quot;july august september&quot;;\n\n            if(month == &quot;january&quot; || month == &quot;february&quot; || month == &quot;march&quot;)\n            {\n                Console.WriteLine(&quot;You were born in lemon pepper.&quot;);\n            }\n            else if (month == &quot;april&quot; || month == &quot;may&quot; || month == &quot;june&quot;)\n            {\n                Console.WriteLine(&quot;You were born in cajun jerk&quot;);\n            }\n            else if (summerAnswerKey.Contains(month))\n            {\n                Console.WriteLine(&quot;You were born in curry&quot;);\n            }\n            else if (month.Contains(&quot;oct&quot;) || month.Contains(&quot;nov&quot;) || month.Contains(&quot;dec&quot;))\n            {\n                Console.WriteLine(&quot;You were born in szechuan&quot;);\n            }\n\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$1649184645108XuZZI:matrix.workhardpgh.com",
      "origin_server_ts": 1649184645270,
      "unsigned": {
        "age": 1031083814
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 1031013421
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "Basic Loop\n```\n            bool keepLooping = true;\n\n            while(keepLooping == true)\n            {\n                Console.WriteLine(\"Hello there!\");\n                keepLooping = false;\n            }",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Basic Loop</p>\n<pre><code>            bool keepLooping = true;\n\n            while(keepLooping == true)\n            {\n                Console.WriteLine(&quot;Hello there!&quot;);\n                keepLooping = false;\n            }\n</code></pre>\n"
      },
      "event_id": "$1649185008109wIdkG:matrix.workhardpgh.com",
      "origin_server_ts": 1649185008554,
      "unsigned": {
        "age": 1030720530
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 1030650137
    },
    {
      "type": "m.room.member",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@joewalker147:matrix.workhardpgh.com",
      "content": {
        "membership": "join",
        "displayname": "joewalker147"
      },
      "state_key": "@joewalker147:matrix.workhardpgh.com",
      "event_id": "$164925100910SwFNh:matrix.workhardpgh.com",
      "origin_server_ts": 1649251009816,
      "unsigned": {
        "age": 964719268
      },
      "user_id": "@joewalker147:matrix.workhardpgh.com",
      "age": 964719268
    },
    {
      "type": "m.room.member",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@imaniemanuel:matrix.workhardpgh.com",
      "content": {
        "membership": "join",
        "displayname": "imaniemanuel"
      },
      "state_key": "@imaniemanuel:matrix.workhardpgh.com",
      "event_id": "$164925161728cHQvX:matrix.workhardpgh.com",
      "origin_server_ts": 1649251617183,
      "unsigned": {
        "age": 964111901
      },
      "user_id": "@imaniemanuel:matrix.workhardpgh.com",
      "age": 964111901
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "Months Loop\n```\nusing System;\n\nnamespace Session14Kata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // ask the person for what month they were born\n            // tell them what season it was when they were born\n\n\n            \n            while (true)\n            {\n\n                Console.WriteLine(\"What month were you born? Please type the whole month name\");\n                string month;\n                month = Console.ReadLine().ToLower();\n\n\n                string summerAnswerKey = \"july august september\";\n                if (month == \"january\" || month == \"february\" || month == \"march\")\n                {\n                    Console.WriteLine(\"You were born in lemon pepper.\");\n                }\n                else if (month == \"april\" || month == \"may\" || month == \"june\")\n                {\n                    Console.WriteLine(\"You were born in cajun jerk\");\n                }\n                else if (summerAnswerKey.Contains(month))\n                {\n                    Console.WriteLine(\"You were born in curry\");\n                }\n                else if (month.Contains(\"oct\") || month.Contains(\"nov\") || month.Contains(\"dec\"))\n                {\n                    Console.WriteLine(\"You were born in szechuan\");\n                }\n            }\n        }\n    }\n}\n",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Months Loop</p>\n<pre><code>using System;\n\nnamespace Session14Kata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // ask the person for what month they were born\n            // tell them what season it was when they were born\n\n\n            \n            while (true)\n            {\n\n                Console.WriteLine(&quot;What month were you born? Please type the whole month name&quot;);\n                string month;\n                month = Console.ReadLine().ToLower();\n\n\n                string summerAnswerKey = &quot;july august september&quot;;\n                if (month == &quot;january&quot; || month == &quot;february&quot; || month == &quot;march&quot;)\n                {\n                    Console.WriteLine(&quot;You were born in lemon pepper.&quot;);\n                }\n                else if (month == &quot;april&quot; || month == &quot;may&quot; || month == &quot;june&quot;)\n                {\n                    Console.WriteLine(&quot;You were born in cajun jerk&quot;);\n                }\n                else if (summerAnswerKey.Contains(month))\n                {\n                    Console.WriteLine(&quot;You were born in curry&quot;);\n                }\n                else if (month.Contains(&quot;oct&quot;) || month.Contains(&quot;nov&quot;) || month.Contains(&quot;dec&quot;))\n                {\n                    Console.WriteLine(&quot;You were born in szechuan&quot;);\n                }\n            }\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$164925243630Vnnob:matrix.workhardpgh.com",
      "origin_server_ts": 1649252436068,
      "unsigned": {
        "age": 963293016
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 963212356
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "Months Counter Loop\n```\nusing System;\n\nnamespace Session14Kata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // ask the person for what month they were born\n            // tell them what season it was when they were born\n\n\n            int counter = 1;\n            while (counter < 3)\n            {\n                counter = counter + 1;\n\n                Console.WriteLine(\"What month were you born? Please type the whole month name\");\n                string month;\n                month = Console.ReadLine().ToLower();\n\n\n                string summerAnswerKey = \"july august september\";\n                if (month == \"january\" || month == \"february\" || month == \"march\")\n                {\n                    Console.WriteLine(\"You were born in lemon pepper.\");\n                }\n                else if (month == \"april\" || month == \"may\" || month == \"june\")\n                {\n                    Console.WriteLine(\"You were born in cajun jerk\");\n                }\n                else if (summerAnswerKey.Contains(month))\n                {\n                    Console.WriteLine(\"You were born in curry\");\n                }\n                else if (month.Contains(\"oct\") || month.Contains(\"nov\") || month.Contains(\"dec\"))\n                {\n                    Console.WriteLine(\"You were born in szechuan\");\n                }\n\n\n            }\n\n            Console.WriteLine(\"This is the end.\");\n        }\n    }\n}\n",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Months Counter Loop</p>\n<pre><code>using System;\n\nnamespace Session14Kata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // ask the person for what month they were born\n            // tell them what season it was when they were born\n\n\n            int counter = 1;\n            while (counter &lt; 3)\n            {\n                counter = counter + 1;\n\n                Console.WriteLine(&quot;What month were you born? Please type the whole month name&quot;);\n                string month;\n                month = Console.ReadLine().ToLower();\n\n\n                string summerAnswerKey = &quot;july august september&quot;;\n                if (month == &quot;january&quot; || month == &quot;february&quot; || month == &quot;march&quot;)\n                {\n                    Console.WriteLine(&quot;You were born in lemon pepper.&quot;);\n                }\n                else if (month == &quot;april&quot; || month == &quot;may&quot; || month == &quot;june&quot;)\n                {\n                    Console.WriteLine(&quot;You were born in cajun jerk&quot;);\n                }\n                else if (summerAnswerKey.Contains(month))\n                {\n                    Console.WriteLine(&quot;You were born in curry&quot;);\n                }\n                else if (month.Contains(&quot;oct&quot;) || month.Contains(&quot;nov&quot;) || month.Contains(&quot;dec&quot;))\n                {\n                    Console.WriteLine(&quot;You were born in szechuan&quot;);\n                }\n\n\n            }\n\n            Console.WriteLine(&quot;This is the end.&quot;);\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$164925320734zoaLc:matrix.workhardpgh.com",
      "origin_server_ts": 1649253207057,
      "unsigned": {
        "age": 962522027
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 962441367
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "Months Yes/No Loop\n```\nusing System;\n\nnamespace Session14Kata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // ask the person for what month they were born\n            // tell them what season it was when they were born\n\n\n            int counter = 1;\n            while (counter < 3)\n            {\n                Console.WriteLine(\"What month were you born? Please type the whole month name\");\n                string month;\n                month = Console.ReadLine().ToLower();\n\n\n                string summerAnswerKey = \"july august september\";\n                if (month == \"january\" || month == \"february\" || month == \"march\")\n                {\n                    Console.WriteLine(\"You were born in lemon pepper.\");\n                }\n                else if (month == \"april\" || month == \"may\" || month == \"june\")\n                {\n                    Console.WriteLine(\"You were born in cajun jerk\");\n                }\n                else if (summerAnswerKey.Contains(month))\n                {\n                    Console.WriteLine(\"You were born in curry\");\n                }\n                else if (month.Contains(\"oct\") || month.Contains(\"nov\") || month.Contains(\"dec\"))\n                {\n                    Console.WriteLine(\"You were born in szechuan\");\n                }\n\n                Console.WriteLine(\"Do you want to go again? (yes/no)\");\n                string answer = Console.ReadLine().ToLower();\n                // if their answer is no\n                // I want to end the loop\n                if (answer == \"no\")\n                {\n                    counter = 100;\n                }\n            }\n\n            Console.WriteLine(\"This is the end.\");\n        }\n    }\n}\n",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Months Yes/No Loop</p>\n<pre><code>using System;\n\nnamespace Session14Kata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // ask the person for what month they were born\n            // tell them what season it was when they were born\n\n\n            int counter = 1;\n            while (counter &lt; 3)\n            {\n                Console.WriteLine(&quot;What month were you born? Please type the whole month name&quot;);\n                string month;\n                month = Console.ReadLine().ToLower();\n\n\n                string summerAnswerKey = &quot;july august september&quot;;\n                if (month == &quot;january&quot; || month == &quot;february&quot; || month == &quot;march&quot;)\n                {\n                    Console.WriteLine(&quot;You were born in lemon pepper.&quot;);\n                }\n                else if (month == &quot;april&quot; || month == &quot;may&quot; || month == &quot;june&quot;)\n                {\n                    Console.WriteLine(&quot;You were born in cajun jerk&quot;);\n                }\n                else if (summerAnswerKey.Contains(month))\n                {\n                    Console.WriteLine(&quot;You were born in curry&quot;);\n                }\n                else if (month.Contains(&quot;oct&quot;) || month.Contains(&quot;nov&quot;) || month.Contains(&quot;dec&quot;))\n                {\n                    Console.WriteLine(&quot;You were born in szechuan&quot;);\n                }\n\n                Console.WriteLine(&quot;Do you want to go again? (yes/no)&quot;);\n                string answer = Console.ReadLine().ToLower();\n                // if their answer is no\n                // I want to end the loop\n                if (answer == &quot;no&quot;)\n                {\n                    counter = 100;\n                }\n            }\n\n            Console.WriteLine(&quot;This is the end.&quot;);\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$164925359635qLyGG:matrix.workhardpgh.com",
      "origin_server_ts": 1649253596370,
      "unsigned": {
        "age": 962132714
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 962052054
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "For Loops\n```\n            Console.WriteLine(\"While loop: \");\n            int counter = 0;\n            while (counter < 10)\n            {\n                Console.WriteLine(counter);\n                counter = counter + 1;\n            }\n\n            Console.WriteLine(\"For loop: \");\n            for(int i = 0; i < 10; i = i + 1)\n            {\n                Console.WriteLine(i);\n            }",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>For Loops</p>\n<pre><code>            Console.WriteLine(&quot;While loop: &quot;);\n            int counter = 0;\n            while (counter &lt; 10)\n            {\n                Console.WriteLine(counter);\n                counter = counter + 1;\n            }\n\n            Console.WriteLine(&quot;For loop: &quot;);\n            for(int i = 0; i &lt; 10; i = i + 1)\n            {\n                Console.WriteLine(i);\n            }\n</code></pre>\n"
      },
      "event_id": "$164926052647BqroP:matrix.workhardpgh.com",
      "origin_server_ts": 1649260526129,
      "unsigned": {
        "age": 955202955
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 955122295
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "More for Loops\n```\n            Console.WriteLine(\"While loop: \");\n            int counter = 0;\n            while (counter < 10)\n            {\n                Console.WriteLine(counter);\n                counter = counter + 1;\n            }\n\n            Console.WriteLine(\"For loop: \");\n            for(int i = 0; i < 10; i = i + 1)\n            {\n                Console.WriteLine(i);\n            }\n\n            Console.WriteLine(\"For loop that counts backwards\");\n            for(int i = 10; i > 0; i--)\n            {\n                Console.WriteLine(i);\n            }\n\n            Console.WriteLine(\"For loop that counts by threes\");\n            for(int i = 0; i < 10; i = i + 3)\n            {\n                Console.WriteLine(i);\n            }",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>More for Loops</p>\n<pre><code>            Console.WriteLine(&quot;While loop: &quot;);\n            int counter = 0;\n            while (counter &lt; 10)\n            {\n                Console.WriteLine(counter);\n                counter = counter + 1;\n            }\n\n            Console.WriteLine(&quot;For loop: &quot;);\n            for(int i = 0; i &lt; 10; i = i + 1)\n            {\n                Console.WriteLine(i);\n            }\n\n            Console.WriteLine(&quot;For loop that counts backwards&quot;);\n            for(int i = 10; i &gt; 0; i--)\n            {\n                Console.WriteLine(i);\n            }\n\n            Console.WriteLine(&quot;For loop that counts by threes&quot;);\n            for(int i = 0; i &lt; 10; i = i + 3)\n            {\n                Console.WriteLine(i);\n            }\n</code></pre>\n"
      },
      "event_id": "$164926073648tOymD:matrix.workhardpgh.com",
      "origin_server_ts": 1649260736585,
      "unsigned": {
        "age": 954992499
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 954911839
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "Other Operators (++ and the like)\n```\n            int number = 0;\n\n            Console.WriteLine(number); // 0\n            number++;\n            // \n            // number = number + 1;\n\n            Console.WriteLine(number); // 1\n            Console.WriteLine(number++); // 1\n            // Console.WriteLine(number);\n            // number = number + 1;\n\n            Console.WriteLine(number); // 2\n            \n            Console.WriteLine(++number); // 3\n            // number = number + 1;\n            // Console.WriteLine(number);\n\n            number += 5;\n            // number = number + 5;\n\n            number *= 5;\n            // number = number * 5;\n\n            Console.WriteLine(number);",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Other Operators (++ and the like)</p>\n<pre><code>            int number = 0;\n\n            Console.WriteLine(number); // 0\n            number++;\n            // \n            // number = number + 1;\n\n            Console.WriteLine(number); // 1\n            Console.WriteLine(number++); // 1\n            // Console.WriteLine(number);\n            // number = number + 1;\n\n            Console.WriteLine(number); // 2\n            \n            Console.WriteLine(++number); // 3\n            // number = number + 1;\n            // Console.WriteLine(number);\n\n            number += 5;\n            // number = number + 5;\n\n            number *= 5;\n            // number = number * 5;\n\n            Console.WriteLine(number);\n</code></pre>\n"
      },
      "event_id": "$164926124649uUzbJ:matrix.workhardpgh.com",
      "origin_server_ts": 1649261246239,
      "unsigned": {
        "age": 954482845
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 954402185
    },
    {
      "type": "m.room.member",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@yockeyjessica:matrix.workhardpgh.com",
      "content": {
        "membership": "join",
        "displayname": "Jessica Yockey",
        "avatar_url": "mxc://matrix.workhardpgh.com/rutxBgYzayLAPRdoaJetBaVU"
      },
      "state_key": "@yockeyjessica:matrix.workhardpgh.com",
      "event_id": "$164926159051LMAHe:matrix.workhardpgh.com",
      "origin_server_ts": 1649261590929,
      "unsigned": {
        "age": 954138155
      },
      "user_id": "@yockeyjessica:matrix.workhardpgh.com",
      "age": 954138155
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "FizzBuzz\n```\nusing System;\n\nnamespace Session14Kata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // print out each number from 1 - 100\n            // if the number is divisble by 3, print out fizz instead\n            // if the number is divisble by 5, print out buzz instead\n            // if the number is divisble by both, print out fizzbuzz\n\n            for (int i = 1; i < 100; i++)\n            {\n                \n                // 5 / 3\n                // 1 with a remainder of 2\n                // 5 / 3 = 1 (the number of times 3 goes into 5)\n                // 5 % 3 = 2 (the remainder left over)\n                if (((i % 3) == 0) && ((i % 5) == 0))\n                {\n                    Console.WriteLine(\"fizzbuzz\");\n                }\n                else if (i % 3 == 0)\n                {\n                    Console.WriteLine(\"fizz\");\n                }\n                else if(i % 5 == 0)\n                {\n                    Console.WriteLine(\"buzz\");\n                }\n                else\n                {\n                    Console.WriteLine(i);\n                }\n\n            }\n        }\n    }\n}\n",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>FizzBuzz</p>\n<pre><code>using System;\n\nnamespace Session14Kata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // print out each number from 1 - 100\n            // if the number is divisble by 3, print out fizz instead\n            // if the number is divisble by 5, print out buzz instead\n            // if the number is divisble by both, print out fizzbuzz\n\n            for (int i = 1; i &lt; 100; i++)\n            {\n                \n                // 5 / 3\n                // 1 with a remainder of 2\n                // 5 / 3 = 1 (the number of times 3 goes into 5)\n                // 5 % 3 = 2 (the remainder left over)\n                if (((i % 3) == 0) &amp;&amp; ((i % 5) == 0))\n                {\n                    Console.WriteLine(&quot;fizzbuzz&quot;);\n                }\n                else if (i % 3 == 0)\n                {\n                    Console.WriteLine(&quot;fizz&quot;);\n                }\n                else if(i % 5 == 0)\n                {\n                    Console.WriteLine(&quot;buzz&quot;);\n                }\n                else\n                {\n                    Console.WriteLine(i);\n                }\n\n            }\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$164927251964PAlgc:matrix.workhardpgh.com",
      "origin_server_ts": 1649272519593,
      "unsigned": {
        "age": 943209491
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 943046971
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@tobiasfunction:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "```csharp\nusing System;\n\nnamespace FizzBuzz\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // FIZZBUZZ\n            // Print the numbers 1-100\n            // If the number is a multiple of 3, instead of the number, print \"fizz\"\n            // If the number is a multiple of 5, instead of the number, print \"buzz\"\n            // If the number is a multiple of both, print \"fizzbuzz\"\n\n            for (int i = 1; i <= 100; i++)\n            {\n                string output = \"\";\n\n                int mod3 = i % 3;\n                int mod5 = i % 5;\n\n                if (mod3 == 0)\n                {\n                    output += \"fizz\";\n                }\n                if (mod5 == 0)\n                {\n                    output += \"buzz\";\n                }\n                if (output == \"\")\n                {\n                    output += i;\n                }\n                Console.WriteLine(output);\n            }\n        }\n    }\n}\n```",
            "mimetype": "text/plain"
          },
          {
            "body": "<pre><code class=\"language-csharp\">using System;\n\nnamespace FizzBuzz\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // FIZZBUZZ\n            // Print the numbers 1-100\n            // If the number is a multiple of 3, instead of the number, print &quot;fizz&quot;\n            // If the number is a multiple of 5, instead of the number, print &quot;buzz&quot;\n            // If the number is a multiple of both, print &quot;fizzbuzz&quot;\n\n            for (int i = 1; i &lt;= 100; i++)\n            {\n                string output = &quot;&quot;;\n\n                int mod3 = i % 3;\n                int mod5 = i % 5;\n\n                if (mod3 == 0)\n                {\n                    output += &quot;fizz&quot;;\n                }\n                if (mod5 == 0)\n                {\n                    output += &quot;buzz&quot;;\n                }\n                if (output == &quot;&quot;)\n                {\n                    output += i;\n                }\n                Console.WriteLine(output);\n            }\n        }\n    }\n}\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "```csharp\nusing System;\n\nnamespace FizzBuzz\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // FIZZBUZZ\n            // Print the numbers 1-100\n            // If the number is a multiple of 3, instead of the number, print \"fizz\"\n            // If the number is a multiple of 5, instead of the number, print \"buzz\"\n            // If the number is a multiple of both, print \"fizzbuzz\"\n\n            for (int i = 1; i <= 100; i++)\n            {\n                string output = \"\";\n\n                int mod3 = i % 3;\n                int mod5 = i % 5;\n\n                if (mod3 == 0)\n                {\n                    output += \"fizz\";\n                }\n                if (mod5 == 0)\n                {\n                    output += \"buzz\";\n                }\n                if (output == \"\")\n                {\n                    output += i;\n                }\n                Console.WriteLine(output);\n            }\n        }\n    }\n}\n```",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<pre><code class=\"language-csharp\">using System;\n\nnamespace FizzBuzz\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // FIZZBUZZ\n            // Print the numbers 1-100\n            // If the number is a multiple of 3, instead of the number, print &quot;fizz&quot;\n            // If the number is a multiple of 5, instead of the number, print &quot;buzz&quot;\n            // If the number is a multiple of both, print &quot;fizzbuzz&quot;\n\n            for (int i = 1; i &lt;= 100; i++)\n            {\n                string output = &quot;&quot;;\n\n                int mod3 = i % 3;\n                int mod5 = i % 5;\n\n                if (mod3 == 0)\n                {\n                    output += &quot;fizz&quot;;\n                }\n                if (mod5 == 0)\n                {\n                    output += &quot;buzz&quot;;\n                }\n                if (output == &quot;&quot;)\n                {\n                    output += i;\n                }\n                Console.WriteLine(output);\n            }\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$164927259365MdmKW:matrix.workhardpgh.com",
      "origin_server_ts": 1649272593956,
      "unsigned": {
        "age": 943135128
      },
      "user_id": "@tobiasfunction:matrix.workhardpgh.com",
      "age": 942972608
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@taslater:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "```\nstring s = \"\";\nif (n % 3 == 0)\n{\n    s += \"fizz\";\n}\nif (n % 5 == 0)\n{\n    s += \"buzz\";\n}\nif (s == \"\")\n{\n    s += n;\n}\nConsole.WriteLine(s);\n```",
            "mimetype": "text/plain"
          },
          {
            "body": "<pre><code>string s = &quot;&quot;;\nif (n % 3 == 0)\n{\n    s += &quot;fizz&quot;;\n}\nif (n % 5 == 0)\n{\n    s += &quot;buzz&quot;;\n}\nif (s == &quot;&quot;)\n{\n    s += n;\n}\nConsole.WriteLine(s);\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "```\nstring s = \"\";\nif (n % 3 == 0)\n{\n    s += \"fizz\";\n}\nif (n % 5 == 0)\n{\n    s += \"buzz\";\n}\nif (s == \"\")\n{\n    s += n;\n}\nConsole.WriteLine(s);\n```",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<pre><code>string s = &quot;&quot;;\nif (n % 3 == 0)\n{\n    s += &quot;fizz&quot;;\n}\nif (n % 5 == 0)\n{\n    s += &quot;buzz&quot;;\n}\nif (s == &quot;&quot;)\n{\n    s += n;\n}\nConsole.WriteLine(s);\n</code></pre>\n"
      },
      "event_id": "$164927269567kpOKM:matrix.workhardpgh.com",
      "origin_server_ts": 1649272695122,
      "unsigned": {
        "age": 943033962
      },
      "user_id": "@taslater:matrix.workhardpgh.com",
      "age": 942871442
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "Array Example\n```\nusing System;\n\nnamespace Session14Kata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string name0 = \"John\";\n            string name1 = \"Jean\";\n            string name2 = \"Saturn\";\n            string name3 = \"Mars\";\n\n\n            string[] names = { \"John\", \"Jean\", \"Saturn\", \"Mars\", \"Scott\", \"Joyce\", \"Kelvin\", \"Sam\", \"Drew\", \"Sean\", \"Regina\" };\n\n            Console.WriteLine(name0);\n            name1 = \"Jean!\";\n            Console.WriteLine(name1);\n\n            Console.WriteLine(names[2]);\n\n\n            Console.WriteLine(\"Print out names from individual variables:\");\n            Console.WriteLine(name0);\n            Console.WriteLine(name1);\n            Console.WriteLine(name2);\n            Console.WriteLine(name3);\n\n            Console.WriteLine(\"Print out names from array:\");\n            Console.WriteLine(names[0]);\n            Console.WriteLine(names[1]);\n            Console.WriteLine(names[2]);\n            Console.WriteLine(names[3]);\n\n            Console.WriteLine(\"Print out names from array with loop: \");\n            for (int i = 0; i < names.Length; i++)\n            {\n                Console.WriteLine(names[i]);\n            }\n        }\n    }\n}\n",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Array Example</p>\n<pre><code>using System;\n\nnamespace Session14Kata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string name0 = &quot;John&quot;;\n            string name1 = &quot;Jean&quot;;\n            string name2 = &quot;Saturn&quot;;\n            string name3 = &quot;Mars&quot;;\n\n\n            string[] names = { &quot;John&quot;, &quot;Jean&quot;, &quot;Saturn&quot;, &quot;Mars&quot;, &quot;Scott&quot;, &quot;Joyce&quot;, &quot;Kelvin&quot;, &quot;Sam&quot;, &quot;Drew&quot;, &quot;Sean&quot;, &quot;Regina&quot; };\n\n            Console.WriteLine(name0);\n            name1 = &quot;Jean!&quot;;\n            Console.WriteLine(name1);\n\n            Console.WriteLine(names[2]);\n\n\n            Console.WriteLine(&quot;Print out names from individual variables:&quot;);\n            Console.WriteLine(name0);\n            Console.WriteLine(name1);\n            Console.WriteLine(name2);\n            Console.WriteLine(name3);\n\n            Console.WriteLine(&quot;Print out names from array:&quot;);\n            Console.WriteLine(names[0]);\n            Console.WriteLine(names[1]);\n            Console.WriteLine(names[2]);\n            Console.WriteLine(names[3]);\n\n            Console.WriteLine(&quot;Print out names from array with loop: &quot;);\n            for (int i = 0; i &lt; names.Length; i++)\n            {\n                Console.WriteLine(names[i]);\n            }\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$164927443969RfbgE:matrix.workhardpgh.com",
      "origin_server_ts": 1649274439358,
      "unsigned": {
        "age": 941289726
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 941127206
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@theseanlenhart:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "Hey I’m in an example array!"
      },
      "event_id": "$164927490870FAonD:matrix.workhardpgh.com",
      "origin_server_ts": 1649274908392,
      "unsigned": {
        "age": 940820692
      },
      "user_id": "@theseanlenhart:matrix.workhardpgh.com",
      "age": 940658172
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "that's true"
      },
      "event_id": "$164927500071OxUfR:matrix.workhardpgh.com",
      "origin_server_ts": 1649275000655,
      "unsigned": {
        "age": 940728429
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 940565909
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@theseanlenhart:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "Like a Boolean!"
      },
      "event_id": "$164927536472bCSvl:matrix.workhardpgh.com",
      "origin_server_ts": 1649275364213,
      "unsigned": {
        "age": 940364871
      },
      "user_id": "@theseanlenhart:matrix.workhardpgh.com",
      "age": 940202351
    },
    {
      "type": "m.room.member",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@donna.san:matrix.workhardpgh.com",
      "content": {
        "membership": "join",
        "displayname": "donna.san",
        "avatar_url": "mxc://matrix.workhardpgh.com/vMdBbmsiaAggtBCnGGYrcNmg"
      },
      "state_key": "@donna.san:matrix.workhardpgh.com",
      "event_id": "$164927550773ptXXF:matrix.workhardpgh.com",
      "origin_server_ts": 1649275507977,
      "unsigned": {
        "age": 940221107
      },
      "user_id": "@donna.san:matrix.workhardpgh.com",
      "age": 940221107
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@midhorn:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "Sean ? 🙌 : 👎 "
      },
      "event_id": "$164927817478bGzLw:matrix.workhardpgh.com",
      "origin_server_ts": 1649278174251,
      "unsigned": {
        "age": 937554833
      },
      "user_id": "@midhorn:matrix.workhardpgh.com",
      "age": 937392313
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@scottb:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "> <@theseanlenhart:matrix.workhardpgh.com> Hey I’m in an example array!\n\nMake sure to pick up that royalty check",
            "mimetype": "text/plain"
          },
          {
            "body": "<mx-reply><blockquote><a href=\"https://matrix.to/#/!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com/$164927490870FAonD:matrix.workhardpgh.com?via=matrix.workhardpgh.com\">In reply to</a> <a href=\"https://matrix.to/#/@theseanlenhart:matrix.workhardpgh.com\">@theseanlenhart:matrix.workhardpgh.com</a><br>Hey I’m in an example array!</blockquote></mx-reply>Make sure to pick up that royalty check",
            "mimetype": "text/html"
          }
        ],
        "body": "> <@theseanlenhart:matrix.workhardpgh.com> Hey I’m in an example array!\n\nMake sure to pick up that royalty check",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<mx-reply><blockquote><a href=\"https://matrix.to/#/!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com/$164927490870FAonD:matrix.workhardpgh.com?via=matrix.workhardpgh.com\">In reply to</a> <a href=\"https://matrix.to/#/@theseanlenhart:matrix.workhardpgh.com\">@theseanlenhart:matrix.workhardpgh.com</a><br>Hey I’m in an example array!</blockquote></mx-reply>Make sure to pick up that royalty check",
        "m.relates_to": {
          "m.in_reply_to": {
            "event_id": "$164927490870FAonD:matrix.workhardpgh.com"
          }
        }
      },
      "event_id": "$164927832879hEeRt:matrix.workhardpgh.com",
      "origin_server_ts": 1649278328826,
      "unsigned": {
        "age": 937400258
      },
      "user_id": "@scottb:matrix.workhardpgh.com",
      "age": 937237738
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@jallison:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "\n```\nusing System;\n\nnamespace Array\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Make a system that allows you to either a) save a message or b) retrieve a message​\n\n\n            Console.WriteLine(\"Please choose A, B, or C:\");\n            Console.WriteLine(\"A: Save a message\");\n            Console.WriteLine(\"B: Retrieve a message\");\n            Console.WriteLine(\"C: Exit system\");\n            string response = Console.ReadLine().ToLower();\n            string[] messages = { };\n            if (response == \"a\")\n            {\n                Console.WriteLine(\"Type your message\");\n                string savemessage = Console.ReadLine();\n            }\n            if (response == \"b\")\n            {\n                Console.WriteLine(\"Enter code to retrieve message\");\n                string code = Console.ReadLine();\n            }\n            if (response == \"c\")\n            {\n                Console.WriteLine(\"Goodbye\");\n            }\n\n\n            //When saving, return a # that the user can use to retrieve a message​\n\n            //When retrieving, allow a user to put in a # to see the message saved\n        }\n    }\n}",
            "mimetype": "text/plain"
          },
          {
            "body": "<pre><code>using System;\n\nnamespace Array\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Make a system that allows you to either a) save a message or b) retrieve a message​\n\n\n            Console.WriteLine(&quot;Please choose A, B, or C:&quot;);\n            Console.WriteLine(&quot;A: Save a message&quot;);\n            Console.WriteLine(&quot;B: Retrieve a message&quot;);\n            Console.WriteLine(&quot;C: Exit system&quot;);\n            string response = Console.ReadLine().ToLower();\n            string[] messages = { };\n            if (response == &quot;a&quot;)\n            {\n                Console.WriteLine(&quot;Type your message&quot;);\n                string savemessage = Console.ReadLine();\n            }\n            if (response == &quot;b&quot;)\n            {\n                Console.WriteLine(&quot;Enter code to retrieve message&quot;);\n                string code = Console.ReadLine();\n            }\n            if (response == &quot;c&quot;)\n            {\n                Console.WriteLine(&quot;Goodbye&quot;);\n            }\n\n\n            //When saving, return a # that the user can use to retrieve a message​\n\n            //When retrieving, allow a user to put in a # to see the message saved\n        }\n    }\n}\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "\n```\nusing System;\n\nnamespace Array\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Make a system that allows you to either a) save a message or b) retrieve a message​\n\n\n            Console.WriteLine(\"Please choose A, B, or C:\");\n            Console.WriteLine(\"A: Save a message\");\n            Console.WriteLine(\"B: Retrieve a message\");\n            Console.WriteLine(\"C: Exit system\");\n            string response = Console.ReadLine().ToLower();\n            string[] messages = { };\n            if (response == \"a\")\n            {\n                Console.WriteLine(\"Type your message\");\n                string savemessage = Console.ReadLine();\n            }\n            if (response == \"b\")\n            {\n                Console.WriteLine(\"Enter code to retrieve message\");\n                string code = Console.ReadLine();\n            }\n            if (response == \"c\")\n            {\n                Console.WriteLine(\"Goodbye\");\n            }\n\n\n            //When saving, return a # that the user can use to retrieve a message​\n\n            //When retrieving, allow a user to put in a # to see the message saved\n        }\n    }\n}",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<pre><code>using System;\n\nnamespace Array\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Make a system that allows you to either a) save a message or b) retrieve a message​\n\n\n            Console.WriteLine(&quot;Please choose A, B, or C:&quot;);\n            Console.WriteLine(&quot;A: Save a message&quot;);\n            Console.WriteLine(&quot;B: Retrieve a message&quot;);\n            Console.WriteLine(&quot;C: Exit system&quot;);\n            string response = Console.ReadLine().ToLower();\n            string[] messages = { };\n            if (response == &quot;a&quot;)\n            {\n                Console.WriteLine(&quot;Type your message&quot;);\n                string savemessage = Console.ReadLine();\n            }\n            if (response == &quot;b&quot;)\n            {\n                Console.WriteLine(&quot;Enter code to retrieve message&quot;);\n                string code = Console.ReadLine();\n            }\n            if (response == &quot;c&quot;)\n            {\n                Console.WriteLine(&quot;Goodbye&quot;);\n            }\n\n\n            //When saving, return a # that the user can use to retrieve a message​\n\n            //When retrieving, allow a user to put in a # to see the message saved\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$164927855880LaTlF:matrix.workhardpgh.com",
      "origin_server_ts": 1649278558563,
      "unsigned": {
        "age": 937170521
      },
      "user_id": "@jallison:matrix.workhardpgh.com",
      "age": 937089861
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@onoyemi:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "```\nusing System;\n\nnamespace First_Array\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Messaging System​\n\n            //Make a system that allows you to either a) save a message or b) retrieve a message​\n\n            //When saving, return a # that the user can use to retrieve a message​\n\n            //When retrieving, allow a user to put in a # to see the message saved\n\n            // ask for input\n            // assign message ID\n            // create a menu; options:\n            // a) input a message\n            // b) retrieve a message\n            // c) exit\n\n            string[] usermessage = new string[50];\n            int currentmessage = 0;\n            while (true)\n            {\n                Console.WriteLine(\"Welcome to your messaging system, HeLlO\");\n                Console.WriteLine(\"Pls pls select from the following:\");\n                Console.WriteLine(\"a) input a message\");\n                Console.WriteLine(\"b) retrieve a message\");\n                Console.WriteLine(\"c) exit\");\n\n                string option = Console.ReadLine();\n                //Console.WriteLine(option);\n\n                //usermessage[0] = \"test\";\n                // receive message\n                if (option == \"a\")\n                {\n\n                    Console.WriteLine(\"Please enter your message or whatever\");\n                    usermessage[currentmessage] = Console.ReadLine();\n                    //Console.WriteLine(usermessage[currentmessage]);\n                    Console.WriteLine(\"Your message is message number \" + currentmessage);\n                    currentmessage++;\n                }\n                else if (option == \"b\")\n                {\n                    Console.WriteLine(\"Please enter message ID number\");\n                    int requestmessage = Convert.ToInt32(Console.ReadLine());\n                    Console.WriteLine(usermessage[requestmessage]);\n                }\n\n\n                else\n                {\n                    Console.WriteLine(\"butt\");\n                }\n\n\n\n                // store message\n                // specify size of array or\n                // string [] = newstring [maximum number of elements in this array]\n            }\n           }\n    }\n}\n\n```",
            "mimetype": "text/plain"
          },
          {
            "body": "<pre><code>using System;\n\nnamespace First_Array\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Messaging System​\n\n            //Make a system that allows you to either a) save a message or b) retrieve a message​\n\n            //When saving, return a # that the user can use to retrieve a message​\n\n            //When retrieving, allow a user to put in a # to see the message saved\n\n            // ask for input\n            // assign message ID\n            // create a menu; options:\n            // a) input a message\n            // b) retrieve a message\n            // c) exit\n\n            string[] usermessage = new string[50];\n            int currentmessage = 0;\n            while (true)\n            {\n                Console.WriteLine(&quot;Welcome to your messaging system, HeLlO&quot;);\n                Console.WriteLine(&quot;Pls pls select from the following:&quot;);\n                Console.WriteLine(&quot;a) input a message&quot;);\n                Console.WriteLine(&quot;b) retrieve a message&quot;);\n                Console.WriteLine(&quot;c) exit&quot;);\n\n                string option = Console.ReadLine();\n                //Console.WriteLine(option);\n\n                //usermessage[0] = &quot;test&quot;;\n                // receive message\n                if (option == &quot;a&quot;)\n                {\n\n                    Console.WriteLine(&quot;Please enter your message or whatever&quot;);\n                    usermessage[currentmessage] = Console.ReadLine();\n                    //Console.WriteLine(usermessage[currentmessage]);\n                    Console.WriteLine(&quot;Your message is message number &quot; + currentmessage);\n                    currentmessage++;\n                }\n                else if (option == &quot;b&quot;)\n                {\n                    Console.WriteLine(&quot;Please enter message ID number&quot;);\n                    int requestmessage = Convert.ToInt32(Console.ReadLine());\n                    Console.WriteLine(usermessage[requestmessage]);\n                }\n\n\n                else\n                {\n                    Console.WriteLine(&quot;butt&quot;);\n                }\n\n\n\n                // store message\n                // specify size of array or\n                // string [] = newstring [maximum number of elements in this array]\n            }\n           }\n    }\n}\n\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "```\nusing System;\n\nnamespace First_Array\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Messaging System​\n\n            //Make a system that allows you to either a) save a message or b) retrieve a message​\n\n            //When saving, return a # that the user can use to retrieve a message​\n\n            //When retrieving, allow a user to put in a # to see the message saved\n\n            // ask for input\n            // assign message ID\n            // create a menu; options:\n            // a) input a message\n            // b) retrieve a message\n            // c) exit\n\n            string[] usermessage = new string[50];\n            int currentmessage = 0;\n            while (true)\n            {\n                Console.WriteLine(\"Welcome to your messaging system, HeLlO\");\n                Console.WriteLine(\"Pls pls select from the following:\");\n                Console.WriteLine(\"a) input a message\");\n                Console.WriteLine(\"b) retrieve a message\");\n                Console.WriteLine(\"c) exit\");\n\n                string option = Console.ReadLine();\n                //Console.WriteLine(option);\n\n                //usermessage[0] = \"test\";\n                // receive message\n                if (option == \"a\")\n                {\n\n                    Console.WriteLine(\"Please enter your message or whatever\");\n                    usermessage[currentmessage] = Console.ReadLine();\n                    //Console.WriteLine(usermessage[currentmessage]);\n                    Console.WriteLine(\"Your message is message number \" + currentmessage);\n                    currentmessage++;\n                }\n                else if (option == \"b\")\n                {\n                    Console.WriteLine(\"Please enter message ID number\");\n                    int requestmessage = Convert.ToInt32(Console.ReadLine());\n                    Console.WriteLine(usermessage[requestmessage]);\n                }\n\n\n                else\n                {\n                    Console.WriteLine(\"butt\");\n                }\n\n\n\n                // store message\n                // specify size of array or\n                // string [] = newstring [maximum number of elements in this array]\n            }\n           }\n    }\n}\n\n```",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<pre><code>using System;\n\nnamespace First_Array\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Messaging System​\n\n            //Make a system that allows you to either a) save a message or b) retrieve a message​\n\n            //When saving, return a # that the user can use to retrieve a message​\n\n            //When retrieving, allow a user to put in a # to see the message saved\n\n            // ask for input\n            // assign message ID\n            // create a menu; options:\n            // a) input a message\n            // b) retrieve a message\n            // c) exit\n\n            string[] usermessage = new string[50];\n            int currentmessage = 0;\n            while (true)\n            {\n                Console.WriteLine(&quot;Welcome to your messaging system, HeLlO&quot;);\n                Console.WriteLine(&quot;Pls pls select from the following:&quot;);\n                Console.WriteLine(&quot;a) input a message&quot;);\n                Console.WriteLine(&quot;b) retrieve a message&quot;);\n                Console.WriteLine(&quot;c) exit&quot;);\n\n                string option = Console.ReadLine();\n                //Console.WriteLine(option);\n\n                //usermessage[0] = &quot;test&quot;;\n                // receive message\n                if (option == &quot;a&quot;)\n                {\n\n                    Console.WriteLine(&quot;Please enter your message or whatever&quot;);\n                    usermessage[currentmessage] = Console.ReadLine();\n                    //Console.WriteLine(usermessage[currentmessage]);\n                    Console.WriteLine(&quot;Your message is message number &quot; + currentmessage);\n                    currentmessage++;\n                }\n                else if (option == &quot;b&quot;)\n                {\n                    Console.WriteLine(&quot;Please enter message ID number&quot;);\n                    int requestmessage = Convert.ToInt32(Console.ReadLine());\n                    Console.WriteLine(usermessage[requestmessage]);\n                }\n\n\n                else\n                {\n                    Console.WriteLine(&quot;butt&quot;);\n                }\n\n\n\n                // store message\n                // specify size of array or\n                // string [] = newstring [maximum number of elements in this array]\n            }\n           }\n    }\n}\n\n</code></pre>\n"
      },
      "event_id": "$164927869681OOSKy:matrix.workhardpgh.com",
      "origin_server_ts": 1649278696034,
      "unsigned": {
        "age": 937033050
      },
      "user_id": "@onoyemi:matrix.workhardpgh.com",
      "age": 936951146
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@renata42:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "\n```\nusing System;\n\nnamespace Day3or4\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string[] messages = new string[100];\n            int on = 1;\n            int index = 0;\n            while (on == 1)\n            {\n                Console.WriteLine(\"Please make a choice \");\n                Console.WriteLine(\"A. Save a message \");\n                Console.WriteLine(\"B. Retrieve a message \");\n                Console.WriteLine(\"C. Exit \");\n                string reply = Console.ReadLine().ToLower();\n\n                if (reply == \"a\")\n                {\n                    Console.WriteLine(\"Please leave a message \");\n                    messages[index] = Console.ReadLine();\n                    Console.WriteLine(\"Your message number is: \" + index);\n                    index = index + 1;\n                }\n                else if (reply == \"b\")\n\n                {\n                    Console.WriteLine(\"Please give a message number \");\n                    int id = Convert.ToInt32(Console.ReadLine());\n                    Console.WriteLine(messages[id]);\n                }\n\n                else if (reply == \"c\")\n                {\n                    on = 0;\n                }\n\n            }\n\n        }\n    }\n}\n```",
        "format": "org.matrix.custom.html",
        "formatted_body": "<pre><code>using System;\n\nnamespace Day3or4\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string[] messages = new string[100];\n            int on = 1;\n            int index = 0;\n            while (on == 1)\n            {\n                Console.WriteLine(&quot;Please make a choice &quot;);\n                Console.WriteLine(&quot;A. Save a message &quot;);\n                Console.WriteLine(&quot;B. Retrieve a message &quot;);\n                Console.WriteLine(&quot;C. Exit &quot;);\n                string reply = Console.ReadLine().ToLower();\n\n                if (reply == &quot;a&quot;)\n                {\n                    Console.WriteLine(&quot;Please leave a message &quot;);\n                    messages[index] = Console.ReadLine();\n                    Console.WriteLine(&quot;Your message number is: &quot; + index);\n                    index = index + 1;\n                }\n                else if (reply == &quot;b&quot;)\n\n                {\n                    Console.WriteLine(&quot;Please give a message number &quot;);\n                    int id = Convert.ToInt32(Console.ReadLine());\n                    Console.WriteLine(messages[id]);\n                }\n\n                else if (reply == &quot;c&quot;)\n                {\n                    on = 0;\n                }\n\n            }\n\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$164927870082poIBg:matrix.workhardpgh.com",
      "origin_server_ts": 1649278700822,
      "unsigned": {
        "age": 937028262
      },
      "user_id": "@renata42:matrix.workhardpgh.com",
      "age": 936946358
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@samsnowdon:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "```using System;\n\nnamespace ConsoleApp11\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int counter = 0;\n            while (counter < 3)\n            {\n                Console.WriteLine(\"Would you like to create or retrieve a message? (C/R)\");\n                string input = Console.ReadLine();\n                string[] messages = new string[100];\n                if (input == \"C\")\n                {\n                    Console.WriteLine(\"Let's create a message!\");\n                    messages[0] = Console.ReadLine();\n                }\n                else\n                {\n                    Console.WriteLine(\"Let's retrieve your message!\");\n                }\n                Console.WriteLine(messages[0]);\n                counter++;\n            }\n\n\n\n        }\n    }\n}",
            "mimetype": "text/plain"
          },
          {
            "body": "<pre><code class=\"language-using\">\nnamespace ConsoleApp11\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int counter = 0;\n            while (counter &lt; 3)\n            {\n                Console.WriteLine(&quot;Would you like to create or retrieve a message? (C/R)&quot;);\n                string input = Console.ReadLine();\n                string[] messages = new string[100];\n                if (input == &quot;C&quot;)\n                {\n                    Console.WriteLine(&quot;Let's create a message!&quot;);\n                    messages[0] = Console.ReadLine();\n                }\n                else\n                {\n                    Console.WriteLine(&quot;Let's retrieve your message!&quot;);\n                }\n                Console.WriteLine(messages[0]);\n                counter++;\n            }\n\n\n\n        }\n    }\n}\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "```using System;\n\nnamespace ConsoleApp11\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int counter = 0;\n            while (counter < 3)\n            {\n                Console.WriteLine(\"Would you like to create or retrieve a message? (C/R)\");\n                string input = Console.ReadLine();\n                string[] messages = new string[100];\n                if (input == \"C\")\n                {\n                    Console.WriteLine(\"Let's create a message!\");\n                    messages[0] = Console.ReadLine();\n                }\n                else\n                {\n                    Console.WriteLine(\"Let's retrieve your message!\");\n                }\n                Console.WriteLine(messages[0]);\n                counter++;\n            }\n\n\n\n        }\n    }\n}",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<pre><code class=\"language-using\">\nnamespace ConsoleApp11\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int counter = 0;\n            while (counter &lt; 3)\n            {\n                Console.WriteLine(&quot;Would you like to create or retrieve a message? (C/R)&quot;);\n                string input = Console.ReadLine();\n                string[] messages = new string[100];\n                if (input == &quot;C&quot;)\n                {\n                    Console.WriteLine(&quot;Let's create a message!&quot;);\n                    messages[0] = Console.ReadLine();\n                }\n                else\n                {\n                    Console.WriteLine(&quot;Let's retrieve your message!&quot;);\n                }\n                Console.WriteLine(messages[0]);\n                counter++;\n            }\n\n\n\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$164927932483tEkaZ:matrix.workhardpgh.com",
      "origin_server_ts": 1649279324660,
      "unsigned": {
        "age": 936404424
      },
      "user_id": "@samsnowdon:matrix.workhardpgh.com",
      "age": 936322520
    },
    {
      "type": "m.room.member",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@davidlasky:matrix.workhardpgh.com",
      "content": {
        "membership": "join",
        "displayname": "davidlasky"
      },
      "state_key": "@davidlasky:matrix.workhardpgh.com",
      "event_id": "$164933726698LeQdx:matrix.workhardpgh.com",
      "origin_server_ts": 1649337266657,
      "unsigned": {
        "age": 878462427
      },
      "user_id": "@davidlasky:matrix.workhardpgh.com",
      "age": 878462427
    },
    {
      "type": "m.room.member",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@joewalker147:matrix.workhardpgh.com",
      "content": {
        "membership": "join",
        "displayname": "Joe W (he/him)"
      },
      "state_key": "@joewalker147:matrix.workhardpgh.com",
      "event_id": "$1649337626100bNgNG:matrix.workhardpgh.com",
      "origin_server_ts": 1649337626899,
      "unsigned": {
        "replaces_state": "$164925100910SwFNh:matrix.workhardpgh.com",
        "prev_content": {
          "membership": "join",
          "displayname": "joewalker147"
        },
        "prev_sender": "@joewalker147:matrix.workhardpgh.com",
        "age": 878102185
      },
      "user_id": "@joewalker147:matrix.workhardpgh.com",
      "age": 878102185,
      "replaces_state": "$164925100910SwFNh:matrix.workhardpgh.com",
      "prev_content": {
        "membership": "join",
        "displayname": "joewalker147"
      }
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "Array Example Stuff\n```\nusing System;\n\nnamespace Session14Kata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string[] names = new string[10];\n            names[0] = \"John\";\n            names[1] = \"Jean\";\n            names[2] = \"Saturn\";\n\n            Console.WriteLine(\"Hey, type in a name!\");\n            names[3] = Console.ReadLine();\n\n            if(String.IsNullOrEmpty(names[5]))\n            {\n                Console.WriteLine(\"Yes, box 5 in that array is empty.\");\n            }\n\n\n            Console.WriteLine(\"Print out names from array with loop: \");\n            for (int i = 0; i < names.Length; i++)\n            {\n                Console.WriteLine(names[i]);\n            }\n        }\n    }\n}\n",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Array Example Stuff</p>\n<pre><code>using System;\n\nnamespace Session14Kata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string[] names = new string[10];\n            names[0] = &quot;John&quot;;\n            names[1] = &quot;Jean&quot;;\n            names[2] = &quot;Saturn&quot;;\n\n            Console.WriteLine(&quot;Hey, type in a name!&quot;);\n            names[3] = Console.ReadLine();\n\n            if(String.IsNullOrEmpty(names[5]))\n            {\n                Console.WriteLine(&quot;Yes, box 5 in that array is empty.&quot;);\n            }\n\n\n            Console.WriteLine(&quot;Print out names from array with loop: &quot;);\n            for (int i = 0; i &lt; names.Length; i++)\n            {\n                Console.WriteLine(names[i]);\n            }\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$1649337923103QZsHl:matrix.workhardpgh.com",
      "origin_server_ts": 1649337923090,
      "unsigned": {
        "age": 877805994
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 877724090
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@harrisonthurman:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "```            string[] messages = new string[3];\n            int index = 1;\n            int on = 1;\n            while (on == 1)\n            {\n                Console.WriteLine(\"Please make a choice \");\n                Console.WriteLine(\"A. Save a message \");\n                Console.WriteLine(\"B. Retrieve a message \");\n                Console.WriteLine(\"C. Delete a Message\");\n                Console.WriteLine(\"D. Exit \");\n                string reply = Console.ReadLine().ToLower();\n\n                if (reply == \"a\")\n                {\n                    if (index > 2)\n                    {\n                        Console.WriteLine(\"Your messages are full\");\n                    }\n                    else if (index <= 2)\n                    {\n                        Console.WriteLine(\"Please leave a message \");\n                        messages[index] = Console.ReadLine();\n                        Console.WriteLine(\"Your message number is: \" + index);\n                        index = index + 1;\n                    }\n                }\n                else if (reply == \"b\")\n\n                {\n                    Console.WriteLine(\"Please give a message number \");\n                    int id = Convert.ToInt32(Console.ReadLine());\n                    if (id > index)\n                    {\n                        Console.WriteLine(\"Your message doesn't exists\");\n                    }\n                    else\n                    {\n                        Console.WriteLine(messages[id]);\n                    }\n                }\n\n                else if (reply == \"c\")\n                {\n                    Console.WriteLine(\"What is the number of the message you would like to delete?\");\n                    int id = Convert.ToInt32(Console.ReadLine());\n                    messages[id] = \"This message doesn't exist2\";\n                    Console.WriteLine(\"Your message has been deleted\");\n                }\n\n                else if (reply == \"d\")\n                {\n                    on = 0;\n                }\n\n\n```",
            "mimetype": "text/plain"
          },
          {
            "body": "<pre><code class=\"language-string[]\">            int index = 1;\n            int on = 1;\n            while (on == 1)\n            {\n                Console.WriteLine(&quot;Please make a choice &quot;);\n                Console.WriteLine(&quot;A. Save a message &quot;);\n                Console.WriteLine(&quot;B. Retrieve a message &quot;);\n                Console.WriteLine(&quot;C. Delete a Message&quot;);\n                Console.WriteLine(&quot;D. Exit &quot;);\n                string reply = Console.ReadLine().ToLower();\n\n                if (reply == &quot;a&quot;)\n                {\n                    if (index &gt; 2)\n                    {\n                        Console.WriteLine(&quot;Your messages are full&quot;);\n                    }\n                    else if (index &lt;= 2)\n                    {\n                        Console.WriteLine(&quot;Please leave a message &quot;);\n                        messages[index] = Console.ReadLine();\n                        Console.WriteLine(&quot;Your message number is: &quot; + index);\n                        index = index + 1;\n                    }\n                }\n                else if (reply == &quot;b&quot;)\n\n                {\n                    Console.WriteLine(&quot;Please give a message number &quot;);\n                    int id = Convert.ToInt32(Console.ReadLine());\n                    if (id &gt; index)\n                    {\n                        Console.WriteLine(&quot;Your message doesn't exists&quot;);\n                    }\n                    else\n                    {\n                        Console.WriteLine(messages[id]);\n                    }\n                }\n\n                else if (reply == &quot;c&quot;)\n                {\n                    Console.WriteLine(&quot;What is the number of the message you would like to delete?&quot;);\n                    int id = Convert.ToInt32(Console.ReadLine());\n                    messages[id] = &quot;This message doesn't exist2&quot;;\n                    Console.WriteLine(&quot;Your message has been deleted&quot;);\n                }\n\n                else if (reply == &quot;d&quot;)\n                {\n                    on = 0;\n                }\n\n\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "```            string[] messages = new string[3];\n            int index = 1;\n            int on = 1;\n            while (on == 1)\n            {\n                Console.WriteLine(\"Please make a choice \");\n                Console.WriteLine(\"A. Save a message \");\n                Console.WriteLine(\"B. Retrieve a message \");\n                Console.WriteLine(\"C. Delete a Message\");\n                Console.WriteLine(\"D. Exit \");\n                string reply = Console.ReadLine().ToLower();\n\n                if (reply == \"a\")\n                {\n                    if (index > 2)\n                    {\n                        Console.WriteLine(\"Your messages are full\");\n                    }\n                    else if (index <= 2)\n                    {\n                        Console.WriteLine(\"Please leave a message \");\n                        messages[index] = Console.ReadLine();\n                        Console.WriteLine(\"Your message number is: \" + index);\n                        index = index + 1;\n                    }\n                }\n                else if (reply == \"b\")\n\n                {\n                    Console.WriteLine(\"Please give a message number \");\n                    int id = Convert.ToInt32(Console.ReadLine());\n                    if (id > index)\n                    {\n                        Console.WriteLine(\"Your message doesn't exists\");\n                    }\n                    else\n                    {\n                        Console.WriteLine(messages[id]);\n                    }\n                }\n\n                else if (reply == \"c\")\n                {\n                    Console.WriteLine(\"What is the number of the message you would like to delete?\");\n                    int id = Convert.ToInt32(Console.ReadLine());\n                    messages[id] = \"This message doesn't exist2\";\n                    Console.WriteLine(\"Your message has been deleted\");\n                }\n\n                else if (reply == \"d\")\n                {\n                    on = 0;\n                }\n\n\n```",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<pre><code class=\"language-string[]\">            int index = 1;\n            int on = 1;\n            while (on == 1)\n            {\n                Console.WriteLine(&quot;Please make a choice &quot;);\n                Console.WriteLine(&quot;A. Save a message &quot;);\n                Console.WriteLine(&quot;B. Retrieve a message &quot;);\n                Console.WriteLine(&quot;C. Delete a Message&quot;);\n                Console.WriteLine(&quot;D. Exit &quot;);\n                string reply = Console.ReadLine().ToLower();\n\n                if (reply == &quot;a&quot;)\n                {\n                    if (index &gt; 2)\n                    {\n                        Console.WriteLine(&quot;Your messages are full&quot;);\n                    }\n                    else if (index &lt;= 2)\n                    {\n                        Console.WriteLine(&quot;Please leave a message &quot;);\n                        messages[index] = Console.ReadLine();\n                        Console.WriteLine(&quot;Your message number is: &quot; + index);\n                        index = index + 1;\n                    }\n                }\n                else if (reply == &quot;b&quot;)\n\n                {\n                    Console.WriteLine(&quot;Please give a message number &quot;);\n                    int id = Convert.ToInt32(Console.ReadLine());\n                    if (id &gt; index)\n                    {\n                        Console.WriteLine(&quot;Your message doesn't exists&quot;);\n                    }\n                    else\n                    {\n                        Console.WriteLine(messages[id]);\n                    }\n                }\n\n                else if (reply == &quot;c&quot;)\n                {\n                    Console.WriteLine(&quot;What is the number of the message you would like to delete?&quot;);\n                    int id = Convert.ToInt32(Console.ReadLine());\n                    messages[id] = &quot;This message doesn't exist2&quot;;\n                    Console.WriteLine(&quot;Your message has been deleted&quot;);\n                }\n\n                else if (reply == &quot;d&quot;)\n                {\n                    on = 0;\n                }\n\n\n</code></pre>\n"
      },
      "event_id": "$1649340108104Urjgu:matrix.workhardpgh.com",
      "origin_server_ts": 1649340108631,
      "unsigned": {
        "age": 875620453
      },
      "user_id": "@harrisonthurman:matrix.workhardpgh.com",
      "age": 875538549
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@jallison:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "```\n\nusing System;\n\nnamespace Array\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Make a system that allows you to either a) save a message or b) retrieve a message​\n\n\n            string[] messages = new string[10];\n            Console.WriteLine(\"Please choose A, B, or C:\");\n            Console.WriteLine(\"A: Save a message\");\n            Console.WriteLine(\"B: Retrieve a message\");\n            Console.WriteLine(\"C: Exit system\");\n            string response = Console.ReadLine().ToLower();\n            if (response == \"a\")\n            {\n                Console.WriteLine(\"Type your message\");\n                int counter = 0;\n                while (counter < 10)\n                messages[counter] = Console.ReadLine();\n                counter = counter + 1;\n                {\n                    Console.WriteLine(\"Your message is number \" + counter);\n                }\n            }\n            if (response == \"b\")\n            {\n                Console.WriteLine(\"Enter number to retrieve message\");\n                int code = Convert.ToInt32(Console.ReadLine());\n                code = counter;\n                Console.WriteLine(messages[counter]);\n                \n            }\n            if (response == \"c\")\n            {\n                Console.WriteLine(\"Goodbye\");\n            }\n\n\n            //When saving, return a # that the user can use to retrieve a message​\n\n            //When retrieving, allow a user to put in a # to see the message saved\n        }\n    }\n}",
            "mimetype": "text/plain"
          },
          {
            "body": "<pre><code>\nusing System;\n\nnamespace Array\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Make a system that allows you to either a) save a message or b) retrieve a message​\n\n\n            string[] messages = new string[10];\n            Console.WriteLine(&quot;Please choose A, B, or C:&quot;);\n            Console.WriteLine(&quot;A: Save a message&quot;);\n            Console.WriteLine(&quot;B: Retrieve a message&quot;);\n            Console.WriteLine(&quot;C: Exit system&quot;);\n            string response = Console.ReadLine().ToLower();\n            if (response == &quot;a&quot;)\n            {\n                Console.WriteLine(&quot;Type your message&quot;);\n                int counter = 0;\n                while (counter &lt; 10)\n                messages[counter] = Console.ReadLine();\n                counter = counter + 1;\n                {\n                    Console.WriteLine(&quot;Your message is number &quot; + counter);\n                }\n            }\n            if (response == &quot;b&quot;)\n            {\n                Console.WriteLine(&quot;Enter number to retrieve message&quot;);\n                int code = Convert.ToInt32(Console.ReadLine());\n                code = counter;\n                Console.WriteLine(messages[counter]);\n                \n            }\n            if (response == &quot;c&quot;)\n            {\n                Console.WriteLine(&quot;Goodbye&quot;);\n            }\n\n\n            //When saving, return a # that the user can use to retrieve a message​\n\n            //When retrieving, allow a user to put in a # to see the message saved\n        }\n    }\n}\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "```\n\nusing System;\n\nnamespace Array\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Make a system that allows you to either a) save a message or b) retrieve a message​\n\n\n            string[] messages = new string[10];\n            Console.WriteLine(\"Please choose A, B, or C:\");\n            Console.WriteLine(\"A: Save a message\");\n            Console.WriteLine(\"B: Retrieve a message\");\n            Console.WriteLine(\"C: Exit system\");\n            string response = Console.ReadLine().ToLower();\n            if (response == \"a\")\n            {\n                Console.WriteLine(\"Type your message\");\n                int counter = 0;\n                while (counter < 10)\n                messages[counter] = Console.ReadLine();\n                counter = counter + 1;\n                {\n                    Console.WriteLine(\"Your message is number \" + counter);\n                }\n            }\n            if (response == \"b\")\n            {\n                Console.WriteLine(\"Enter number to retrieve message\");\n                int code = Convert.ToInt32(Console.ReadLine());\n                code = counter;\n                Console.WriteLine(messages[counter]);\n                \n            }\n            if (response == \"c\")\n            {\n                Console.WriteLine(\"Goodbye\");\n            }\n\n\n            //When saving, return a # that the user can use to retrieve a message​\n\n            //When retrieving, allow a user to put in a # to see the message saved\n        }\n    }\n}",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<pre><code>\nusing System;\n\nnamespace Array\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Make a system that allows you to either a) save a message or b) retrieve a message​\n\n\n            string[] messages = new string[10];\n            Console.WriteLine(&quot;Please choose A, B, or C:&quot;);\n            Console.WriteLine(&quot;A: Save a message&quot;);\n            Console.WriteLine(&quot;B: Retrieve a message&quot;);\n            Console.WriteLine(&quot;C: Exit system&quot;);\n            string response = Console.ReadLine().ToLower();\n            if (response == &quot;a&quot;)\n            {\n                Console.WriteLine(&quot;Type your message&quot;);\n                int counter = 0;\n                while (counter &lt; 10)\n                messages[counter] = Console.ReadLine();\n                counter = counter + 1;\n                {\n                    Console.WriteLine(&quot;Your message is number &quot; + counter);\n                }\n            }\n            if (response == &quot;b&quot;)\n            {\n                Console.WriteLine(&quot;Enter number to retrieve message&quot;);\n                int code = Convert.ToInt32(Console.ReadLine());\n                code = counter;\n                Console.WriteLine(messages[counter]);\n                \n            }\n            if (response == &quot;c&quot;)\n            {\n                Console.WriteLine(&quot;Goodbye&quot;);\n            }\n\n\n            //When saving, return a # that the user can use to retrieve a message​\n\n            //When retrieving, allow a user to put in a # to see the message saved\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$1649341809105Ojahx:matrix.workhardpgh.com",
      "origin_server_ts": 1649341809559,
      "unsigned": {
        "age": 873919525,
        "m.relations": {
          "m.replace": {
            "event_id": "$1649341825106QVfpP:matrix.workhardpgh.com",
            "origin_server_ts": 1649341825837,
            "sender": "@jallison:matrix.workhardpgh.com"
          }
        }
      },
      "user_id": "@jallison:matrix.workhardpgh.com",
      "age": 873837621
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@shaunapage:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "using System;\n\nnamespace messaging_system\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string[] messages = new string[5];\n            int counter = 0;\n            while (counter < 5)\n            {\n                Console.WriteLine(\"Would you like to create or retrieve a message? (C/R)\");\n                string input = Console.ReadLine();\n                if (input == \"C\")\n                {\n                    Console.WriteLine(\"Let's create a message!\");\n                    messages[counter] = Console.ReadLine();\n                    Console.WriteLine(\"Your message number is \" + counter);\n                    counter++;\n                    //Array.ForEach(messages, Console.WriteLine);\n                }\n                else\n                {\n                    Console.WriteLine(\"Let's retrieve your message!\");\n                    string userinput = Console.ReadLine();\n                    int userint = Convert.ToInt32(userinput); \n                    //Console.WriteLine(userint);\n\n                    string usermessage = messages[userint];\n                    Console.WriteLine(usermessage);\n                   \n                }\n               \n                //counter++;\n            }\n\n\n\n        }\n    }\n}\n",
            "mimetype": "text/plain"
          },
          {
            "body": "<p>using System;</p>\n<p>namespace messaging_system<br>{<br>class Program<br>{<br>static void Main(string[] args)<br>{<br>string[] messages = new string[5];<br>int counter = 0;<br>while (counter &lt; 5)<br>{<br>Console.WriteLine(&quot;Would you like to create or retrieve a message? (C/R)&quot;);<br>string input = Console.ReadLine();<br>if (input == &quot;C&quot;)<br>{<br>Console.WriteLine(&quot;Let's create a message!&quot;);<br>messages[counter] = Console.ReadLine();<br>Console.WriteLine(&quot;Your message number is &quot; + counter);<br>counter++;<br>//Array.ForEach(messages, Console.WriteLine);<br>}<br>else<br>{<br>Console.WriteLine(&quot;Let's retrieve your message!&quot;);<br>string userinput = Console.ReadLine();<br>int userint = Convert.ToInt32(userinput);<br>//Console.WriteLine(userint);</p>\n<pre><code>                string usermessage = messages[userint];\n                Console.WriteLine(usermessage);\n               \n            }\n           \n            //counter++;\n        }\n\n\n\n    }\n}\n</code></pre>\n<p>}</p>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "using System;\n\nnamespace messaging_system\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string[] messages = new string[5];\n            int counter = 0;\n            while (counter < 5)\n            {\n                Console.WriteLine(\"Would you like to create or retrieve a message? (C/R)\");\n                string input = Console.ReadLine();\n                if (input == \"C\")\n                {\n                    Console.WriteLine(\"Let's create a message!\");\n                    messages[counter] = Console.ReadLine();\n                    Console.WriteLine(\"Your message number is \" + counter);\n                    counter++;\n                    //Array.ForEach(messages, Console.WriteLine);\n                }\n                else\n                {\n                    Console.WriteLine(\"Let's retrieve your message!\");\n                    string userinput = Console.ReadLine();\n                    int userint = Convert.ToInt32(userinput); \n                    //Console.WriteLine(userint);\n\n                    string usermessage = messages[userint];\n                    Console.WriteLine(usermessage);\n                   \n                }\n               \n                //counter++;\n            }\n\n\n\n        }\n    }\n}\n",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>using System;</p>\n<p>namespace messaging_system<br>{<br>class Program<br>{<br>static void Main(string[] args)<br>{<br>string[] messages = new string[5];<br>int counter = 0;<br>while (counter &lt; 5)<br>{<br>Console.WriteLine(&quot;Would you like to create or retrieve a message? (C/R)&quot;);<br>string input = Console.ReadLine();<br>if (input == &quot;C&quot;)<br>{<br>Console.WriteLine(&quot;Let's create a message!&quot;);<br>messages[counter] = Console.ReadLine();<br>Console.WriteLine(&quot;Your message number is &quot; + counter);<br>counter++;<br>//Array.ForEach(messages, Console.WriteLine);<br>}<br>else<br>{<br>Console.WriteLine(&quot;Let's retrieve your message!&quot;);<br>string userinput = Console.ReadLine();<br>int userint = Convert.ToInt32(userinput);<br>//Console.WriteLine(userint);</p>\n<pre><code>                string usermessage = messages[userint];\n                Console.WriteLine(usermessage);\n               \n            }\n           \n            //counter++;\n        }\n\n\n\n    }\n}\n</code></pre>\n<p>}</p>\n"
      },
      "event_id": "$1649342319107eyRpW:matrix.workhardpgh.com",
      "origin_server_ts": 1649342319204,
      "unsigned": {
        "age": 873409880
      },
      "user_id": "@shaunapage:matrix.workhardpgh.com",
      "age": 873327976
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "Menu for Messages\n```\nusing System;\n\nnamespace Session14Kata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // message system\n            // show a menu that is like 'press a to save a message, b to retrieve, q to quit'\n            // if they pick a, save a message\n            // if they pick b, show a message\n            // if they pick q, close the program\n\n            bool shouldIKeepLooping = true;\n            while (shouldIKeepLooping == true) \n            { \n                Console.WriteLine(\"Welcome to the message system. Please press a to leave a message, b to retrieve a message, or q to quit.\");\n                string weWillAllTurntoCrabs = Console.ReadLine();\n\n                if (weWillAllTurntoCrabs == \"a\")\n                {\n                    Console.WriteLine(\"save a message\");\n                }\n                else if (weWillAllTurntoCrabs == \"b\")\n                {\n                    Console.WriteLine(\"show a message\");\n                }\n                else if (weWillAllTurntoCrabs == \"q\")\n                {\n                    Console.WriteLine(\"quit\");\n                    shouldIKeepLooping = false;\n                }\n                else\n                {\n                    Console.WriteLine(\"I guess you're a crab already.\");\n                }\n\n            } \n        }\n    }\n}\n",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Menu for Messages</p>\n<pre><code>using System;\n\nnamespace Session14Kata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // message system\n            // show a menu that is like 'press a to save a message, b to retrieve, q to quit'\n            // if they pick a, save a message\n            // if they pick b, show a message\n            // if they pick q, close the program\n\n            bool shouldIKeepLooping = true;\n            while (shouldIKeepLooping == true) \n            { \n                Console.WriteLine(&quot;Welcome to the message system. Please press a to leave a message, b to retrieve a message, or q to quit.&quot;);\n                string weWillAllTurntoCrabs = Console.ReadLine();\n\n                if (weWillAllTurntoCrabs == &quot;a&quot;)\n                {\n                    Console.WriteLine(&quot;save a message&quot;);\n                }\n                else if (weWillAllTurntoCrabs == &quot;b&quot;)\n                {\n                    Console.WriteLine(&quot;show a message&quot;);\n                }\n                else if (weWillAllTurntoCrabs == &quot;q&quot;)\n                {\n                    Console.WriteLine(&quot;quit&quot;);\n                    shouldIKeepLooping = false;\n                }\n                else\n                {\n                    Console.WriteLine(&quot;I guess you're a crab already.&quot;);\n                }\n\n            } \n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$1649344319108KxcWz:matrix.workhardpgh.com",
      "origin_server_ts": 1649344319637,
      "unsigned": {
        "age": 871409447
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 871327543
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "Messages - One Space\n```\nusing System;\n\nnamespace Session14Kata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // message system\n            // show a menu that is like 'press a to save a message, b to retrieve, q to quit'\n            // if they pick a, save a message\n            // ask them for their message\n            // save it somewhere?\n            // if they pick b, show a message\n            // if they pick q, close the program\n            string message = \"default crab\";\n            bool shouldIKeepLooping = true;\n            while (shouldIKeepLooping == true) \n            { \n                Console.WriteLine(\"Welcome to the message system. Please press a to leave a message, b to retrieve a message, or q to quit.\");\n                string weWillAllTurntoCrabs = Console.ReadLine();\n\n                if (weWillAllTurntoCrabs == \"a\")\n                {\n                    // Save a message\n                    Console.WriteLine(\"What is your message?\");\n                    message = Console.ReadLine();\n                }\n                else if (weWillAllTurntoCrabs == \"b\")\n                {\n                    // Retrieve a message\n                    Console.WriteLine(message);\n                }\n                else if (weWillAllTurntoCrabs == \"q\")\n                {\n                    Console.WriteLine(\"quit\");\n                    shouldIKeepLooping = false;\n                }\n                else\n                {\n                    Console.WriteLine(\"I guess you're a crab already.\");\n                }\n\n            } \n        }\n    }\n}\n",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Messages - One Space</p>\n<pre><code>using System;\n\nnamespace Session14Kata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // message system\n            // show a menu that is like 'press a to save a message, b to retrieve, q to quit'\n            // if they pick a, save a message\n            // ask them for their message\n            // save it somewhere?\n            // if they pick b, show a message\n            // if they pick q, close the program\n            string message = &quot;default crab&quot;;\n            bool shouldIKeepLooping = true;\n            while (shouldIKeepLooping == true) \n            { \n                Console.WriteLine(&quot;Welcome to the message system. Please press a to leave a message, b to retrieve a message, or q to quit.&quot;);\n                string weWillAllTurntoCrabs = Console.ReadLine();\n\n                if (weWillAllTurntoCrabs == &quot;a&quot;)\n                {\n                    // Save a message\n                    Console.WriteLine(&quot;What is your message?&quot;);\n                    message = Console.ReadLine();\n                }\n                else if (weWillAllTurntoCrabs == &quot;b&quot;)\n                {\n                    // Retrieve a message\n                    Console.WriteLine(message);\n                }\n                else if (weWillAllTurntoCrabs == &quot;q&quot;)\n                {\n                    Console.WriteLine(&quot;quit&quot;);\n                    shouldIKeepLooping = false;\n                }\n                else\n                {\n                    Console.WriteLine(&quot;I guess you're a crab already.&quot;);\n                }\n\n            } \n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$1649344862111QxDPt:matrix.workhardpgh.com",
      "origin_server_ts": 1649344862671,
      "unsigned": {
        "age": 870866413
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 870784509
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "Messages - With Array\n```\nusing System;\n\nnamespace Session14Kata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // message system\n            // show a menu that is like 'press a to save a message, b to retrieve, q to quit'\n            // if they pick a, save a message\n            // ask them for their message\n            // save it somewhere?\n            // if they pick b, show a message\n            // if they pick q, close the program\n            //string message = \"default crab\";\n            string[] messages = new string[5];\n            int currentMessageNumber = 0;\n\n            bool shouldIKeepLooping = true;\n            while (shouldIKeepLooping == true) \n            { \n                Console.WriteLine(\"Welcome to the message system. Please press a to leave a message, b to retrieve a message, or q to quit.\");\n                string weWillAllTurntoCrabs = Console.ReadLine();\n\n                if (weWillAllTurntoCrabs == \"a\")\n                {\n                    // Save a message\n                    Console.WriteLine(\"What is your message?\");\n                    messages[currentMessageNumber] = Console.ReadLine();\n                    Console.WriteLine(\"Your message is stored in box \" + currentMessageNumber);\n                    currentMessageNumber++;\n                }\n                else if (weWillAllTurntoCrabs == \"b\")\n                {\n                    // Retrieve a message\n                    Console.WriteLine(\"What message number would you like to see?\");\n                    int userNumber = Convert.ToInt32(Console.ReadLine());\n                    Console.WriteLine(messages[userNumber]);\n                }\n                else if (weWillAllTurntoCrabs == \"q\")\n                {\n                    Console.WriteLine(\"quit\");\n                    shouldIKeepLooping = false;\n                }\n                else\n                {\n                    Console.WriteLine(\"I guess you're a crab already.\");\n                }\n\n            } \n        }\n    }\n}\n",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Messages - With Array</p>\n<pre><code>using System;\n\nnamespace Session14Kata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // message system\n            // show a menu that is like 'press a to save a message, b to retrieve, q to quit'\n            // if they pick a, save a message\n            // ask them for their message\n            // save it somewhere?\n            // if they pick b, show a message\n            // if they pick q, close the program\n            //string message = &quot;default crab&quot;;\n            string[] messages = new string[5];\n            int currentMessageNumber = 0;\n\n            bool shouldIKeepLooping = true;\n            while (shouldIKeepLooping == true) \n            { \n                Console.WriteLine(&quot;Welcome to the message system. Please press a to leave a message, b to retrieve a message, or q to quit.&quot;);\n                string weWillAllTurntoCrabs = Console.ReadLine();\n\n                if (weWillAllTurntoCrabs == &quot;a&quot;)\n                {\n                    // Save a message\n                    Console.WriteLine(&quot;What is your message?&quot;);\n                    messages[currentMessageNumber] = Console.ReadLine();\n                    Console.WriteLine(&quot;Your message is stored in box &quot; + currentMessageNumber);\n                    currentMessageNumber++;\n                }\n                else if (weWillAllTurntoCrabs == &quot;b&quot;)\n                {\n                    // Retrieve a message\n                    Console.WriteLine(&quot;What message number would you like to see?&quot;);\n                    int userNumber = Convert.ToInt32(Console.ReadLine());\n                    Console.WriteLine(messages[userNumber]);\n                }\n                else if (weWillAllTurntoCrabs == &quot;q&quot;)\n                {\n                    Console.WriteLine(&quot;quit&quot;);\n                    shouldIKeepLooping = false;\n                }\n                else\n                {\n                    Console.WriteLine(&quot;I guess you're a crab already.&quot;);\n                }\n\n            } \n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$1649346010112Sqpci:matrix.workhardpgh.com",
      "origin_server_ts": 1649346010269,
      "unsigned": {
        "age": 869718815
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 869636911
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "Drawing a Grid\n```\nusing System;\n\nnamespace Session14Kata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int[,] grid = new int[8, 8];\n\n            grid[0, 0] = 7;\n            grid[1, 5] = 8;\n            grid[5, 2] = 3;\n\n            // for printing a 2D array\n            for (int row = 0; row < 8; row++)\n            {\n                for (int column = 0; column < 8; column++)\n                {\n                    Console.Write(grid[row, column]);\n                }\n\n                Console.WriteLine();\n            }\n        }\n    }\n}\n",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Drawing a Grid</p>\n<pre><code>using System;\n\nnamespace Session14Kata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int[,] grid = new int[8, 8];\n\n            grid[0, 0] = 7;\n            grid[1, 5] = 8;\n            grid[5, 2] = 3;\n\n            // for printing a 2D array\n            for (int row = 0; row &lt; 8; row++)\n            {\n                for (int column = 0; column &lt; 8; column++)\n                {\n                    Console.Write(grid[row, column]);\n                }\n\n                Console.WriteLine();\n            }\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$1649352170124FtZBd:matrix.workhardpgh.com",
      "origin_server_ts": 1649352170600,
      "unsigned": {
        "age": 863558484
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 863476580
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@joewalker147:matrix.workhardpgh.com",
      "content": {},
      "event_id": "$1649356332136fDeBO:matrix.workhardpgh.com",
      "origin_server_ts": 1649356332609,
      "unsigned": {
        "redacted_by": "$1649356354137HRrWl:matrix.workhardpgh.com",
        "redacted_because": {
          "type": "m.room.redaction",
          "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
          "sender": "@joewalker147:matrix.workhardpgh.com",
          "content": {
            "reason": "done wrong"
          },
          "redacts": "$1649356332136fDeBO:matrix.workhardpgh.com",
          "event_id": "$1649356354137HRrWl:matrix.workhardpgh.com",
          "origin_server_ts": 1649356354078,
          "unsigned": {
            "age": 859375006
          },
          "user_id": "@joewalker147:matrix.workhardpgh.com",
          "age": 859375006
        },
        "age": 859396475
      },
      "user_id": "@joewalker147:matrix.workhardpgh.com",
      "age": 859314571,
      "redacted_because": {
        "type": "m.room.redaction",
        "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
        "sender": "@joewalker147:matrix.workhardpgh.com",
        "content": {
          "reason": "done wrong"
        },
        "redacts": "$1649356332136fDeBO:matrix.workhardpgh.com",
        "event_id": "$1649356354137HRrWl:matrix.workhardpgh.com",
        "origin_server_ts": 1649356354078,
        "unsigned": {
          "age": 859293102
        },
        "user_id": "@joewalker147:matrix.workhardpgh.com",
        "age": 859293102
      }
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@joewalker147:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "```\n\n\nusing System;\n\nnamespace battleship\n{\nclass Program\n{\nstatic void Main(string\\[\\] args)\n{\n//create a grid\nint\\[,\\] grid = new int\\[8, 8\\];\nint hitcounter = 0;\n\n```\n        bool game = true;\n\n       grid[3, 7] = 5;\n       grid[7, 7] = 8;\n       grid[1, 4] = 3;\n\n        \n\n        for (int row = 0; row < 8; row++)\n        {\n            for ( int column = 0; column <8; column++)\n            {\n                Console.Write(grid[row, column]);\n            }\n            Console.WriteLine();\n        }\n        //ask which row to shoot\n        while (game == true)\n        {\n            Console.WriteLine(\"Where in the row would you like to shoot?\");\n            int rowchoice = Convert.ToInt32(Console.ReadLine());\n\n            //ask which column to shoot\n            Console.WriteLine(\"Where in the column would you like to shoot?\");\n            int colchoice = Convert.ToInt32(Console.ReadLine());\n\n            //determine hit or miss\n            if (rowchoice == 3 && colchoice == 7)\n            {\n                Console.WriteLine(\"hit\");\n                hitcounter++;\n            }\n            else if (rowchoice == 7 && colchoice == 7)\n            {\n                Console.WriteLine(\"hit\");\n                hitcounter++;\n            }\n            else if (rowchoice == 1 && colchoice == 4)\n            {\n                Console.WriteLine(\"hit\");\n                hitcounter++;\n            }\n            else //((rowchoice != 3 && colchoice != 7)|| (rowchoice != 7 && colchoice != 7)|| (rowchoice != 1 && colchoice != 4)) \n            {\n                Console.WriteLine(\"miss\");\n            }\n\n            if (hitcounter >=3)\n            {\n                game = false;\n                Console.WriteLine(\"That's game. you win... i guess :(\");\n            }\n        }\n\n        }\n    }\n```\n\n}\n\n```\n",
            "mimetype": "text/plain"
          },
          {
            "body": "<pre><code>\n\nusing System;\n\nnamespace battleship\n{\nclass Program\n{\nstatic void Main(string\\[\\] args)\n{\n//create a grid\nint\\[,\\] grid = new int\\[8, 8\\];\nint hitcounter = 0;\n\n</code></pre>\n<pre><code>    bool game = true;\n\n   grid[3, 7] = 5;\n   grid[7, 7] = 8;\n   grid[1, 4] = 3;\n\n    \n\n    for (int row = 0; row &lt; 8; row++)\n    {\n        for ( int column = 0; column &lt;8; column++)\n        {\n            Console.Write(grid[row, column]);\n        }\n        Console.WriteLine();\n    }\n    //ask which row to shoot\n    while (game == true)\n    {\n        Console.WriteLine(&quot;Where in the row would you like to shoot?&quot;);\n        int rowchoice = Convert.ToInt32(Console.ReadLine());\n\n        //ask which column to shoot\n        Console.WriteLine(&quot;Where in the column would you like to shoot?&quot;);\n        int colchoice = Convert.ToInt32(Console.ReadLine());\n\n        //determine hit or miss\n        if (rowchoice == 3 &amp;&amp; colchoice == 7)\n        {\n            Console.WriteLine(&quot;hit&quot;);\n            hitcounter++;\n        }\n        else if (rowchoice == 7 &amp;&amp; colchoice == 7)\n        {\n            Console.WriteLine(&quot;hit&quot;);\n            hitcounter++;\n        }\n        else if (rowchoice == 1 &amp;&amp; colchoice == 4)\n        {\n            Console.WriteLine(&quot;hit&quot;);\n            hitcounter++;\n        }\n        else //((rowchoice != 3 &amp;&amp; colchoice != 7)|| (rowchoice != 7 &amp;&amp; colchoice != 7)|| (rowchoice != 1 &amp;&amp; colchoice != 4)) \n        {\n            Console.WriteLine(&quot;miss&quot;);\n        }\n\n        if (hitcounter &gt;=3)\n        {\n            game = false;\n            Console.WriteLine(&quot;That's game. you win... i guess :(&quot;);\n        }\n    }\n\n    }\n}\n</code></pre>\n<pre><code>\n}\n\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "```\n\n\nusing System;\n\nnamespace battleship\n{\nclass Program\n{\nstatic void Main(string\\[\\] args)\n{\n//create a grid\nint\\[,\\] grid = new int\\[8, 8\\];\nint hitcounter = 0;\n\n```\n        bool game = true;\n\n       grid[3, 7] = 5;\n       grid[7, 7] = 8;\n       grid[1, 4] = 3;\n\n        \n\n        for (int row = 0; row < 8; row++)\n        {\n            for ( int column = 0; column <8; column++)\n            {\n                Console.Write(grid[row, column]);\n            }\n            Console.WriteLine();\n        }\n        //ask which row to shoot\n        while (game == true)\n        {\n            Console.WriteLine(\"Where in the row would you like to shoot?\");\n            int rowchoice = Convert.ToInt32(Console.ReadLine());\n\n            //ask which column to shoot\n            Console.WriteLine(\"Where in the column would you like to shoot?\");\n            int colchoice = Convert.ToInt32(Console.ReadLine());\n\n            //determine hit or miss\n            if (rowchoice == 3 && colchoice == 7)\n            {\n                Console.WriteLine(\"hit\");\n                hitcounter++;\n            }\n            else if (rowchoice == 7 && colchoice == 7)\n            {\n                Console.WriteLine(\"hit\");\n                hitcounter++;\n            }\n            else if (rowchoice == 1 && colchoice == 4)\n            {\n                Console.WriteLine(\"hit\");\n                hitcounter++;\n            }\n            else //((rowchoice != 3 && colchoice != 7)|| (rowchoice != 7 && colchoice != 7)|| (rowchoice != 1 && colchoice != 4)) \n            {\n                Console.WriteLine(\"miss\");\n            }\n\n            if (hitcounter >=3)\n            {\n                game = false;\n                Console.WriteLine(\"That's game. you win... i guess :(\");\n            }\n        }\n\n        }\n    }\n```\n\n}\n\n```\n",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<pre><code>\n\nusing System;\n\nnamespace battleship\n{\nclass Program\n{\nstatic void Main(string\\[\\] args)\n{\n//create a grid\nint\\[,\\] grid = new int\\[8, 8\\];\nint hitcounter = 0;\n\n</code></pre>\n<pre><code>    bool game = true;\n\n   grid[3, 7] = 5;\n   grid[7, 7] = 8;\n   grid[1, 4] = 3;\n\n    \n\n    for (int row = 0; row &lt; 8; row++)\n    {\n        for ( int column = 0; column &lt;8; column++)\n        {\n            Console.Write(grid[row, column]);\n        }\n        Console.WriteLine();\n    }\n    //ask which row to shoot\n    while (game == true)\n    {\n        Console.WriteLine(&quot;Where in the row would you like to shoot?&quot;);\n        int rowchoice = Convert.ToInt32(Console.ReadLine());\n\n        //ask which column to shoot\n        Console.WriteLine(&quot;Where in the column would you like to shoot?&quot;);\n        int colchoice = Convert.ToInt32(Console.ReadLine());\n\n        //determine hit or miss\n        if (rowchoice == 3 &amp;&amp; colchoice == 7)\n        {\n            Console.WriteLine(&quot;hit&quot;);\n            hitcounter++;\n        }\n        else if (rowchoice == 7 &amp;&amp; colchoice == 7)\n        {\n            Console.WriteLine(&quot;hit&quot;);\n            hitcounter++;\n        }\n        else if (rowchoice == 1 &amp;&amp; colchoice == 4)\n        {\n            Console.WriteLine(&quot;hit&quot;);\n            hitcounter++;\n        }\n        else //((rowchoice != 3 &amp;&amp; colchoice != 7)|| (rowchoice != 7 &amp;&amp; colchoice != 7)|| (rowchoice != 1 &amp;&amp; colchoice != 4)) \n        {\n            Console.WriteLine(&quot;miss&quot;);\n        }\n\n        if (hitcounter &gt;=3)\n        {\n            game = false;\n            Console.WriteLine(&quot;That's game. you win... i guess :(&quot;);\n        }\n    }\n\n    }\n}\n</code></pre>\n<pre><code>\n}\n\n</code></pre>\n"
      },
      "event_id": "$1649356371138UNRLT:matrix.workhardpgh.com",
      "origin_server_ts": 1649356371379,
      "unsigned": {
        "age": 859357705,
        "m.relations": {
          "m.replace": {
            "event_id": "$1649356487139cidVt:matrix.workhardpgh.com",
            "origin_server_ts": 1649356487902,
            "sender": "@joewalker147:matrix.workhardpgh.com"
          }
        }
      },
      "user_id": "@joewalker147:matrix.workhardpgh.com",
      "age": 859275801
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@imaniemanuel:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "```\nusing System;\n\nnamespace battleship\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //create a grid\n            int[,] grid = new int[8, 8];\n            int hitcounter = 0;\n\n            int[,] grid2 = new int[8, 8];\n            \n\n            bool game = true;\n\n            grid[3, 7] = 1;\n            grid[7, 7] = 1;\n            grid[1, 4] = 1;\n\n\n\n            for (int row = 0; row < 8; row++)\n            {\n                for (int column = 0; column < 8; column++)\n                {\n                    Console.Write(grid2[row, column]);\n                }\n                Console.WriteLine();\n            }\n            //ask which row to shoot\n            while (game == true)\n            {\n                Console.WriteLine(\"Where in the row would you like to shoot?\");\n                int rowchoice = Convert.ToInt32(Console.ReadLine());\n\n                //ask which column to shoot\n                Console.WriteLine(\"Where in the column would you like to shoot?\");\n                int colchoice = Convert.ToInt32(Console.ReadLine());\n\n                //determine hit or miss\n                if (rowchoice == 3 && colchoice == 7)\n                {\n                    Console.WriteLine(\"hit\");\n                    hitcounter++;\n                }\n                else if (rowchoice == 7 && colchoice == 7)\n                {\n                    Console.WriteLine(\"hit\");\n                    hitcounter++;\n                }\n                else if (rowchoice == 1 && colchoice == 4)\n                {\n                    Console.WriteLine(\"hit\");\n                    hitcounter++;\n                }\n                else //((rowchoice != 3 && colchoice != 7)|| (rowchoice != 7 && colchoice != 7)|| (rowchoice != 1 && colchoice != 4)) \n                {\n                    Console.WriteLine(\"miss\");\n                }\n\n                if (hitcounter >= 3)\n                {\n                    game = false;\n                    Console.WriteLine(\"That's game. you win... i guess :(\");\n                }\n            }\n\n        }\n    }\n}",
            "mimetype": "text/plain"
          },
          {
            "body": "<pre><code>using System;\n\nnamespace battleship\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //create a grid\n            int[,] grid = new int[8, 8];\n            int hitcounter = 0;\n\n            int[,] grid2 = new int[8, 8];\n            \n\n            bool game = true;\n\n            grid[3, 7] = 1;\n            grid[7, 7] = 1;\n            grid[1, 4] = 1;\n\n\n\n            for (int row = 0; row &lt; 8; row++)\n            {\n                for (int column = 0; column &lt; 8; column++)\n                {\n                    Console.Write(grid2[row, column]);\n                }\n                Console.WriteLine();\n            }\n            //ask which row to shoot\n            while (game == true)\n            {\n                Console.WriteLine(&quot;Where in the row would you like to shoot?&quot;);\n                int rowchoice = Convert.ToInt32(Console.ReadLine());\n\n                //ask which column to shoot\n                Console.WriteLine(&quot;Where in the column would you like to shoot?&quot;);\n                int colchoice = Convert.ToInt32(Console.ReadLine());\n\n                //determine hit or miss\n                if (rowchoice == 3 &amp;&amp; colchoice == 7)\n                {\n                    Console.WriteLine(&quot;hit&quot;);\n                    hitcounter++;\n                }\n                else if (rowchoice == 7 &amp;&amp; colchoice == 7)\n                {\n                    Console.WriteLine(&quot;hit&quot;);\n                    hitcounter++;\n                }\n                else if (rowchoice == 1 &amp;&amp; colchoice == 4)\n                {\n                    Console.WriteLine(&quot;hit&quot;);\n                    hitcounter++;\n                }\n                else //((rowchoice != 3 &amp;&amp; colchoice != 7)|| (rowchoice != 7 &amp;&amp; colchoice != 7)|| (rowchoice != 1 &amp;&amp; colchoice != 4)) \n                {\n                    Console.WriteLine(&quot;miss&quot;);\n                }\n\n                if (hitcounter &gt;= 3)\n                {\n                    game = false;\n                    Console.WriteLine(&quot;That's game. you win... i guess :(&quot;);\n                }\n            }\n\n        }\n    }\n}\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "```\nusing System;\n\nnamespace battleship\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //create a grid\n            int[,] grid = new int[8, 8];\n            int hitcounter = 0;\n\n            int[,] grid2 = new int[8, 8];\n            \n\n            bool game = true;\n\n            grid[3, 7] = 1;\n            grid[7, 7] = 1;\n            grid[1, 4] = 1;\n\n\n\n            for (int row = 0; row < 8; row++)\n            {\n                for (int column = 0; column < 8; column++)\n                {\n                    Console.Write(grid2[row, column]);\n                }\n                Console.WriteLine();\n            }\n            //ask which row to shoot\n            while (game == true)\n            {\n                Console.WriteLine(\"Where in the row would you like to shoot?\");\n                int rowchoice = Convert.ToInt32(Console.ReadLine());\n\n                //ask which column to shoot\n                Console.WriteLine(\"Where in the column would you like to shoot?\");\n                int colchoice = Convert.ToInt32(Console.ReadLine());\n\n                //determine hit or miss\n                if (rowchoice == 3 && colchoice == 7)\n                {\n                    Console.WriteLine(\"hit\");\n                    hitcounter++;\n                }\n                else if (rowchoice == 7 && colchoice == 7)\n                {\n                    Console.WriteLine(\"hit\");\n                    hitcounter++;\n                }\n                else if (rowchoice == 1 && colchoice == 4)\n                {\n                    Console.WriteLine(\"hit\");\n                    hitcounter++;\n                }\n                else //((rowchoice != 3 && colchoice != 7)|| (rowchoice != 7 && colchoice != 7)|| (rowchoice != 1 && colchoice != 4)) \n                {\n                    Console.WriteLine(\"miss\");\n                }\n\n                if (hitcounter >= 3)\n                {\n                    game = false;\n                    Console.WriteLine(\"That's game. you win... i guess :(\");\n                }\n            }\n\n        }\n    }\n}",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<pre><code>using System;\n\nnamespace battleship\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //create a grid\n            int[,] grid = new int[8, 8];\n            int hitcounter = 0;\n\n            int[,] grid2 = new int[8, 8];\n            \n\n            bool game = true;\n\n            grid[3, 7] = 1;\n            grid[7, 7] = 1;\n            grid[1, 4] = 1;\n\n\n\n            for (int row = 0; row &lt; 8; row++)\n            {\n                for (int column = 0; column &lt; 8; column++)\n                {\n                    Console.Write(grid2[row, column]);\n                }\n                Console.WriteLine();\n            }\n            //ask which row to shoot\n            while (game == true)\n            {\n                Console.WriteLine(&quot;Where in the row would you like to shoot?&quot;);\n                int rowchoice = Convert.ToInt32(Console.ReadLine());\n\n                //ask which column to shoot\n                Console.WriteLine(&quot;Where in the column would you like to shoot?&quot;);\n                int colchoice = Convert.ToInt32(Console.ReadLine());\n\n                //determine hit or miss\n                if (rowchoice == 3 &amp;&amp; colchoice == 7)\n                {\n                    Console.WriteLine(&quot;hit&quot;);\n                    hitcounter++;\n                }\n                else if (rowchoice == 7 &amp;&amp; colchoice == 7)\n                {\n                    Console.WriteLine(&quot;hit&quot;);\n                    hitcounter++;\n                }\n                else if (rowchoice == 1 &amp;&amp; colchoice == 4)\n                {\n                    Console.WriteLine(&quot;hit&quot;);\n                    hitcounter++;\n                }\n                else //((rowchoice != 3 &amp;&amp; colchoice != 7)|| (rowchoice != 7 &amp;&amp; colchoice != 7)|| (rowchoice != 1 &amp;&amp; colchoice != 4)) \n                {\n                    Console.WriteLine(&quot;miss&quot;);\n                }\n\n                if (hitcounter &gt;= 3)\n                {\n                    game = false;\n                    Console.WriteLine(&quot;That's game. you win... i guess :(&quot;);\n                }\n            }\n\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$1649358492141HuxwT:matrix.workhardpgh.com",
      "origin_server_ts": 1649358492358,
      "unsigned": {
        "age": 857236726
      },
      "user_id": "@imaniemanuel:matrix.workhardpgh.com",
      "age": 857154822
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@imaniemanuel:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "```\nusing System;\n\nnamespace battleship\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //create a grid\n            int[,] grid = new int[8, 8];\n            int hitcounter = 0;\n\n            int[,] grid2 = new int[8, 8];\n            \n\n            bool game = true;\n\n            grid[3, 7] = 1;\n            grid[7, 7] = 1;\n            grid[1, 4] = 1;\n\n\n\n            for (int row = 0; row < 8; row++)\n            {\n                for (int column = 0; column < 8; column++)\n                {\n                    Console.Write(grid2[row, column]);\n                }\n                Console.WriteLine();\n            }\n            //ask which row to shoot\n            while (game == true)\n            {\n\n                \n\n                Console.WriteLine(\"Where in the row would you like to shoot?\");\n                int rowchoice = Convert.ToInt32(Console.ReadLine());\n\n                \n                Console.WriteLine(\"Where in the column would you like to shoot?\");\n                int colchoice = Convert.ToInt32(Console.ReadLine());\n\n\n\n                if (rowchoice == 3 && colchoice == 7)\n                {\n                    Console.WriteLine(\"hit\");\n                    hitcounter++;\n                    grid2[3, 7] = 1;\n\n                    Console.WriteLine(\"---------------------------------------------------\");\n\n                    for (int row = 0; row < 8; row++)\n                    {\n                        for (int column = 0; column < 8; column++)\n                        {\n                            Console.Write(grid2[row, column]);\n                        }\n                        Console.WriteLine();\n                    }\n                }\n                else if (rowchoice == 7 && colchoice == 7)\n                {\n                    Console.WriteLine(\"hit\");\n                    hitcounter++;\n                    grid2[7, 7] = 1;\n\n                    Console.WriteLine(\"----------------------------------------------------\");\n\n                    for (int row = 0; row < 8; row++)\n                    {\n                        for (int column = 0; column < 8; column++)\n                        {\n                            Console.Write(grid2[row, column]);\n                        }\n                        Console.WriteLine();\n                    }\n                }\n                else if (rowchoice == 1 && colchoice == 4)\n                {\n                    Console.WriteLine(\"hit\");\n                    hitcounter++;\n                    grid2[1, 4] = 1;\n\n                    Console.WriteLine(\"-----------------------------------------------------\");\n\n                    for (int row = 0; row < 8; row++)\n                    {\n                        for (int column = 0; column < 8; column++)\n                        {\n                            Console.Write(grid2[row, column]);\n                        }\n                        Console.WriteLine();\n                    }\n                }\n                else if ((rowchoice == 3 + 1 || rowchoice == 3 - 1) && (colchoice == 7 + 1 || colchoice == 7 - 1))\n                {\n                    Console.WriteLine(\"You're close!\");\n                }\n\n                else if ((rowchoice == 7 + 1 || rowchoice == 7 - 1) && (colchoice == 7 + 1 || colchoice == 7 - 1))\n                {\n                    Console.WriteLine(\"You're close!\");\n                }\n\n                else if ((rowchoice == 1 + 1 || rowchoice == 1 - 1) && (colchoice == 4 + 1 || colchoice == 4 - 1))\n                {\n                    Console.WriteLine(\"You're close!\");\n                }\n                else\n                {\n\n                    Console.WriteLine(\"miss\");\n                }\n\n                if (hitcounter >= 3)\n                {\n                    game = false;\n                    Console.WriteLine(\"That's game. you win... i guess :(\");\n                }\n            }\n\n        }\n    }\n}",
            "mimetype": "text/plain"
          },
          {
            "body": "<pre><code>using System;\n\nnamespace battleship\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //create a grid\n            int[,] grid = new int[8, 8];\n            int hitcounter = 0;\n\n            int[,] grid2 = new int[8, 8];\n            \n\n            bool game = true;\n\n            grid[3, 7] = 1;\n            grid[7, 7] = 1;\n            grid[1, 4] = 1;\n\n\n\n            for (int row = 0; row &lt; 8; row++)\n            {\n                for (int column = 0; column &lt; 8; column++)\n                {\n                    Console.Write(grid2[row, column]);\n                }\n                Console.WriteLine();\n            }\n            //ask which row to shoot\n            while (game == true)\n            {\n\n                \n\n                Console.WriteLine(&quot;Where in the row would you like to shoot?&quot;);\n                int rowchoice = Convert.ToInt32(Console.ReadLine());\n\n                \n                Console.WriteLine(&quot;Where in the column would you like to shoot?&quot;);\n                int colchoice = Convert.ToInt32(Console.ReadLine());\n\n\n\n                if (rowchoice == 3 &amp;&amp; colchoice == 7)\n                {\n                    Console.WriteLine(&quot;hit&quot;);\n                    hitcounter++;\n                    grid2[3, 7] = 1;\n\n                    Console.WriteLine(&quot;---------------------------------------------------&quot;);\n\n                    for (int row = 0; row &lt; 8; row++)\n                    {\n                        for (int column = 0; column &lt; 8; column++)\n                        {\n                            Console.Write(grid2[row, column]);\n                        }\n                        Console.WriteLine();\n                    }\n                }\n                else if (rowchoice == 7 &amp;&amp; colchoice == 7)\n                {\n                    Console.WriteLine(&quot;hit&quot;);\n                    hitcounter++;\n                    grid2[7, 7] = 1;\n\n                    Console.WriteLine(&quot;----------------------------------------------------&quot;);\n\n                    for (int row = 0; row &lt; 8; row++)\n                    {\n                        for (int column = 0; column &lt; 8; column++)\n                        {\n                            Console.Write(grid2[row, column]);\n                        }\n                        Console.WriteLine();\n                    }\n                }\n                else if (rowchoice == 1 &amp;&amp; colchoice == 4)\n                {\n                    Console.WriteLine(&quot;hit&quot;);\n                    hitcounter++;\n                    grid2[1, 4] = 1;\n\n                    Console.WriteLine(&quot;-----------------------------------------------------&quot;);\n\n                    for (int row = 0; row &lt; 8; row++)\n                    {\n                        for (int column = 0; column &lt; 8; column++)\n                        {\n                            Console.Write(grid2[row, column]);\n                        }\n                        Console.WriteLine();\n                    }\n                }\n                else if ((rowchoice == 3 + 1 || rowchoice == 3 - 1) &amp;&amp; (colchoice == 7 + 1 || colchoice == 7 - 1))\n                {\n                    Console.WriteLine(&quot;You're close!&quot;);\n                }\n\n                else if ((rowchoice == 7 + 1 || rowchoice == 7 - 1) &amp;&amp; (colchoice == 7 + 1 || colchoice == 7 - 1))\n                {\n                    Console.WriteLine(&quot;You're close!&quot;);\n                }\n\n                else if ((rowchoice == 1 + 1 || rowchoice == 1 - 1) &amp;&amp; (colchoice == 4 + 1 || colchoice == 4 - 1))\n                {\n                    Console.WriteLine(&quot;You're close!&quot;);\n                }\n                else\n                {\n\n                    Console.WriteLine(&quot;miss&quot;);\n                }\n\n                if (hitcounter &gt;= 3)\n                {\n                    game = false;\n                    Console.WriteLine(&quot;That's game. you win... i guess :(&quot;);\n                }\n            }\n\n        }\n    }\n}\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "```\nusing System;\n\nnamespace battleship\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //create a grid\n            int[,] grid = new int[8, 8];\n            int hitcounter = 0;\n\n            int[,] grid2 = new int[8, 8];\n            \n\n            bool game = true;\n\n            grid[3, 7] = 1;\n            grid[7, 7] = 1;\n            grid[1, 4] = 1;\n\n\n\n            for (int row = 0; row < 8; row++)\n            {\n                for (int column = 0; column < 8; column++)\n                {\n                    Console.Write(grid2[row, column]);\n                }\n                Console.WriteLine();\n            }\n            //ask which row to shoot\n            while (game == true)\n            {\n\n                \n\n                Console.WriteLine(\"Where in the row would you like to shoot?\");\n                int rowchoice = Convert.ToInt32(Console.ReadLine());\n\n                \n                Console.WriteLine(\"Where in the column would you like to shoot?\");\n                int colchoice = Convert.ToInt32(Console.ReadLine());\n\n\n\n                if (rowchoice == 3 && colchoice == 7)\n                {\n                    Console.WriteLine(\"hit\");\n                    hitcounter++;\n                    grid2[3, 7] = 1;\n\n                    Console.WriteLine(\"---------------------------------------------------\");\n\n                    for (int row = 0; row < 8; row++)\n                    {\n                        for (int column = 0; column < 8; column++)\n                        {\n                            Console.Write(grid2[row, column]);\n                        }\n                        Console.WriteLine();\n                    }\n                }\n                else if (rowchoice == 7 && colchoice == 7)\n                {\n                    Console.WriteLine(\"hit\");\n                    hitcounter++;\n                    grid2[7, 7] = 1;\n\n                    Console.WriteLine(\"----------------------------------------------------\");\n\n                    for (int row = 0; row < 8; row++)\n                    {\n                        for (int column = 0; column < 8; column++)\n                        {\n                            Console.Write(grid2[row, column]);\n                        }\n                        Console.WriteLine();\n                    }\n                }\n                else if (rowchoice == 1 && colchoice == 4)\n                {\n                    Console.WriteLine(\"hit\");\n                    hitcounter++;\n                    grid2[1, 4] = 1;\n\n                    Console.WriteLine(\"-----------------------------------------------------\");\n\n                    for (int row = 0; row < 8; row++)\n                    {\n                        for (int column = 0; column < 8; column++)\n                        {\n                            Console.Write(grid2[row, column]);\n                        }\n                        Console.WriteLine();\n                    }\n                }\n                else if ((rowchoice == 3 + 1 || rowchoice == 3 - 1) && (colchoice == 7 + 1 || colchoice == 7 - 1))\n                {\n                    Console.WriteLine(\"You're close!\");\n                }\n\n                else if ((rowchoice == 7 + 1 || rowchoice == 7 - 1) && (colchoice == 7 + 1 || colchoice == 7 - 1))\n                {\n                    Console.WriteLine(\"You're close!\");\n                }\n\n                else if ((rowchoice == 1 + 1 || rowchoice == 1 - 1) && (colchoice == 4 + 1 || colchoice == 4 - 1))\n                {\n                    Console.WriteLine(\"You're close!\");\n                }\n                else\n                {\n\n                    Console.WriteLine(\"miss\");\n                }\n\n                if (hitcounter >= 3)\n                {\n                    game = false;\n                    Console.WriteLine(\"That's game. you win... i guess :(\");\n                }\n            }\n\n        }\n    }\n}",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<pre><code>using System;\n\nnamespace battleship\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //create a grid\n            int[,] grid = new int[8, 8];\n            int hitcounter = 0;\n\n            int[,] grid2 = new int[8, 8];\n            \n\n            bool game = true;\n\n            grid[3, 7] = 1;\n            grid[7, 7] = 1;\n            grid[1, 4] = 1;\n\n\n\n            for (int row = 0; row &lt; 8; row++)\n            {\n                for (int column = 0; column &lt; 8; column++)\n                {\n                    Console.Write(grid2[row, column]);\n                }\n                Console.WriteLine();\n            }\n            //ask which row to shoot\n            while (game == true)\n            {\n\n                \n\n                Console.WriteLine(&quot;Where in the row would you like to shoot?&quot;);\n                int rowchoice = Convert.ToInt32(Console.ReadLine());\n\n                \n                Console.WriteLine(&quot;Where in the column would you like to shoot?&quot;);\n                int colchoice = Convert.ToInt32(Console.ReadLine());\n\n\n\n                if (rowchoice == 3 &amp;&amp; colchoice == 7)\n                {\n                    Console.WriteLine(&quot;hit&quot;);\n                    hitcounter++;\n                    grid2[3, 7] = 1;\n\n                    Console.WriteLine(&quot;---------------------------------------------------&quot;);\n\n                    for (int row = 0; row &lt; 8; row++)\n                    {\n                        for (int column = 0; column &lt; 8; column++)\n                        {\n                            Console.Write(grid2[row, column]);\n                        }\n                        Console.WriteLine();\n                    }\n                }\n                else if (rowchoice == 7 &amp;&amp; colchoice == 7)\n                {\n                    Console.WriteLine(&quot;hit&quot;);\n                    hitcounter++;\n                    grid2[7, 7] = 1;\n\n                    Console.WriteLine(&quot;----------------------------------------------------&quot;);\n\n                    for (int row = 0; row &lt; 8; row++)\n                    {\n                        for (int column = 0; column &lt; 8; column++)\n                        {\n                            Console.Write(grid2[row, column]);\n                        }\n                        Console.WriteLine();\n                    }\n                }\n                else if (rowchoice == 1 &amp;&amp; colchoice == 4)\n                {\n                    Console.WriteLine(&quot;hit&quot;);\n                    hitcounter++;\n                    grid2[1, 4] = 1;\n\n                    Console.WriteLine(&quot;-----------------------------------------------------&quot;);\n\n                    for (int row = 0; row &lt; 8; row++)\n                    {\n                        for (int column = 0; column &lt; 8; column++)\n                        {\n                            Console.Write(grid2[row, column]);\n                        }\n                        Console.WriteLine();\n                    }\n                }\n                else if ((rowchoice == 3 + 1 || rowchoice == 3 - 1) &amp;&amp; (colchoice == 7 + 1 || colchoice == 7 - 1))\n                {\n                    Console.WriteLine(&quot;You're close!&quot;);\n                }\n\n                else if ((rowchoice == 7 + 1 || rowchoice == 7 - 1) &amp;&amp; (colchoice == 7 + 1 || colchoice == 7 - 1))\n                {\n                    Console.WriteLine(&quot;You're close!&quot;);\n                }\n\n                else if ((rowchoice == 1 + 1 || rowchoice == 1 - 1) &amp;&amp; (colchoice == 4 + 1 || colchoice == 4 - 1))\n                {\n                    Console.WriteLine(&quot;You're close!&quot;);\n                }\n                else\n                {\n\n                    Console.WriteLine(&quot;miss&quot;);\n                }\n\n                if (hitcounter &gt;= 3)\n                {\n                    game = false;\n                    Console.WriteLine(&quot;That's game. you win... i guess :(&quot;);\n                }\n            }\n\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$1649362125148DTBVW:matrix.workhardpgh.com",
      "origin_server_ts": 1649362125937,
      "unsigned": {
        "age": 853603147
      },
      "user_id": "@imaniemanuel:matrix.workhardpgh.com",
      "age": 853521243
    },
    {
      "type": "m.room.member",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@richcstan:matrix.workhardpgh.com",
      "content": {
        "membership": "join",
        "displayname": "Rich Stanley"
      },
      "state_key": "@richcstan:matrix.workhardpgh.com",
      "event_id": "$1649362208149swrFf:matrix.workhardpgh.com",
      "origin_server_ts": 1649362208111,
      "unsigned": {
        "age": 853520973
      },
      "user_id": "@richcstan:matrix.workhardpgh.com",
      "age": 853520973
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@yockeyjessica:matrix.workhardpgh.com",
      "content": {
        "body": "```\n\nusing System;\n\nnamespace Session14Battleship\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Create a grid(an array with two dimensions) that is 8 by 8.\n\n            int[,] grid = new int[8, 8];\n            grid[2, 2] = 1;\n            grid[4, 4] = 1;\n\n            int[,] displaygrid = new int[8, 8];\n\n            bool ships = true;\n            Console.WriteLine(\"1 is miss, 2 is hit\");\n\n            while (ships == true)\n            {\n                for (int row = 0; row < 8; row++)\n                {\n                    for (int column = 0; column < 8; column++)\n                    {\n                        Console.Write(displaygrid[row, column]);\n                    }\n                    Console.WriteLine();\n\n                }\n\n                Console.WriteLine(\"Please select a row.\");\n                int userrowguess = Convert.ToInt32(Console.ReadLine());\n                Console.WriteLine(\"Please select a column.\");\n                int usercolumnguess = Convert.ToInt32(Console.ReadLine());\n                Console.WriteLine(userrowguess + \",\" + usercolumnguess);\n\n                if (grid[userrowguess, usercolumnguess] != 0)\n                {\n                    Console.WriteLine(\"Hit!\");\n                    grid[userrowguess, usercolumnguess] = 0;\n                    displaygrid[userrowguess, usercolumnguess] = 2;\n\n                }\n                else\n                {\n                    Console.WriteLine(\"Miss!\");\n                    displaygrid[userrowguess, usercolumnguess] = 1;\n                    if (grid[userrowguess + 1, usercolumnguess] == 1 || grid[userrowguess - 1, usercolumnguess] == 1 || grid[userrowguess, usercolumnguess + 1] == 1 || grid[userrowguess, usercolumnguess - 1] == 1)\n                    {\n                        Console.WriteLine(\"Close!\");\n                    }\n\n                }\n\n                int aretherethings = 0;\n\n                for (int row = 0; row < 8; row++)\n                {\n                    for (int column = 0; column < 8; column++)\n                    {\n                        if (grid[row, column] != 0)\n                        {\n                            aretherethings++;\n\n                        }\n                    }\n\n                }\n\n                if (aretherethings == 0)\n                {\n                    ships = false;\n                    Console.WriteLine(\"GAME OVER!\");\n                }\n            }\n            //This grid will hold whether there is a ship in a given square or not.You can use a bool or an int for this.You will need to be able to display this grid, with\n            //00000000\n            //0000*000\n            //00**0000\n            //00000000\n            //000**000\n            //*0*00000\n            //00000**0\n            //00****00\n\n            //Let the user try to \"shoot\" a ship by selecting two coordinates (the column and the row)\n            //When users shoot an enemy, clear the ship in that cell\n            //When all enemies are gone, make the \"game\" end.\n            // Bonus:\n            // If user picks a cell next to a ship, say \"close!\"\n\n        }\n    }\n}\n```",
        "format": "org.matrix.custom.html",
        "msgtype": "m.text",
        "formatted_body": "<pre><code>\nusing System;\n\nnamespace Session14Battleship\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Create a grid(an array with two dimensions) that is 8 by 8.\n\n            int[,] grid = new int[8, 8];\n            grid[2, 2] = 1;\n            grid[4, 4] = 1;\n\n            int[,] displaygrid = new int[8, 8];\n\n            bool ships = true;\n            Console.WriteLine(&quot;1 is miss, 2 is hit&quot;);\n\n            while (ships == true)\n            {\n                for (int row = 0; row &lt; 8; row++)\n                {\n                    for (int column = 0; column &lt; 8; column++)\n                    {\n                        Console.Write(displaygrid[row, column]);\n                    }\n                    Console.WriteLine();\n\n                }\n\n                Console.WriteLine(&quot;Please select a row.&quot;);\n                int userrowguess = Convert.ToInt32(Console.ReadLine());\n                Console.WriteLine(&quot;Please select a column.&quot;);\n                int usercolumnguess = Convert.ToInt32(Console.ReadLine());\n                Console.WriteLine(userrowguess + &quot;,&quot; + usercolumnguess);\n\n                if (grid[userrowguess, usercolumnguess] != 0)\n                {\n                    Console.WriteLine(&quot;Hit!&quot;);\n                    grid[userrowguess, usercolumnguess] = 0;\n                    displaygrid[userrowguess, usercolumnguess] = 2;\n\n                }\n                else\n                {\n                    Console.WriteLine(&quot;Miss!&quot;);\n                    displaygrid[userrowguess, usercolumnguess] = 1;\n                    if (grid[userrowguess + 1, usercolumnguess] == 1 || grid[userrowguess - 1, usercolumnguess] == 1 || grid[userrowguess, usercolumnguess + 1] == 1 || grid[userrowguess, usercolumnguess - 1] == 1)\n                    {\n                        Console.WriteLine(&quot;Close!&quot;);\n                    }\n\n                }\n\n                int aretherethings = 0;\n\n                for (int row = 0; row &lt; 8; row++)\n                {\n                    for (int column = 0; column &lt; 8; column++)\n                    {\n                        if (grid[row, column] != 0)\n                        {\n                            aretherethings++;\n\n                        }\n                    }\n\n                }\n\n                if (aretherethings == 0)\n                {\n                    ships = false;\n                    Console.WriteLine(&quot;GAME OVER!&quot;);\n                }\n            }\n            //This grid will hold whether there is a ship in a given square or not.You can use a bool or an int for this.You will need to be able to display this grid, with\n            //00000000\n            //0000*000\n            //00**0000\n            //00000000\n            //000**000\n            //*0*00000\n            //00000**0\n            //00****00\n\n            //Let the user try to &quot;shoot&quot; a ship by selecting two coordinates (the column and the row)\n            //When users shoot an enemy, clear the ship in that cell\n            //When all enemies are gone, make the &quot;game&quot; end.\n            // Bonus:\n            // If user picks a cell next to a ship, say &quot;close!&quot;\n\n        }\n    }\n}\n</code></pre>"
      },
      "event_id": "$1649363782157OkrRB:matrix.workhardpgh.com",
      "origin_server_ts": 1649363782321,
      "unsigned": {
        "age": 851946763
      },
      "user_id": "@yockeyjessica:matrix.workhardpgh.com",
      "age": 851784353
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@andrew:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "> <@yockeyjessica:matrix.workhardpgh.com> ```\n> \n> using System;\n> \n> namespace Session14Battleship\n> {\n>     class Program\n>     {\n>         static void Main(string[] args)\n>         {\n>             //Create a grid(an array with two dimensions) that is 8 by 8.\n> \n>             int[,] grid = new int[8, 8];\n>             grid[2, 2] = 1;\n>             grid[4, 4] = 1;\n> \n>             int[,] displaygrid = new int[8, 8];\n> \n>             bool ships = true;\n>             Console.WriteLine(\"1 is miss, 2 is hit\");\n> \n>             while (ships == true)\n>             {\n>                 for (int row = 0; row < 8; row++)\n>                 {\n>                     for (int column = 0; column < 8; column++)\n>                     {\n>                         Console.Write(displaygrid[row, column]);\n>                     }\n>                     Console.WriteLine();\n> \n>                 }\n> \n>                 Console.WriteLine(\"Please select a row.\");\n>                 int userrowguess = Convert.ToInt32(Console.ReadLine());\n>                 Console.WriteLine(\"Please select a column.\");\n>                 int usercolumnguess = Convert.ToInt32(Console.ReadLine());\n>                 Console.WriteLine(userrowguess + \",\" + usercolumnguess);\n> \n>                 if (grid[userrowguess, usercolumnguess] != 0)\n>                 {\n>                     Console.WriteLine(\"Hit!\");\n>                     grid[userrowguess, usercolumnguess] = 0;\n>                     displaygrid[userrowguess, usercolumnguess] = 2;\n> \n>                 }\n>                 else\n>                 {\n>                     Console.WriteLine(\"Miss!\");\n>                     displaygrid[userrowguess, usercolumnguess] = 1;\n>                     if (grid[userrowguess + 1, usercolumnguess] == 1 || grid[userrowguess - 1, usercolumnguess] == 1 || grid[userrowguess, usercolumnguess + 1] == 1 || grid[userrowguess, usercolumnguess - 1] == 1)\n>                     {\n>                         Console.WriteLine(\"Close!\");\n>                     }\n> \n>                 }\n> \n>                 int aretherethings = 0;\n> \n>                 for (int row = 0; row < 8; row++)\n>                 {\n>                     for (int column = 0; column < 8; column++)\n>                     {\n>                         if (grid[row, column] != 0)\n>                         {\n>                             aretherethings++;\n> \n>                         }\n>                     }\n> \n>                 }\n> \n>                 if (aretherethings == 0)\n>                 {\n>                     ships = false;\n>                     Console.WriteLine(\"GAME OVER!\");\n>                 }\n>             }\n>             //This grid will hold whether there is a ship in a given square or not.You can use a bool or an int for this.You will need to be able to display this grid, with\n>             //00000000\n>             //0000*000\n>             //00**0000\n>             //00000000\n>             //000**000\n>             //*0*00000\n>             //00000**0\n>             //00****00\n> \n>             //Let the user try to \"shoot\" a ship by selecting two coordinates (the column and the row)\n>             //When users shoot an enemy, clear the ship in that cell\n>             //When all enemies are gone, make the \"game\" end.\n>             // Bonus:\n>             // If user picks a cell next to a ship, say \"close!\"\n> \n>         }\n>     }\n> }\n> ```\n\nTeam 1! (Spenser, Jessica, and James) I think the following code will check nearby the guess and tell you if it was close. I also put a bunch of comments in, I'm curious if I explained it well enough. I haven't actually run it so we can try tomorrow.\n```\n            // Create a variable and set it to false\n            // Check a direction and set a variable to true if there's a boat\n            // Substeps of the above:\n            // Check if the guess is on the top row\n            //// Check for boats above the guess, if the guess isn't on the top row\n            // Check if the guess is on the bottom row\n            //// Check for boats below the guess, if the guess isn't on the bottom row\n            // Check if the guess is on the right most column\n            //// Check for boats to the right of the guess, if the guess isn't on the right most column\n            // Check if the guess is on the left most column\n            //// Check for boats to the left of the guess, if the guess isn't on the left most column\n            \n            // If variable is true, say it's close, otherwise do nothing\n\n            bool IsClose = false; //As long as this stays false, there's no boats near where the user guessed.\n\n            //Checking above the user guess\n            if(userrowguess != 0) //This is statement is false if the guess is on the top already. (In grid[0,any number].)\n            {\n                if (grid[userrowguess + 1, usercolumnguess] == 1) // This is the same column guessed but one row up, which it only checks for if it's not in the top row.\n                {\n                    IsClose = true; // If there's a boat right above the guess, this variable goes from false to true\n                }\n            }\n\n            //Checking below\n            if (userrowguess != 7)\n            {\n                if (grid[userrowguess - 1, usercolumnguess] == 1) // Same column, one row down\n                {\n                    IsClose = true;\n                }\n            }\n\n            //Checking left\n            if (usercolumnguess != 0) \n            {\n                if (grid [userrowguess, usercolumnguess -1] == 1) // Same row, one column to the left\n                {\n                    IsClose = true;\n                }\n            }\n\n            //Checking right\n            if (usercolumnguess != 7)\n            {\n                if (grid [userrowguess, usercolumnguess + 1] == 1) // Same row, one column to the right\n                {\n                    IsClose = true;\n                }\n            }\n\n            if (IsClose) // When it checked the boxes nearby and found a boat, it would change IsClose to true, so if it's true that means it found a boat. Otherwise it skips the stuff inside this if statement.\n            {\n                Console.WriteLine(\"Close\");\n            }\n```\n",
            "mimetype": "text/plain"
          },
          {
            "body": "<mx-reply><blockquote><a href=\"https://matrix.to/#/!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com/$1649363782157OkrRB:matrix.workhardpgh.com?via=matrix.workhardpgh.com\">In reply to</a> <a href=\"https://matrix.to/#/@yockeyjessica:matrix.workhardpgh.com\">@yockeyjessica:matrix.workhardpgh.com</a><br><pre><code>\nusing System;\n\nnamespace Session14Battleship\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Create a grid(an array with two dimensions) that is 8 by 8.\n\n            int[,] grid = new int[8, 8];\n            grid[2, 2] = 1;\n            grid[4, 4] = 1;\n\n            int[,] displaygrid = new int[8, 8];\n\n            bool ships = true;\n            Console.WriteLine(\"1 is miss, 2 is hit\");\n\n            while (ships == true)\n            {\n                for (int row = 0; row &lt; 8; row++)\n                {\n                    for (int column = 0; column &lt; 8; column++)\n                    {\n                        Console.Write(displaygrid[row, column]);\n                    }\n                    Console.WriteLine();\n\n                }\n\n                Console.WriteLine(\"Please select a row.\");\n                int userrowguess = Convert.ToInt32(Console.ReadLine());\n                Console.WriteLine(\"Please select a column.\");\n                int usercolumnguess = Convert.ToInt32(Console.ReadLine());\n                Console.WriteLine(userrowguess + \",\" + usercolumnguess);\n\n                if (grid[userrowguess, usercolumnguess] != 0)\n                {\n                    Console.WriteLine(\"Hit!\");\n                    grid[userrowguess, usercolumnguess] = 0;\n                    displaygrid[userrowguess, usercolumnguess] = 2;\n\n                }\n                else\n                {\n                    Console.WriteLine(\"Miss!\");\n                    displaygrid[userrowguess, usercolumnguess] = 1;\n                    if (grid[userrowguess + 1, usercolumnguess] == 1 || grid[userrowguess - 1, usercolumnguess] == 1 || grid[userrowguess, usercolumnguess + 1] == 1 || grid[userrowguess, usercolumnguess - 1] == 1)\n                    {\n                        Console.WriteLine(\"Close!\");\n                    }\n\n                }\n\n                int aretherethings = 0;\n\n                for (int row = 0; row &lt; 8; row++)\n                {\n                    for (int column = 0; column &lt; 8; column++)\n                    {\n                        if (grid[row, column] != 0)\n                        {\n                            aretherethings++;\n\n                        }\n                    }\n\n                }\n\n                if (aretherethings == 0)\n                {\n                    ships = false;\n                    Console.WriteLine(\"GAME OVER!\");\n                }\n            }\n            //This grid will hold whether there is a ship in a given square or not.You can use a bool or an int for this.You will need to be able to display this grid, with\n            //00000000\n            //0000*000\n            //00**0000\n            //00000000\n            //000**000\n            //*0*00000\n            //00000**0\n            //00****00\n\n            //Let the user try to \"shoot\" a ship by selecting two coordinates (the column and the row)\n            //When users shoot an enemy, clear the ship in that cell\n            //When all enemies are gone, make the \"game\" end.\n            // Bonus:\n            // If user picks a cell next to a ship, say \"close!\"\n\n        }\n    }\n}\n</code></pre></blockquote></mx-reply><p>Team 1! (Spenser, Jessica, and James) I think the following code will check nearby the guess and tell you if it was close. I also put a bunch of comments in, I'm curious if I explained it well enough. I haven't actually run it so we can try tomorrow.</p>\n<pre><code>            // Create a variable and set it to false\n            // Check a direction and set a variable to true if there's a boat\n            // Substeps of the above:\n            // Check if the guess is on the top row\n            //// Check for boats above the guess, if the guess isn't on the top row\n            // Check if the guess is on the bottom row\n            //// Check for boats below the guess, if the guess isn't on the bottom row\n            // Check if the guess is on the right most column\n            //// Check for boats to the right of the guess, if the guess isn't on the right most column\n            // Check if the guess is on the left most column\n            //// Check for boats to the left of the guess, if the guess isn't on the left most column\n            \n            // If variable is true, say it's close, otherwise do nothing\n\n            bool IsClose = false; //As long as this stays false, there's no boats near where the user guessed.\n\n            //Checking above the user guess\n            if(userrowguess != 0) //This is statement is false if the guess is on the top already. (In grid[0,any number].)\n            {\n                if (grid[userrowguess + 1, usercolumnguess] == 1) // This is the same column guessed but one row up, which it only checks for if it's not in the top row.\n                {\n                    IsClose = true; // If there's a boat right above the guess, this variable goes from false to true\n                }\n            }\n\n            //Checking below\n            if (userrowguess != 7)\n            {\n                if (grid[userrowguess - 1, usercolumnguess] == 1) // Same column, one row down\n                {\n                    IsClose = true;\n                }\n            }\n\n            //Checking left\n            if (usercolumnguess != 0) \n            {\n                if (grid [userrowguess, usercolumnguess -1] == 1) // Same row, one column to the left\n                {\n                    IsClose = true;\n                }\n            }\n\n            //Checking right\n            if (usercolumnguess != 7)\n            {\n                if (grid [userrowguess, usercolumnguess + 1] == 1) // Same row, one column to the right\n                {\n                    IsClose = true;\n                }\n            }\n\n            if (IsClose) // When it checked the boxes nearby and found a boat, it would change IsClose to true, so if it's true that means it found a boat. Otherwise it skips the stuff inside this if statement.\n            {\n                Console.WriteLine(&quot;Close&quot;);\n            }\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "> <@yockeyjessica:matrix.workhardpgh.com> ```\n> \n> using System;\n> \n> namespace Session14Battleship\n> {\n>     class Program\n>     {\n>         static void Main(string[] args)\n>         {\n>             //Create a grid(an array with two dimensions) that is 8 by 8.\n> \n>             int[,] grid = new int[8, 8];\n>             grid[2, 2] = 1;\n>             grid[4, 4] = 1;\n> \n>             int[,] displaygrid = new int[8, 8];\n> \n>             bool ships = true;\n>             Console.WriteLine(\"1 is miss, 2 is hit\");\n> \n>             while (ships == true)\n>             {\n>                 for (int row = 0; row < 8; row++)\n>                 {\n>                     for (int column = 0; column < 8; column++)\n>                     {\n>                         Console.Write(displaygrid[row, column]);\n>                     }\n>                     Console.WriteLine();\n> \n>                 }\n> \n>                 Console.WriteLine(\"Please select a row.\");\n>                 int userrowguess = Convert.ToInt32(Console.ReadLine());\n>                 Console.WriteLine(\"Please select a column.\");\n>                 int usercolumnguess = Convert.ToInt32(Console.ReadLine());\n>                 Console.WriteLine(userrowguess + \",\" + usercolumnguess);\n> \n>                 if (grid[userrowguess, usercolumnguess] != 0)\n>                 {\n>                     Console.WriteLine(\"Hit!\");\n>                     grid[userrowguess, usercolumnguess] = 0;\n>                     displaygrid[userrowguess, usercolumnguess] = 2;\n> \n>                 }\n>                 else\n>                 {\n>                     Console.WriteLine(\"Miss!\");\n>                     displaygrid[userrowguess, usercolumnguess] = 1;\n>                     if (grid[userrowguess + 1, usercolumnguess] == 1 || grid[userrowguess - 1, usercolumnguess] == 1 || grid[userrowguess, usercolumnguess + 1] == 1 || grid[userrowguess, usercolumnguess - 1] == 1)\n>                     {\n>                         Console.WriteLine(\"Close!\");\n>                     }\n> \n>                 }\n> \n>                 int aretherethings = 0;\n> \n>                 for (int row = 0; row < 8; row++)\n>                 {\n>                     for (int column = 0; column < 8; column++)\n>                     {\n>                         if (grid[row, column] != 0)\n>                         {\n>                             aretherethings++;\n> \n>                         }\n>                     }\n> \n>                 }\n> \n>                 if (aretherethings == 0)\n>                 {\n>                     ships = false;\n>                     Console.WriteLine(\"GAME OVER!\");\n>                 }\n>             }\n>             //This grid will hold whether there is a ship in a given square or not.You can use a bool or an int for this.You will need to be able to display this grid, with\n>             //00000000\n>             //0000*000\n>             //00**0000\n>             //00000000\n>             //000**000\n>             //*0*00000\n>             //00000**0\n>             //00****00\n> \n>             //Let the user try to \"shoot\" a ship by selecting two coordinates (the column and the row)\n>             //When users shoot an enemy, clear the ship in that cell\n>             //When all enemies are gone, make the \"game\" end.\n>             // Bonus:\n>             // If user picks a cell next to a ship, say \"close!\"\n> \n>         }\n>     }\n> }\n> ```\n\nTeam 1! (Spenser, Jessica, and James) I think the following code will check nearby the guess and tell you if it was close. I also put a bunch of comments in, I'm curious if I explained it well enough. I haven't actually run it so we can try tomorrow.\n```\n            // Create a variable and set it to false\n            // Check a direction and set a variable to true if there's a boat\n            // Substeps of the above:\n            // Check if the guess is on the top row\n            //// Check for boats above the guess, if the guess isn't on the top row\n            // Check if the guess is on the bottom row\n            //// Check for boats below the guess, if the guess isn't on the bottom row\n            // Check if the guess is on the right most column\n            //// Check for boats to the right of the guess, if the guess isn't on the right most column\n            // Check if the guess is on the left most column\n            //// Check for boats to the left of the guess, if the guess isn't on the left most column\n            \n            // If variable is true, say it's close, otherwise do nothing\n\n            bool IsClose = false; //As long as this stays false, there's no boats near where the user guessed.\n\n            //Checking above the user guess\n            if(userrowguess != 0) //This is statement is false if the guess is on the top already. (In grid[0,any number].)\n            {\n                if (grid[userrowguess + 1, usercolumnguess] == 1) // This is the same column guessed but one row up, which it only checks for if it's not in the top row.\n                {\n                    IsClose = true; // If there's a boat right above the guess, this variable goes from false to true\n                }\n            }\n\n            //Checking below\n            if (userrowguess != 7)\n            {\n                if (grid[userrowguess - 1, usercolumnguess] == 1) // Same column, one row down\n                {\n                    IsClose = true;\n                }\n            }\n\n            //Checking left\n            if (usercolumnguess != 0) \n            {\n                if (grid [userrowguess, usercolumnguess -1] == 1) // Same row, one column to the left\n                {\n                    IsClose = true;\n                }\n            }\n\n            //Checking right\n            if (usercolumnguess != 7)\n            {\n                if (grid [userrowguess, usercolumnguess + 1] == 1) // Same row, one column to the right\n                {\n                    IsClose = true;\n                }\n            }\n\n            if (IsClose) // When it checked the boxes nearby and found a boat, it would change IsClose to true, so if it's true that means it found a boat. Otherwise it skips the stuff inside this if statement.\n            {\n                Console.WriteLine(\"Close\");\n            }\n```\n",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<mx-reply><blockquote><a href=\"https://matrix.to/#/!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com/$1649363782157OkrRB:matrix.workhardpgh.com?via=matrix.workhardpgh.com\">In reply to</a> <a href=\"https://matrix.to/#/@yockeyjessica:matrix.workhardpgh.com\">@yockeyjessica:matrix.workhardpgh.com</a><br><pre><code>\nusing System;\n\nnamespace Session14Battleship\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Create a grid(an array with two dimensions) that is 8 by 8.\n\n            int[,] grid = new int[8, 8];\n            grid[2, 2] = 1;\n            grid[4, 4] = 1;\n\n            int[,] displaygrid = new int[8, 8];\n\n            bool ships = true;\n            Console.WriteLine(\"1 is miss, 2 is hit\");\n\n            while (ships == true)\n            {\n                for (int row = 0; row &lt; 8; row++)\n                {\n                    for (int column = 0; column &lt; 8; column++)\n                    {\n                        Console.Write(displaygrid[row, column]);\n                    }\n                    Console.WriteLine();\n\n                }\n\n                Console.WriteLine(\"Please select a row.\");\n                int userrowguess = Convert.ToInt32(Console.ReadLine());\n                Console.WriteLine(\"Please select a column.\");\n                int usercolumnguess = Convert.ToInt32(Console.ReadLine());\n                Console.WriteLine(userrowguess + \",\" + usercolumnguess);\n\n                if (grid[userrowguess, usercolumnguess] != 0)\n                {\n                    Console.WriteLine(\"Hit!\");\n                    grid[userrowguess, usercolumnguess] = 0;\n                    displaygrid[userrowguess, usercolumnguess] = 2;\n\n                }\n                else\n                {\n                    Console.WriteLine(\"Miss!\");\n                    displaygrid[userrowguess, usercolumnguess] = 1;\n                    if (grid[userrowguess + 1, usercolumnguess] == 1 || grid[userrowguess - 1, usercolumnguess] == 1 || grid[userrowguess, usercolumnguess + 1] == 1 || grid[userrowguess, usercolumnguess - 1] == 1)\n                    {\n                        Console.WriteLine(\"Close!\");\n                    }\n\n                }\n\n                int aretherethings = 0;\n\n                for (int row = 0; row &lt; 8; row++)\n                {\n                    for (int column = 0; column &lt; 8; column++)\n                    {\n                        if (grid[row, column] != 0)\n                        {\n                            aretherethings++;\n\n                        }\n                    }\n\n                }\n\n                if (aretherethings == 0)\n                {\n                    ships = false;\n                    Console.WriteLine(\"GAME OVER!\");\n                }\n            }\n            //This grid will hold whether there is a ship in a given square or not.You can use a bool or an int for this.You will need to be able to display this grid, with\n            //00000000\n            //0000*000\n            //00**0000\n            //00000000\n            //000**000\n            //*0*00000\n            //00000**0\n            //00****00\n\n            //Let the user try to \"shoot\" a ship by selecting two coordinates (the column and the row)\n            //When users shoot an enemy, clear the ship in that cell\n            //When all enemies are gone, make the \"game\" end.\n            // Bonus:\n            // If user picks a cell next to a ship, say \"close!\"\n\n        }\n    }\n}\n</code></pre></blockquote></mx-reply><p>Team 1! (Spenser, Jessica, and James) I think the following code will check nearby the guess and tell you if it was close. I also put a bunch of comments in, I'm curious if I explained it well enough. I haven't actually run it so we can try tomorrow.</p>\n<pre><code>            // Create a variable and set it to false\n            // Check a direction and set a variable to true if there's a boat\n            // Substeps of the above:\n            // Check if the guess is on the top row\n            //// Check for boats above the guess, if the guess isn't on the top row\n            // Check if the guess is on the bottom row\n            //// Check for boats below the guess, if the guess isn't on the bottom row\n            // Check if the guess is on the right most column\n            //// Check for boats to the right of the guess, if the guess isn't on the right most column\n            // Check if the guess is on the left most column\n            //// Check for boats to the left of the guess, if the guess isn't on the left most column\n            \n            // If variable is true, say it's close, otherwise do nothing\n\n            bool IsClose = false; //As long as this stays false, there's no boats near where the user guessed.\n\n            //Checking above the user guess\n            if(userrowguess != 0) //This is statement is false if the guess is on the top already. (In grid[0,any number].)\n            {\n                if (grid[userrowguess + 1, usercolumnguess] == 1) // This is the same column guessed but one row up, which it only checks for if it's not in the top row.\n                {\n                    IsClose = true; // If there's a boat right above the guess, this variable goes from false to true\n                }\n            }\n\n            //Checking below\n            if (userrowguess != 7)\n            {\n                if (grid[userrowguess - 1, usercolumnguess] == 1) // Same column, one row down\n                {\n                    IsClose = true;\n                }\n            }\n\n            //Checking left\n            if (usercolumnguess != 0) \n            {\n                if (grid [userrowguess, usercolumnguess -1] == 1) // Same row, one column to the left\n                {\n                    IsClose = true;\n                }\n            }\n\n            //Checking right\n            if (usercolumnguess != 7)\n            {\n                if (grid [userrowguess, usercolumnguess + 1] == 1) // Same row, one column to the right\n                {\n                    IsClose = true;\n                }\n            }\n\n            if (IsClose) // When it checked the boxes nearby and found a boat, it would change IsClose to true, so if it's true that means it found a boat. Otherwise it skips the stuff inside this if statement.\n            {\n                Console.WriteLine(&quot;Close&quot;);\n            }\n</code></pre>\n",
        "m.relates_to": {
          "m.in_reply_to": {
            "event_id": "$1649363782157OkrRB:matrix.workhardpgh.com"
          }
        }
      },
      "event_id": "$1649374383162UYGPU:matrix.workhardpgh.com",
      "origin_server_ts": 1649374383243,
      "unsigned": {
        "age": 841345841
      },
      "user_id": "@andrew:matrix.workhardpgh.com",
      "age": 841183431
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@scottb:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "This is a great example of using comments to explain what you are trying to do.  Six months from now if you look at this code again you aren’t going to remember what you were thinking today as you wrote it.  Having the code commented like this makes it a lot easier"
      },
      "event_id": "$1649374674163DHGRx:matrix.workhardpgh.com",
      "origin_server_ts": 1649374674501,
      "unsigned": {
        "age": 841054583,
        "m.relations": {
          "m.replace": {
            "event_id": "$1649374749164OTXyr:matrix.workhardpgh.com",
            "origin_server_ts": 1649374749355,
            "sender": "@scottb:matrix.workhardpgh.com"
          }
        }
      },
      "user_id": "@scottb:matrix.workhardpgh.com",
      "age": 840892173
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@andrew:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "> <@andrew:matrix.workhardpgh.com> Team 1! (Spenser, Jessica, and James) I think the following code will check nearby the guess and tell you if it was close. I also put a bunch of comments in, I'm curious if I explained it well enough. I haven't actually run it so we can try tomorrow.\n> ```\n>             // Create a variable and set it to false\n>             // Check a direction and set a variable to true if there's a boat\n>             // Substeps of the above:\n>             // Check if the guess is on the top row\n>             //// Check for boats above the guess, if the guess isn't on the top row\n>             // Check if the guess is on the bottom row\n>             //// Check for boats below the guess, if the guess isn't on the bottom row\n>             // Check if the guess is on the right most column\n>             //// Check for boats to the right of the guess, if the guess isn't on the right most column\n>             // Check if the guess is on the left most column\n>             //// Check for boats to the left of the guess, if the guess isn't on the left most column\n>             \n>             // If variable is true, say it's close, otherwise do nothing\n> \n>             bool IsClose = false; //As long as this stays false, there's no boats near where the user guessed.\n> \n>             //Checking above the user guess\n>             if(userrowguess != 0) //This is statement is false if the guess is on the top already. (In grid[0,any number].)\n>             {\n>                 if (grid[userrowguess + 1, usercolumnguess] == 1) // This is the same column guessed but one row up, which it only checks for if it's not in the top row.\n>                 {\n>                     IsClose = true; // If there's a boat right above the guess, this variable goes from false to true\n>                 }\n>             }\n> \n>             //Checking below\n>             if (userrowguess != 7)\n>             {\n>                 if (grid[userrowguess - 1, usercolumnguess] == 1) // Same column, one row down\n>                 {\n>                     IsClose = true;\n>                 }\n>             }\n> \n>             //Checking left\n>             if (usercolumnguess != 0) \n>             {\n>                 if (grid [userrowguess, usercolumnguess -1] == 1) // Same row, one column to the left\n>                 {\n>                     IsClose = true;\n>                 }\n>             }\n> \n>             //Checking right\n>             if (usercolumnguess != 7)\n>             {\n>                 if (grid [userrowguess, usercolumnguess + 1] == 1) // Same row, one column to the right\n>                 {\n>                     IsClose = true;\n>                 }\n>             }\n> \n>             if (IsClose) // When it checked the boxes nearby and found a boat, it would change IsClose to true, so if it's true that means it found a boat. Otherwise it skips the stuff inside this if statement.\n>             {\n>                 Console.WriteLine(\"Close\");\n>             }\n> ```\n\nI think I got my \"above\" and \"below\" mixed up because the \"top\" is 0 (So we'll need to change a + and -), but the rest should hold true.",
            "mimetype": "text/plain"
          },
          {
            "body": "<mx-reply><blockquote><a href=\"https://matrix.to/#/!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com/$1649374383162UYGPU:matrix.workhardpgh.com?via=matrix.workhardpgh.com\">In reply to</a> <a href=\"https://matrix.to/#/@andrew:matrix.workhardpgh.com\">@andrew:matrix.workhardpgh.com</a><br><p>Team 1! (Spenser, Jessica, and James) I think the following code will check nearby the guess and tell you if it was close. I also put a bunch of comments in, I'm curious if I explained it well enough. I haven't actually run it so we can try tomorrow.</p>\n<pre><code>            // Create a variable and set it to false\n            // Check a direction and set a variable to true if there's a boat\n            // Substeps of the above:\n            // Check if the guess is on the top row\n            //// Check for boats above the guess, if the guess isn't on the top row\n            // Check if the guess is on the bottom row\n            //// Check for boats below the guess, if the guess isn't on the bottom row\n            // Check if the guess is on the right most column\n            //// Check for boats to the right of the guess, if the guess isn't on the right most column\n            // Check if the guess is on the left most column\n            //// Check for boats to the left of the guess, if the guess isn't on the left most column\n            \n            // If variable is true, say it's close, otherwise do nothing\n\n            bool IsClose = false; //As long as this stays false, there's no boats near where the user guessed.\n\n            //Checking above the user guess\n            if(userrowguess != 0) //This is statement is false if the guess is on the top already. (In grid[0,any number].)\n            {\n                if (grid[userrowguess + 1, usercolumnguess] == 1) // This is the same column guessed but one row up, which it only checks for if it's not in the top row.\n                {\n                    IsClose = true; // If there's a boat right above the guess, this variable goes from false to true\n                }\n            }\n\n            //Checking below\n            if (userrowguess != 7)\n            {\n                if (grid[userrowguess - 1, usercolumnguess] == 1) // Same column, one row down\n                {\n                    IsClose = true;\n                }\n            }\n\n            //Checking left\n            if (usercolumnguess != 0) \n            {\n                if (grid [userrowguess, usercolumnguess -1] == 1) // Same row, one column to the left\n                {\n                    IsClose = true;\n                }\n            }\n\n            //Checking right\n            if (usercolumnguess != 7)\n            {\n                if (grid [userrowguess, usercolumnguess + 1] == 1) // Same row, one column to the right\n                {\n                    IsClose = true;\n                }\n            }\n\n            if (IsClose) // When it checked the boxes nearby and found a boat, it would change IsClose to true, so if it's true that means it found a boat. Otherwise it skips the stuff inside this if statement.\n            {\n                Console.WriteLine(\"Close\");\n            }\n</code></pre>\n</blockquote></mx-reply>I think I got my &quot;above&quot; and &quot;below&quot; mixed up because the &quot;top&quot; is 0 (So we'll need to change a + and -), but the rest should hold true.",
            "mimetype": "text/html"
          }
        ],
        "body": "> <@andrew:matrix.workhardpgh.com> Team 1! (Spenser, Jessica, and James) I think the following code will check nearby the guess and tell you if it was close. I also put a bunch of comments in, I'm curious if I explained it well enough. I haven't actually run it so we can try tomorrow.\n> ```\n>             // Create a variable and set it to false\n>             // Check a direction and set a variable to true if there's a boat\n>             // Substeps of the above:\n>             // Check if the guess is on the top row\n>             //// Check for boats above the guess, if the guess isn't on the top row\n>             // Check if the guess is on the bottom row\n>             //// Check for boats below the guess, if the guess isn't on the bottom row\n>             // Check if the guess is on the right most column\n>             //// Check for boats to the right of the guess, if the guess isn't on the right most column\n>             // Check if the guess is on the left most column\n>             //// Check for boats to the left of the guess, if the guess isn't on the left most column\n>             \n>             // If variable is true, say it's close, otherwise do nothing\n> \n>             bool IsClose = false; //As long as this stays false, there's no boats near where the user guessed.\n> \n>             //Checking above the user guess\n>             if(userrowguess != 0) //This is statement is false if the guess is on the top already. (In grid[0,any number].)\n>             {\n>                 if (grid[userrowguess + 1, usercolumnguess] == 1) // This is the same column guessed but one row up, which it only checks for if it's not in the top row.\n>                 {\n>                     IsClose = true; // If there's a boat right above the guess, this variable goes from false to true\n>                 }\n>             }\n> \n>             //Checking below\n>             if (userrowguess != 7)\n>             {\n>                 if (grid[userrowguess - 1, usercolumnguess] == 1) // Same column, one row down\n>                 {\n>                     IsClose = true;\n>                 }\n>             }\n> \n>             //Checking left\n>             if (usercolumnguess != 0) \n>             {\n>                 if (grid [userrowguess, usercolumnguess -1] == 1) // Same row, one column to the left\n>                 {\n>                     IsClose = true;\n>                 }\n>             }\n> \n>             //Checking right\n>             if (usercolumnguess != 7)\n>             {\n>                 if (grid [userrowguess, usercolumnguess + 1] == 1) // Same row, one column to the right\n>                 {\n>                     IsClose = true;\n>                 }\n>             }\n> \n>             if (IsClose) // When it checked the boxes nearby and found a boat, it would change IsClose to true, so if it's true that means it found a boat. Otherwise it skips the stuff inside this if statement.\n>             {\n>                 Console.WriteLine(\"Close\");\n>             }\n> ```\n\nI think I got my \"above\" and \"below\" mixed up because the \"top\" is 0 (So we'll need to change a + and -), but the rest should hold true.",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<mx-reply><blockquote><a href=\"https://matrix.to/#/!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com/$1649374383162UYGPU:matrix.workhardpgh.com?via=matrix.workhardpgh.com\">In reply to</a> <a href=\"https://matrix.to/#/@andrew:matrix.workhardpgh.com\">@andrew:matrix.workhardpgh.com</a><br><p>Team 1! (Spenser, Jessica, and James) I think the following code will check nearby the guess and tell you if it was close. I also put a bunch of comments in, I'm curious if I explained it well enough. I haven't actually run it so we can try tomorrow.</p>\n<pre><code>            // Create a variable and set it to false\n            // Check a direction and set a variable to true if there's a boat\n            // Substeps of the above:\n            // Check if the guess is on the top row\n            //// Check for boats above the guess, if the guess isn't on the top row\n            // Check if the guess is on the bottom row\n            //// Check for boats below the guess, if the guess isn't on the bottom row\n            // Check if the guess is on the right most column\n            //// Check for boats to the right of the guess, if the guess isn't on the right most column\n            // Check if the guess is on the left most column\n            //// Check for boats to the left of the guess, if the guess isn't on the left most column\n            \n            // If variable is true, say it's close, otherwise do nothing\n\n            bool IsClose = false; //As long as this stays false, there's no boats near where the user guessed.\n\n            //Checking above the user guess\n            if(userrowguess != 0) //This is statement is false if the guess is on the top already. (In grid[0,any number].)\n            {\n                if (grid[userrowguess + 1, usercolumnguess] == 1) // This is the same column guessed but one row up, which it only checks for if it's not in the top row.\n                {\n                    IsClose = true; // If there's a boat right above the guess, this variable goes from false to true\n                }\n            }\n\n            //Checking below\n            if (userrowguess != 7)\n            {\n                if (grid[userrowguess - 1, usercolumnguess] == 1) // Same column, one row down\n                {\n                    IsClose = true;\n                }\n            }\n\n            //Checking left\n            if (usercolumnguess != 0) \n            {\n                if (grid [userrowguess, usercolumnguess -1] == 1) // Same row, one column to the left\n                {\n                    IsClose = true;\n                }\n            }\n\n            //Checking right\n            if (usercolumnguess != 7)\n            {\n                if (grid [userrowguess, usercolumnguess + 1] == 1) // Same row, one column to the right\n                {\n                    IsClose = true;\n                }\n            }\n\n            if (IsClose) // When it checked the boxes nearby and found a boat, it would change IsClose to true, so if it's true that means it found a boat. Otherwise it skips the stuff inside this if statement.\n            {\n                Console.WriteLine(\"Close\");\n            }\n</code></pre>\n</blockquote></mx-reply>I think I got my &quot;above&quot; and &quot;below&quot; mixed up because the &quot;top&quot; is 0 (So we'll need to change a + and -), but the rest should hold true.",
        "m.relates_to": {
          "m.in_reply_to": {
            "event_id": "$1649374383162UYGPU:matrix.workhardpgh.com"
          }
        }
      },
      "event_id": "$1649374810165kKQDn:matrix.workhardpgh.com",
      "origin_server_ts": 1649374810405,
      "unsigned": {
        "age": 840918679
      },
      "user_id": "@andrew:matrix.workhardpgh.com",
      "age": 840756269
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@spensermg:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "> <@andrew:matrix.workhardpgh.com> I think I got my \"above\" and \"below\" mixed up because the \"top\" is 0 (So we'll need to change a + and -), but the rest should hold true.\n\nit just struck me looking back through this:",
            "mimetype": "text/plain"
          },
          {
            "body": "<mx-reply><blockquote><a href=\"https://matrix.to/#/!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com/$1649374810165kKQDn:matrix.workhardpgh.com?via=matrix.workhardpgh.com\">In reply to</a> <a href=\"https://matrix.to/#/@andrew:matrix.workhardpgh.com\">@andrew:matrix.workhardpgh.com</a><br>I think I got my \"above\" and \"below\" mixed up because the \"top\" is 0 (So we'll need to change a + and -), but the rest should hold true.</blockquote></mx-reply>it just struck me looking back through this:",
            "mimetype": "text/html"
          }
        ],
        "body": "> <@andrew:matrix.workhardpgh.com> I think I got my \"above\" and \"below\" mixed up because the \"top\" is 0 (So we'll need to change a + and -), but the rest should hold true.\n\nit just struck me looking back through this:",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<mx-reply><blockquote><a href=\"https://matrix.to/#/!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com/$1649374810165kKQDn:matrix.workhardpgh.com?via=matrix.workhardpgh.com\">In reply to</a> <a href=\"https://matrix.to/#/@andrew:matrix.workhardpgh.com\">@andrew:matrix.workhardpgh.com</a><br>I think I got my \"above\" and \"below\" mixed up because the \"top\" is 0 (So we'll need to change a + and -), but the rest should hold true.</blockquote></mx-reply>it just struck me looking back through this:",
        "m.relates_to": {
          "m.in_reply_to": {
            "event_id": "$1649374810165kKQDn:matrix.workhardpgh.com"
          }
        }
      },
      "event_id": "$1649374881166kJzDX:matrix.workhardpgh.com",
      "origin_server_ts": 1649374881312,
      "unsigned": {
        "age": 840847772
      },
      "user_id": "@spensermg:matrix.workhardpgh.com",
      "age": 840685362
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@spensermg:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.text": "woops, more to come, hit only enter",
        "body": "woops, more to come, hit only enter",
        "msgtype": "m.text"
      },
      "event_id": "$1649374890167jDSUq:matrix.workhardpgh.com",
      "origin_server_ts": 1649374890348,
      "unsigned": {
        "age": 840838736
      },
      "user_id": "@spensermg:matrix.workhardpgh.com",
      "age": 840676326
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@spensermg:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.text": "we'll need to have our invisible grid larger than our display because users are going to select 1-8, rather than 0-7, unless we ask them to. so we could set 10,10 for invisible and 8,8 for display, and then with what you have could take care of what we were working on",
        "body": "we'll need to have our invisible grid larger than our display because users are going to select 1-8, rather than 0-7, unless we ask them to. so we could set 10,10 for invisible and 8,8 for display, and then with what you have could take care of what we were working on",
        "msgtype": "m.text"
      },
      "event_id": "$1649375018168fdJfu:matrix.workhardpgh.com",
      "origin_server_ts": 1649375018207,
      "unsigned": {
        "age": 840710877
      },
      "user_id": "@spensermg:matrix.workhardpgh.com",
      "age": 840548467
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@andrew:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "> <@spensermg:matrix.workhardpgh.com> we'll need to have our invisible grid larger than our display because users are going to select 1-8, rather than 0-7, unless we ask them to. so we could set 10,10 for invisible and 8,8 for display, and then with what you have could take care of what we were working on\n\nWe could maybe subtract one from what the user puts in before we plug it into our grid.",
            "mimetype": "text/plain"
          },
          {
            "body": "<mx-reply><blockquote><a href=\"https://matrix.to/#/!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com/$1649375018168fdJfu:matrix.workhardpgh.com?via=matrix.workhardpgh.com\">In reply to</a> <a href=\"https://matrix.to/#/@spensermg:matrix.workhardpgh.com\">@spensermg:matrix.workhardpgh.com</a><br>we&#39;ll need to have our invisible grid larger than our display because users are going to select 1-8, rather than 0-7, unless we ask them to. so we could set 10,10 for invisible and 8,8 for display, and then with what you have could take care of what we were working on</blockquote></mx-reply>We could maybe subtract one from what the user puts in before we plug it into our grid.",
            "mimetype": "text/html"
          }
        ],
        "body": "> <@spensermg:matrix.workhardpgh.com> we'll need to have our invisible grid larger than our display because users are going to select 1-8, rather than 0-7, unless we ask them to. so we could set 10,10 for invisible and 8,8 for display, and then with what you have could take care of what we were working on\n\nWe could maybe subtract one from what the user puts in before we plug it into our grid.",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<mx-reply><blockquote><a href=\"https://matrix.to/#/!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com/$1649375018168fdJfu:matrix.workhardpgh.com?via=matrix.workhardpgh.com\">In reply to</a> <a href=\"https://matrix.to/#/@spensermg:matrix.workhardpgh.com\">@spensermg:matrix.workhardpgh.com</a><br>we&#39;ll need to have our invisible grid larger than our display because users are going to select 1-8, rather than 0-7, unless we ask them to. so we could set 10,10 for invisible and 8,8 for display, and then with what you have could take care of what we were working on</blockquote></mx-reply>We could maybe subtract one from what the user puts in before we plug it into our grid.",
        "m.relates_to": {
          "m.in_reply_to": {
            "event_id": "$1649375018168fdJfu:matrix.workhardpgh.com"
          }
        }
      },
      "event_id": "$1649375162170GDGoI:matrix.workhardpgh.com",
      "origin_server_ts": 1649375162930,
      "unsigned": {
        "age": 840566154,
        "m.relations": {
          "m.annotation": {
            "chunk": [
              {
                "type": "m.reaction",
                "key": "👀",
                "count": 1
              }
            ]
          }
        }
      },
      "user_id": "@andrew:matrix.workhardpgh.com",
      "age": 840403744
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@spensermg:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.text": "your code works👍️, can put it all together tomorrow",
        "body": "your code works👍️, can put it all together tomorrow",
        "msgtype": "m.text"
      },
      "event_id": "$1649375622171aHdLj:matrix.workhardpgh.com",
      "origin_server_ts": 1649375622803,
      "unsigned": {
        "age": 840106281
      },
      "user_id": "@spensermg:matrix.workhardpgh.com",
      "age": 839943871
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "version before break, battleship with Jean:\n```\nusing System;\n\nnamespace battleship14\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // ======== setup of the game!\n            // ~make a map - an array - 2-dimensional array\n            // ~put ships on the map - a \"ship\" is just one point\n\n            // ========= the game loop!\n            // ~show the user the map\n            // ask the user for coordinates - l-r & u-d\n            // see if the user hit a ship\n            // react to if they hit/missed\n            // clear the location of the ship\n            // check to see if they've hit all the ships\n            // ~go back to beginning of loop\n\n            // ========== game end\n            // ~you won, you hit all the ships!\n\n\n            // setup\n            Console.WriteLine(\"Welcome to BattleShip!\");\n            // set up the map\n            int[,] map = new int[3, 3];\n            // add a ship\n            map[1, 1] = 1;\n\n\n            // main loop\n            while (true)\n            {\n                // show the user the map\n                // hardcoded values?!?!??!?!?!?!\n                Console.WriteLine(\"  1 2 3 \");\n                // big loop - one time through is one row\n                for (int i = 0; i < 3; i++)\n                {\n                    Console.Write((i+1) + \" \");\n                    // little loop - one time through is one space\n                    for (int j = 0; j < 3; j++)\n                    {\n                        //check this location\n                        // if it's a 0, print ~\n                        // if it's a 1, print @ Δ\n\n                        if (map[i, j] == 0)\n                        {\n                            Console.Write(\"~ \");\n                        }\n                        else\n                        {\n                            Console.Write(\"@ \");\n                        }\n                    }\n                    Console.WriteLine();\n                }\n\n                // // ask the user for coordinates - l - r & u - d\n                // // ask for side number\n                // Console.WriteLine(\"Please give me a side number:\");\n                // string sideNumber = Console.ReadLine();\n\n                // // ask for top number\n                // Console.WriteLine(\"Please give me a top number:\");\n                // string topNumber = Console.ReadLine();\n\n                // ask the user for input to pause the program\n                Console.WriteLine(\"Where do you want to shooot??@!?!?!\");\n                Console.ReadLine();\n\n                // wipe the screen\n                Console.Clear();\n            }\n\n            // game end\n\n            Console.WriteLine(\"You are the winningest winner that has ever winned.\");\n        }\n    }\n}\n\n```",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>version before break, battleship with Jean:</p>\n<pre><code>using System;\n\nnamespace battleship14\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // ======== setup of the game!\n            // ~make a map - an array - 2-dimensional array\n            // ~put ships on the map - a &quot;ship&quot; is just one point\n\n            // ========= the game loop!\n            // ~show the user the map\n            // ask the user for coordinates - l-r &amp; u-d\n            // see if the user hit a ship\n            // react to if they hit/missed\n            // clear the location of the ship\n            // check to see if they've hit all the ships\n            // ~go back to beginning of loop\n\n            // ========== game end\n            // ~you won, you hit all the ships!\n\n\n            // setup\n            Console.WriteLine(&quot;Welcome to BattleShip!&quot;);\n            // set up the map\n            int[,] map = new int[3, 3];\n            // add a ship\n            map[1, 1] = 1;\n\n\n            // main loop\n            while (true)\n            {\n                // show the user the map\n                // hardcoded values?!?!??!?!?!?!\n                Console.WriteLine(&quot;  1 2 3 &quot;);\n                // big loop - one time through is one row\n                for (int i = 0; i &lt; 3; i++)\n                {\n                    Console.Write((i+1) + &quot; &quot;);\n                    // little loop - one time through is one space\n                    for (int j = 0; j &lt; 3; j++)\n                    {\n                        //check this location\n                        // if it's a 0, print ~\n                        // if it's a 1, print @ Δ\n\n                        if (map[i, j] == 0)\n                        {\n                            Console.Write(&quot;~ &quot;);\n                        }\n                        else\n                        {\n                            Console.Write(&quot;@ &quot;);\n                        }\n                    }\n                    Console.WriteLine();\n                }\n\n                // // ask the user for coordinates - l - r &amp; u - d\n                // // ask for side number\n                // Console.WriteLine(&quot;Please give me a side number:&quot;);\n                // string sideNumber = Console.ReadLine();\n\n                // // ask for top number\n                // Console.WriteLine(&quot;Please give me a top number:&quot;);\n                // string topNumber = Console.ReadLine();\n\n                // ask the user for input to pause the program\n                Console.WriteLine(&quot;Where do you want to shooot??@!?!?!&quot;);\n                Console.ReadLine();\n\n                // wipe the screen\n                Console.Clear();\n            }\n\n            // game end\n\n            Console.WriteLine(&quot;You are the winningest winner that has ever winned.&quot;);\n        }\n    }\n}\n\n</code></pre>\n"
      },
      "event_id": "$1649430415185PVQvl:matrix.workhardpgh.com",
      "origin_server_ts": 1649430415707,
      "unsigned": {
        "age": 785313377
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 785230014
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "battleship with Jean at end of class:\n```\nusing System;\n\nnamespace battleship14\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // ======== setup of the game!\n            // ~make a map - an array - 2-dimensional array\n            // ~put ships on the map - a \"ship\" is just one point\n\n            // ========= the game loop!\n            // ~show the user the map\n            // ~ask the user for coordinates - l-r & u-d\\\n            // ~show where the user hit\n            // ~see if the user hit a ship\n            // ~react to if they hit/missed\n            // ~clear the location of the ship\n            // see comments - check to see if they've hit all the ships\n            // ~go back to beginning of loop\n\n            // ========== game end\n            // ~you won, you hit all the ships!\n\n\n            // setup\n            Console.WriteLine(\"Welcome to BattleShip!\");\n            // set up the map\n            int[,] map = new int[3, 3];\n            // add a ship\n            map[1, 1] = 1;\n            // test hits and misses\n            // map[1,2] = 2;\n            // map[2,2] = 3;\n\n\n            // Jean's key:\n            // 0: unguessed water\n            // 1: unguessed ship\n            // 2: guessed water - miss\n            // 3: guessed ship - hit\n\n            // count the ships\n            // variable: shipsLeft\n\n            // main loop\n            // while (shipsLeft > 0)\n            while (true)\n            {\n                // show the user the map\\\n                // print a key\n                Console.WriteLine(\"~ is water, . is miss, # is hit\");\n                // hardcoded values?!?!??!?!?!?!\n                Console.WriteLine(\"  1 2 3 \");\n                // big loop - one time through is one row\n                for (int i = 0; i < 3; i++)\n                {\n                    Console.Write((i+1) + \" \");\n                    // little loop - one time through is one space\n                    for (int j = 0; j < 3; j++)\n                    {\n                        //check this location\n                        // if it's a 0, print ~\n                        // if it's a 1, print @\n                        // if it's a 2, print .\n                        // if it's a 3, print #\n\n                        if (map[i, j] == 0)\n                        {\n                            Console.Write(\"~ \");\n                        }\n                        else if(map[i, j] == 1)\n                        {\n                            Console.Write(\"~ \");\n                        }\n                        else if (map[i, j] == 2)\n                        {\n                            Console.Write(\". \");\n                        }\n                        else if (map[i, j] == 3)\n                        {\n                            Console.Write(\"# \");\n                        }\n                    }\n                    Console.WriteLine();\n                }\n\n                // ask the user for coordinates - l - r & u - d\n                // ask for side number\n                Console.WriteLine(\"Please give me a side number:\");\n                string sideNumber = Console.ReadLine();\n\n                // ask for top number\n                Console.WriteLine(\"Please give me a top number:\");\n                string topNumber = Console.ReadLine();\n\n                // change the data according to their guess -\n                // if they hit a ship, change it to a hit, tell them they hit\n                // if they hit a water, change it to a miss, tell them they missed\n\n                // print out what is in the grid at that location\n                // TODO: What if they gave us not a number???!!!\n                // TODO: what if they gave us something out of bounds?\n                int side = Convert.ToInt32(sideNumber) - 1;\n                int top =  Convert.ToInt32(topNumber) - 1;\n                int dataAtGuess = map[side, top];\n                Console.WriteLine(dataAtGuess);\n                Console.ReadLine();\n\n                if(dataAtGuess == 1) {\n                    map[side, top] = 3;\n                    Console.WriteLine(\"You hit one of my ships!\");\n                }\n                if(dataAtGuess == 0) {\n                    map[side, top] = 2;\n                    Console.WriteLine(\"You MISSED!!!!!\");\n                }\n\n                // Console.WriteLine(\"side is: \" + sideNumber + \", top is: \" + topNumber);\n                // Console.ReadLine();\n                // wipe the screen\n                Console.Clear();\n\n                // count the ships\n                // tell the user: \n                // you have ___ ships left to hit!\n                // update shipsLeft\n            }\n\n            // game end\n\n            Console.WriteLine(\"You are the winningest winner that has ever winned.\");\n        }\n    }\n}\n\n```",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>battleship with Jean at end of class:</p>\n<pre><code>using System;\n\nnamespace battleship14\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // ======== setup of the game!\n            // ~make a map - an array - 2-dimensional array\n            // ~put ships on the map - a &quot;ship&quot; is just one point\n\n            // ========= the game loop!\n            // ~show the user the map\n            // ~ask the user for coordinates - l-r &amp; u-d\\\n            // ~show where the user hit\n            // ~see if the user hit a ship\n            // ~react to if they hit/missed\n            // ~clear the location of the ship\n            // see comments - check to see if they've hit all the ships\n            // ~go back to beginning of loop\n\n            // ========== game end\n            // ~you won, you hit all the ships!\n\n\n            // setup\n            Console.WriteLine(&quot;Welcome to BattleShip!&quot;);\n            // set up the map\n            int[,] map = new int[3, 3];\n            // add a ship\n            map[1, 1] = 1;\n            // test hits and misses\n            // map[1,2] = 2;\n            // map[2,2] = 3;\n\n\n            // Jean's key:\n            // 0: unguessed water\n            // 1: unguessed ship\n            // 2: guessed water - miss\n            // 3: guessed ship - hit\n\n            // count the ships\n            // variable: shipsLeft\n\n            // main loop\n            // while (shipsLeft &gt; 0)\n            while (true)\n            {\n                // show the user the map\\\n                // print a key\n                Console.WriteLine(&quot;~ is water, . is miss, # is hit&quot;);\n                // hardcoded values?!?!??!?!?!?!\n                Console.WriteLine(&quot;  1 2 3 &quot;);\n                // big loop - one time through is one row\n                for (int i = 0; i &lt; 3; i++)\n                {\n                    Console.Write((i+1) + &quot; &quot;);\n                    // little loop - one time through is one space\n                    for (int j = 0; j &lt; 3; j++)\n                    {\n                        //check this location\n                        // if it's a 0, print ~\n                        // if it's a 1, print @\n                        // if it's a 2, print .\n                        // if it's a 3, print #\n\n                        if (map[i, j] == 0)\n                        {\n                            Console.Write(&quot;~ &quot;);\n                        }\n                        else if(map[i, j] == 1)\n                        {\n                            Console.Write(&quot;~ &quot;);\n                        }\n                        else if (map[i, j] == 2)\n                        {\n                            Console.Write(&quot;. &quot;);\n                        }\n                        else if (map[i, j] == 3)\n                        {\n                            Console.Write(&quot;# &quot;);\n                        }\n                    }\n                    Console.WriteLine();\n                }\n\n                // ask the user for coordinates - l - r &amp; u - d\n                // ask for side number\n                Console.WriteLine(&quot;Please give me a side number:&quot;);\n                string sideNumber = Console.ReadLine();\n\n                // ask for top number\n                Console.WriteLine(&quot;Please give me a top number:&quot;);\n                string topNumber = Console.ReadLine();\n\n                // change the data according to their guess -\n                // if they hit a ship, change it to a hit, tell them they hit\n                // if they hit a water, change it to a miss, tell them they missed\n\n                // print out what is in the grid at that location\n                // TODO: What if they gave us not a number???!!!\n                // TODO: what if they gave us something out of bounds?\n                int side = Convert.ToInt32(sideNumber) - 1;\n                int top =  Convert.ToInt32(topNumber) - 1;\n                int dataAtGuess = map[side, top];\n                Console.WriteLine(dataAtGuess);\n                Console.ReadLine();\n\n                if(dataAtGuess == 1) {\n                    map[side, top] = 3;\n                    Console.WriteLine(&quot;You hit one of my ships!&quot;);\n                }\n                if(dataAtGuess == 0) {\n                    map[side, top] = 2;\n                    Console.WriteLine(&quot;You MISSED!!!!!&quot;);\n                }\n\n                // Console.WriteLine(&quot;side is: &quot; + sideNumber + &quot;, top is: &quot; + topNumber);\n                // Console.ReadLine();\n                // wipe the screen\n                Console.Clear();\n\n                // count the ships\n                // tell the user: \n                // you have ___ ships left to hit!\n                // update shipsLeft\n            }\n\n            // game end\n\n            Console.WriteLine(&quot;You are the winningest winner that has ever winned.&quot;);\n        }\n    }\n}\n\n</code></pre>\n"
      },
      "event_id": "$1649433571188PhlgD:matrix.workhardpgh.com",
      "origin_server_ts": 1649433571275,
      "unsigned": {
        "age": 782157809
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 782074446
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "String Loop Stuff\n```\nstring name = \"John\";\n            char letter = 'z';\n\n            for (int i = 0; i < name.Length; i++)\n            {\n                Console.WriteLine(name[i]);\n            }\n\n            Console.WriteLine((char)123);\n\n            Console.ReadLine();",
            "mimetype": "text/plain"
          },
          {
            "body": "<p>String Loop Stuff</p>\n<pre><code>string name = &quot;John&quot;;\n            char letter = 'z';\n\n            for (int i = 0; i &lt; name.Length; i++)\n            {\n                Console.WriteLine(name[i]);\n            }\n\n            Console.WriteLine((char)123);\n\n            Console.ReadLine();\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "String Loop Stuff\n```\nstring name = \"John\";\n            char letter = 'z';\n\n            for (int i = 0; i < name.Length; i++)\n            {\n                Console.WriteLine(name[i]);\n            }\n\n            Console.WriteLine((char)123);\n\n            Console.ReadLine();",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>String Loop Stuff</p>\n<pre><code>string name = &quot;John&quot;;\n            char letter = 'z';\n\n            for (int i = 0; i &lt; name.Length; i++)\n            {\n                Console.WriteLine(name[i]);\n            }\n\n            Console.WriteLine((char)123);\n\n            Console.ReadLine();\n</code></pre>\n"
      },
      "event_id": "$1649687173221EagGG:matrix.workhardpgh.com",
      "origin_server_ts": 1649687173540,
      "unsigned": {
        "age": 528555544
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 528472181
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@jim_code:matrix.workhardpgh.com",
      "content": {},
      "event_id": "$1649688970224CqOGD:matrix.workhardpgh.com",
      "origin_server_ts": 1649688970616,
      "unsigned": {
        "redacted_by": "$1649688981225FcRnz:matrix.workhardpgh.com",
        "redacted_because": {
          "type": "m.room.redaction",
          "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
          "sender": "@jim_code:matrix.workhardpgh.com",
          "content": {},
          "redacts": "$1649688970224CqOGD:matrix.workhardpgh.com",
          "event_id": "$1649688981225FcRnz:matrix.workhardpgh.com",
          "origin_server_ts": 1649688981793,
          "unsigned": {
            "age": 526747291
          },
          "user_id": "@jim_code:matrix.workhardpgh.com",
          "age": 526747291
        },
        "age": 526758468
      },
      "user_id": "@jim_code:matrix.workhardpgh.com",
      "age": 526675105,
      "redacted_because": {
        "type": "m.room.redaction",
        "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
        "sender": "@jim_code:matrix.workhardpgh.com",
        "content": {},
        "redacts": "$1649688970224CqOGD:matrix.workhardpgh.com",
        "event_id": "$1649688981225FcRnz:matrix.workhardpgh.com",
        "origin_server_ts": 1649688981793,
        "unsigned": {
          "age": 526663928
        },
        "user_id": "@jim_code:matrix.workhardpgh.com",
        "age": 526663928
      }
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@jim_code:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "Tobias Tobak (he/him): Jessica Yockey jallison \n\n```csharp\nusing System;\n\nnamespace MorseCode01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n\n            //What is your message ?\n            //> hello\n            //    Your message in morse code is: .... . .-.. .-..---\n\n            Console.WriteLine(\"What is your message?\");\n            string input = Console.ReadLine().ToLower();\n\n            //Ask for user input\n            //Get the input\n            //Convert to morse code\n            //Return morse code conversion\n\n            //Build an index for morse code to English letters\n            //For loop for conversion\n            Console.WriteLine(\"Your message in Morse code is: \");\n            for (int i = 0; i < input.Length; i++)\n            {\n                string output = \"\";\n                switch (input[i])\n                {\n                    case 'a':\n                        output = \".-\";\n                        break;\n\n                    case 'b':\n                        output = \"-...\";\n                        break;\n\n                    case 'c':\n                        output = \"-.-.\";\n                        break;\n\n                    case 'd':\n                        output = \"-..\";\n                        break;\n\n                    case 'e':\n                        output = \".\";\n                        break;\n\n                    case 'f':\n                        output = \"..-.\";\n                        break;\n\n                    case 'g':\n                        output = \"--.\";\n                        break;\n\n                    case 'h':\n                        output = \"....\";\n                        break;\n\n                    case 'i':\n                        output = \"..\";\n                        break;\n\n                    case 'j':\n                        output = \".---\";\n                        break;\n\n                    case 'k':\n                        output = \"-.-\";\n                        break;\n\n                    case 'l':\n                        output = \".-..\";\n                        break;\n\n                    case 'm':\n                        output = \"--\";\n                        break;\n\n                    case 'n':\n                        output = \"-.\";\n                        break;\n\n                    case 'o':\n                        output = \"---\";\n                        break;\n\n                    case 'p':\n                        output = \".--.\";\n                        break;\n\n                    case 'q':\n                        output = \"--.-\";\n                        break;\n\n                    case 'r':\n                        output = \".-.\";\n                        break;\n\n                    case 's':\n                        output = \"...\";\n                        break;\n\n                    case 't':\n                        output = \"-\";\n                        break;\n\n                    case 'u':\n                        output = \"..-\";\n                        break;\n\n                    case 'v':\n                        output = \"...-\";\n                        break;\n\n                    case 'w':\n                        output = \".--\";\n                        break;\n\n                    case 'x':\n                        output = \"-..-\";\n                        break;\n\n                    case 'y':\n                        output = \"-.--\";\n                        break;\n\n                    case 'z':\n                        output = \"--..\";\n                        break;\n\n                }\n                Console.Write(output + \" \");\n\n            }\n            \n\n        }\n    }\n}\n```",
            "mimetype": "text/plain"
          },
          {
            "body": "<p><a href=\"https://matrix.to/#/@tobiasfunction:matrix.workhardpgh.com\">Tobias Tobak (he/him)</a>: <a href=\"https://matrix.to/#/@yockeyjessica:matrix.workhardpgh.com\">Jessica Yockey</a> <a href=\"https://matrix.to/#/@jallison:matrix.workhardpgh.com\">jallison</a></p>\n<pre><code class=\"language-csharp\">using System;\n\nnamespace MorseCode01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n\n            //What is your message ?\n            //&gt; hello\n            //    Your message in morse code is: .... . .-.. .-..---\n\n            Console.WriteLine(&quot;What is your message?&quot;);\n            string input = Console.ReadLine().ToLower();\n\n            //Ask for user input\n            //Get the input\n            //Convert to morse code\n            //Return morse code conversion\n\n            //Build an index for morse code to English letters\n            //For loop for conversion\n            Console.WriteLine(&quot;Your message in Morse code is: &quot;);\n            for (int i = 0; i &lt; input.Length; i++)\n            {\n                string output = &quot;&quot;;\n                switch (input[i])\n                {\n                    case 'a':\n                        output = &quot;.-&quot;;\n                        break;\n\n                    case 'b':\n                        output = &quot;-...&quot;;\n                        break;\n\n                    case 'c':\n                        output = &quot;-.-.&quot;;\n                        break;\n\n                    case 'd':\n                        output = &quot;-..&quot;;\n                        break;\n\n                    case 'e':\n                        output = &quot;.&quot;;\n                        break;\n\n                    case 'f':\n                        output = &quot;..-.&quot;;\n                        break;\n\n                    case 'g':\n                        output = &quot;--.&quot;;\n                        break;\n\n                    case 'h':\n                        output = &quot;....&quot;;\n                        break;\n\n                    case 'i':\n                        output = &quot;..&quot;;\n                        break;\n\n                    case 'j':\n                        output = &quot;.---&quot;;\n                        break;\n\n                    case 'k':\n                        output = &quot;-.-&quot;;\n                        break;\n\n                    case 'l':\n                        output = &quot;.-..&quot;;\n                        break;\n\n                    case 'm':\n                        output = &quot;--&quot;;\n                        break;\n\n                    case 'n':\n                        output = &quot;-.&quot;;\n                        break;\n\n                    case 'o':\n                        output = &quot;---&quot;;\n                        break;\n\n                    case 'p':\n                        output = &quot;.--.&quot;;\n                        break;\n\n                    case 'q':\n                        output = &quot;--.-&quot;;\n                        break;\n\n                    case 'r':\n                        output = &quot;.-.&quot;;\n                        break;\n\n                    case 's':\n                        output = &quot;...&quot;;\n                        break;\n\n                    case 't':\n                        output = &quot;-&quot;;\n                        break;\n\n                    case 'u':\n                        output = &quot;..-&quot;;\n                        break;\n\n                    case 'v':\n                        output = &quot;...-&quot;;\n                        break;\n\n                    case 'w':\n                        output = &quot;.--&quot;;\n                        break;\n\n                    case 'x':\n                        output = &quot;-..-&quot;;\n                        break;\n\n                    case 'y':\n                        output = &quot;-.--&quot;;\n                        break;\n\n                    case 'z':\n                        output = &quot;--..&quot;;\n                        break;\n\n                }\n                Console.Write(output + &quot; &quot;);\n\n            }\n            \n\n        }\n    }\n}\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "Tobias Tobak (he/him): Jessica Yockey jallison \n\n```csharp\nusing System;\n\nnamespace MorseCode01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n\n            //What is your message ?\n            //> hello\n            //    Your message in morse code is: .... . .-.. .-..---\n\n            Console.WriteLine(\"What is your message?\");\n            string input = Console.ReadLine().ToLower();\n\n            //Ask for user input\n            //Get the input\n            //Convert to morse code\n            //Return morse code conversion\n\n            //Build an index for morse code to English letters\n            //For loop for conversion\n            Console.WriteLine(\"Your message in Morse code is: \");\n            for (int i = 0; i < input.Length; i++)\n            {\n                string output = \"\";\n                switch (input[i])\n                {\n                    case 'a':\n                        output = \".-\";\n                        break;\n\n                    case 'b':\n                        output = \"-...\";\n                        break;\n\n                    case 'c':\n                        output = \"-.-.\";\n                        break;\n\n                    case 'd':\n                        output = \"-..\";\n                        break;\n\n                    case 'e':\n                        output = \".\";\n                        break;\n\n                    case 'f':\n                        output = \"..-.\";\n                        break;\n\n                    case 'g':\n                        output = \"--.\";\n                        break;\n\n                    case 'h':\n                        output = \"....\";\n                        break;\n\n                    case 'i':\n                        output = \"..\";\n                        break;\n\n                    case 'j':\n                        output = \".---\";\n                        break;\n\n                    case 'k':\n                        output = \"-.-\";\n                        break;\n\n                    case 'l':\n                        output = \".-..\";\n                        break;\n\n                    case 'm':\n                        output = \"--\";\n                        break;\n\n                    case 'n':\n                        output = \"-.\";\n                        break;\n\n                    case 'o':\n                        output = \"---\";\n                        break;\n\n                    case 'p':\n                        output = \".--.\";\n                        break;\n\n                    case 'q':\n                        output = \"--.-\";\n                        break;\n\n                    case 'r':\n                        output = \".-.\";\n                        break;\n\n                    case 's':\n                        output = \"...\";\n                        break;\n\n                    case 't':\n                        output = \"-\";\n                        break;\n\n                    case 'u':\n                        output = \"..-\";\n                        break;\n\n                    case 'v':\n                        output = \"...-\";\n                        break;\n\n                    case 'w':\n                        output = \".--\";\n                        break;\n\n                    case 'x':\n                        output = \"-..-\";\n                        break;\n\n                    case 'y':\n                        output = \"-.--\";\n                        break;\n\n                    case 'z':\n                        output = \"--..\";\n                        break;\n\n                }\n                Console.Write(output + \" \");\n\n            }\n            \n\n        }\n    }\n}\n```",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p><a href=\"https://matrix.to/#/@tobiasfunction:matrix.workhardpgh.com\">Tobias Tobak (he/him)</a>: <a href=\"https://matrix.to/#/@yockeyjessica:matrix.workhardpgh.com\">Jessica Yockey</a> <a href=\"https://matrix.to/#/@jallison:matrix.workhardpgh.com\">jallison</a></p>\n<pre><code class=\"language-csharp\">using System;\n\nnamespace MorseCode01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n\n            //What is your message ?\n            //&gt; hello\n            //    Your message in morse code is: .... . .-.. .-..---\n\n            Console.WriteLine(&quot;What is your message?&quot;);\n            string input = Console.ReadLine().ToLower();\n\n            //Ask for user input\n            //Get the input\n            //Convert to morse code\n            //Return morse code conversion\n\n            //Build an index for morse code to English letters\n            //For loop for conversion\n            Console.WriteLine(&quot;Your message in Morse code is: &quot;);\n            for (int i = 0; i &lt; input.Length; i++)\n            {\n                string output = &quot;&quot;;\n                switch (input[i])\n                {\n                    case 'a':\n                        output = &quot;.-&quot;;\n                        break;\n\n                    case 'b':\n                        output = &quot;-...&quot;;\n                        break;\n\n                    case 'c':\n                        output = &quot;-.-.&quot;;\n                        break;\n\n                    case 'd':\n                        output = &quot;-..&quot;;\n                        break;\n\n                    case 'e':\n                        output = &quot;.&quot;;\n                        break;\n\n                    case 'f':\n                        output = &quot;..-.&quot;;\n                        break;\n\n                    case 'g':\n                        output = &quot;--.&quot;;\n                        break;\n\n                    case 'h':\n                        output = &quot;....&quot;;\n                        break;\n\n                    case 'i':\n                        output = &quot;..&quot;;\n                        break;\n\n                    case 'j':\n                        output = &quot;.---&quot;;\n                        break;\n\n                    case 'k':\n                        output = &quot;-.-&quot;;\n                        break;\n\n                    case 'l':\n                        output = &quot;.-..&quot;;\n                        break;\n\n                    case 'm':\n                        output = &quot;--&quot;;\n                        break;\n\n                    case 'n':\n                        output = &quot;-.&quot;;\n                        break;\n\n                    case 'o':\n                        output = &quot;---&quot;;\n                        break;\n\n                    case 'p':\n                        output = &quot;.--.&quot;;\n                        break;\n\n                    case 'q':\n                        output = &quot;--.-&quot;;\n                        break;\n\n                    case 'r':\n                        output = &quot;.-.&quot;;\n                        break;\n\n                    case 's':\n                        output = &quot;...&quot;;\n                        break;\n\n                    case 't':\n                        output = &quot;-&quot;;\n                        break;\n\n                    case 'u':\n                        output = &quot;..-&quot;;\n                        break;\n\n                    case 'v':\n                        output = &quot;...-&quot;;\n                        break;\n\n                    case 'w':\n                        output = &quot;.--&quot;;\n                        break;\n\n                    case 'x':\n                        output = &quot;-..-&quot;;\n                        break;\n\n                    case 'y':\n                        output = &quot;-.--&quot;;\n                        break;\n\n                    case 'z':\n                        output = &quot;--..&quot;;\n                        break;\n\n                }\n                Console.Write(output + &quot; &quot;);\n\n            }\n            \n\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$1649689005226DuwbD:matrix.workhardpgh.com",
      "origin_server_ts": 1649689005112,
      "unsigned": {
        "age": 526723972,
        "m.relations": {
          "m.replace": {
            "event_id": "$1649714059269LOGiJ:matrix.workhardpgh.com",
            "origin_server_ts": 1649714059028,
            "sender": "@jim_code:matrix.workhardpgh.com"
          }
        }
      },
      "user_id": "@jim_code:matrix.workhardpgh.com",
      "age": 526640609
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@onoyemi:matrix.workhardpgh.com",
      "content": {},
      "event_id": "$1649689067227dSlpo:matrix.workhardpgh.com",
      "origin_server_ts": 1649689067487,
      "unsigned": {
        "redacted_by": "$1649689074228AJRSr:matrix.workhardpgh.com",
        "redacted_because": {
          "type": "m.room.redaction",
          "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
          "sender": "@onoyemi:matrix.workhardpgh.com",
          "content": {},
          "redacts": "$1649689067227dSlpo:matrix.workhardpgh.com",
          "event_id": "$1649689074228AJRSr:matrix.workhardpgh.com",
          "origin_server_ts": 1649689074371,
          "unsigned": {
            "age": 526654713
          },
          "user_id": "@onoyemi:matrix.workhardpgh.com",
          "age": 526654713
        },
        "age": 526661597
      },
      "user_id": "@onoyemi:matrix.workhardpgh.com",
      "age": 526578234,
      "redacted_because": {
        "type": "m.room.redaction",
        "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
        "sender": "@onoyemi:matrix.workhardpgh.com",
        "content": {},
        "redacts": "$1649689067227dSlpo:matrix.workhardpgh.com",
        "event_id": "$1649689074228AJRSr:matrix.workhardpgh.com",
        "origin_server_ts": 1649689074371,
        "unsigned": {
          "age": 526571350
        },
        "user_id": "@onoyemi:matrix.workhardpgh.com",
        "age": 526571350
      }
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@onoyemi:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "```\nusing System;\n\n\nnamespace morse_code\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // if statements to define morse\n            // ask user for a message, string\n            // translate string into array?\n            // translate user message to morse\n            // translate individual letters to morse\n\n            Console.WriteLine(\"Want morse? Tell me what to say!\");\n            string message = Console.ReadLine().ToUpper();\n\n           for (int i = 0; i < message.Length; i++)\n            {\n                if (message[i] == ' ')\n                {\n                    Console.Write(\" \");\n                }\n                else if (message[i] == 'A')\n                {\n                    Console.Write(\".- \");\n                }\n                else if (message[i]== 'B')\n                {\n                    Console.Write(\"-... \");\n                }\n                else if (message[i] == 'C')\n                {\n                    Console.Write(\"-.-. \");\n                }\n                else if (message[i] == 'D')\n                {\n                    Console.Write(\"-.. \");\n                }\n                else if (message[i] == 'E')\n                {\n                    Console.Write(\". \");\n                }\n                else if (message[i] == 'F')\n                {\n                    Console.Write(\"..-. \");\n                }\n                else if (message[i] == 'G')\n                {\n                    Console.Write(\"--. \");\n                }\n                else if (message[i] == 'H')\n                {\n                    Console.Write(\".... \");\n                }\n                else if (message[i] == 'I')\n                {\n                    Console.Write(\".. \");\n                }\n                else if (message[i] == 'J')\n                {\n                    Console.Write(\".--- \");\n                }\n                else if (message[i] == 'K')\n                {\n                    Console.Write(\"-.- \");\n                }\n                else if (message[i] == 'L')\n                {\n                    Console.Write(\".-.. \");\n                }\n                else if (message[i] == 'M')\n                {\n                    Console.Write(\"-- \");\n                }\n                else if (message[i] == 'N')\n                {\n                    Console.Write(\"-. \");\n                }\n                else if (message[i] == 'O')\n                {\n                    Console.Write(\"--- \");\n                }\n                else if (message[i] == 'P')\n                {\n                    Console.Write(\".--. \");\n                }\n                else if (message[i] == 'Q')\n                {\n                    Console.Write(\"--.- \");\n                }\n                else if (message[i] == 'R')\n                {\n                    Console.Write(\".-. \");\n                }\n                else if (message[i] == 'S')\n                {\n                    Console.Write(\"... \");\n                }\n                else if (message[i] == 'T')\n                {\n                    Console.Write(\"- \");\n                }\n                else if (message[i] == 'U')\n                {\n                    Console.Write(\"..- \");\n                }\n                else if (message[i] == 'V')\n                {\n                    Console.Write(\"...- \");\n                }\n                else if (message[i] == 'W')\n                {\n                    Console.Write(\".-- \");\n                }\n                else if (message[i] == 'X')\n                {\n                    Console.Write(\"-..- \");\n                }\n                else if (message[i] == 'Y')\n                {\n                    Console.Write(\"-.-- \");\n                }\n                else if (message[i] == 'Z')\n                {\n                    Console.Write(\"--.. \");\n                }\n                    else \n                        {\n                            //Console.WriteLine(\"Does not compute!\");\n                        }\n            }\n\n        }\n    }\n}\n\n```",
            "mimetype": "text/plain"
          },
          {
            "body": "<pre><code>using System;\n\n\nnamespace morse_code\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // if statements to define morse\n            // ask user for a message, string\n            // translate string into array?\n            // translate user message to morse\n            // translate individual letters to morse\n\n            Console.WriteLine(&quot;Want morse? Tell me what to say!&quot;);\n            string message = Console.ReadLine().ToUpper();\n\n           for (int i = 0; i &lt; message.Length; i++)\n            {\n                if (message[i] == ' ')\n                {\n                    Console.Write(&quot; &quot;);\n                }\n                else if (message[i] == 'A')\n                {\n                    Console.Write(&quot;.- &quot;);\n                }\n                else if (message[i]== 'B')\n                {\n                    Console.Write(&quot;-... &quot;);\n                }\n                else if (message[i] == 'C')\n                {\n                    Console.Write(&quot;-.-. &quot;);\n                }\n                else if (message[i] == 'D')\n                {\n                    Console.Write(&quot;-.. &quot;);\n                }\n                else if (message[i] == 'E')\n                {\n                    Console.Write(&quot;. &quot;);\n                }\n                else if (message[i] == 'F')\n                {\n                    Console.Write(&quot;..-. &quot;);\n                }\n                else if (message[i] == 'G')\n                {\n                    Console.Write(&quot;--. &quot;);\n                }\n                else if (message[i] == 'H')\n                {\n                    Console.Write(&quot;.... &quot;);\n                }\n                else if (message[i] == 'I')\n                {\n                    Console.Write(&quot;.. &quot;);\n                }\n                else if (message[i] == 'J')\n                {\n                    Console.Write(&quot;.--- &quot;);\n                }\n                else if (message[i] == 'K')\n                {\n                    Console.Write(&quot;-.- &quot;);\n                }\n                else if (message[i] == 'L')\n                {\n                    Console.Write(&quot;.-.. &quot;);\n                }\n                else if (message[i] == 'M')\n                {\n                    Console.Write(&quot;-- &quot;);\n                }\n                else if (message[i] == 'N')\n                {\n                    Console.Write(&quot;-. &quot;);\n                }\n                else if (message[i] == 'O')\n                {\n                    Console.Write(&quot;--- &quot;);\n                }\n                else if (message[i] == 'P')\n                {\n                    Console.Write(&quot;.--. &quot;);\n                }\n                else if (message[i] == 'Q')\n                {\n                    Console.Write(&quot;--.- &quot;);\n                }\n                else if (message[i] == 'R')\n                {\n                    Console.Write(&quot;.-. &quot;);\n                }\n                else if (message[i] == 'S')\n                {\n                    Console.Write(&quot;... &quot;);\n                }\n                else if (message[i] == 'T')\n                {\n                    Console.Write(&quot;- &quot;);\n                }\n                else if (message[i] == 'U')\n                {\n                    Console.Write(&quot;..- &quot;);\n                }\n                else if (message[i] == 'V')\n                {\n                    Console.Write(&quot;...- &quot;);\n                }\n                else if (message[i] == 'W')\n                {\n                    Console.Write(&quot;.-- &quot;);\n                }\n                else if (message[i] == 'X')\n                {\n                    Console.Write(&quot;-..- &quot;);\n                }\n                else if (message[i] == 'Y')\n                {\n                    Console.Write(&quot;-.-- &quot;);\n                }\n                else if (message[i] == 'Z')\n                {\n                    Console.Write(&quot;--.. &quot;);\n                }\n                    else \n                        {\n                            //Console.WriteLine(&quot;Does not compute!&quot;);\n                        }\n            }\n\n        }\n    }\n}\n\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "```\nusing System;\n\n\nnamespace morse_code\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // if statements to define morse\n            // ask user for a message, string\n            // translate string into array?\n            // translate user message to morse\n            // translate individual letters to morse\n\n            Console.WriteLine(\"Want morse? Tell me what to say!\");\n            string message = Console.ReadLine().ToUpper();\n\n           for (int i = 0; i < message.Length; i++)\n            {\n                if (message[i] == ' ')\n                {\n                    Console.Write(\" \");\n                }\n                else if (message[i] == 'A')\n                {\n                    Console.Write(\".- \");\n                }\n                else if (message[i]== 'B')\n                {\n                    Console.Write(\"-... \");\n                }\n                else if (message[i] == 'C')\n                {\n                    Console.Write(\"-.-. \");\n                }\n                else if (message[i] == 'D')\n                {\n                    Console.Write(\"-.. \");\n                }\n                else if (message[i] == 'E')\n                {\n                    Console.Write(\". \");\n                }\n                else if (message[i] == 'F')\n                {\n                    Console.Write(\"..-. \");\n                }\n                else if (message[i] == 'G')\n                {\n                    Console.Write(\"--. \");\n                }\n                else if (message[i] == 'H')\n                {\n                    Console.Write(\".... \");\n                }\n                else if (message[i] == 'I')\n                {\n                    Console.Write(\".. \");\n                }\n                else if (message[i] == 'J')\n                {\n                    Console.Write(\".--- \");\n                }\n                else if (message[i] == 'K')\n                {\n                    Console.Write(\"-.- \");\n                }\n                else if (message[i] == 'L')\n                {\n                    Console.Write(\".-.. \");\n                }\n                else if (message[i] == 'M')\n                {\n                    Console.Write(\"-- \");\n                }\n                else if (message[i] == 'N')\n                {\n                    Console.Write(\"-. \");\n                }\n                else if (message[i] == 'O')\n                {\n                    Console.Write(\"--- \");\n                }\n                else if (message[i] == 'P')\n                {\n                    Console.Write(\".--. \");\n                }\n                else if (message[i] == 'Q')\n                {\n                    Console.Write(\"--.- \");\n                }\n                else if (message[i] == 'R')\n                {\n                    Console.Write(\".-. \");\n                }\n                else if (message[i] == 'S')\n                {\n                    Console.Write(\"... \");\n                }\n                else if (message[i] == 'T')\n                {\n                    Console.Write(\"- \");\n                }\n                else if (message[i] == 'U')\n                {\n                    Console.Write(\"..- \");\n                }\n                else if (message[i] == 'V')\n                {\n                    Console.Write(\"...- \");\n                }\n                else if (message[i] == 'W')\n                {\n                    Console.Write(\".-- \");\n                }\n                else if (message[i] == 'X')\n                {\n                    Console.Write(\"-..- \");\n                }\n                else if (message[i] == 'Y')\n                {\n                    Console.Write(\"-.-- \");\n                }\n                else if (message[i] == 'Z')\n                {\n                    Console.Write(\"--.. \");\n                }\n                    else \n                        {\n                            //Console.WriteLine(\"Does not compute!\");\n                        }\n            }\n\n        }\n    }\n}\n\n```",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<pre><code>using System;\n\n\nnamespace morse_code\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // if statements to define morse\n            // ask user for a message, string\n            // translate string into array?\n            // translate user message to morse\n            // translate individual letters to morse\n\n            Console.WriteLine(&quot;Want morse? Tell me what to say!&quot;);\n            string message = Console.ReadLine().ToUpper();\n\n           for (int i = 0; i &lt; message.Length; i++)\n            {\n                if (message[i] == ' ')\n                {\n                    Console.Write(&quot; &quot;);\n                }\n                else if (message[i] == 'A')\n                {\n                    Console.Write(&quot;.- &quot;);\n                }\n                else if (message[i]== 'B')\n                {\n                    Console.Write(&quot;-... &quot;);\n                }\n                else if (message[i] == 'C')\n                {\n                    Console.Write(&quot;-.-. &quot;);\n                }\n                else if (message[i] == 'D')\n                {\n                    Console.Write(&quot;-.. &quot;);\n                }\n                else if (message[i] == 'E')\n                {\n                    Console.Write(&quot;. &quot;);\n                }\n                else if (message[i] == 'F')\n                {\n                    Console.Write(&quot;..-. &quot;);\n                }\n                else if (message[i] == 'G')\n                {\n                    Console.Write(&quot;--. &quot;);\n                }\n                else if (message[i] == 'H')\n                {\n                    Console.Write(&quot;.... &quot;);\n                }\n                else if (message[i] == 'I')\n                {\n                    Console.Write(&quot;.. &quot;);\n                }\n                else if (message[i] == 'J')\n                {\n                    Console.Write(&quot;.--- &quot;);\n                }\n                else if (message[i] == 'K')\n                {\n                    Console.Write(&quot;-.- &quot;);\n                }\n                else if (message[i] == 'L')\n                {\n                    Console.Write(&quot;.-.. &quot;);\n                }\n                else if (message[i] == 'M')\n                {\n                    Console.Write(&quot;-- &quot;);\n                }\n                else if (message[i] == 'N')\n                {\n                    Console.Write(&quot;-. &quot;);\n                }\n                else if (message[i] == 'O')\n                {\n                    Console.Write(&quot;--- &quot;);\n                }\n                else if (message[i] == 'P')\n                {\n                    Console.Write(&quot;.--. &quot;);\n                }\n                else if (message[i] == 'Q')\n                {\n                    Console.Write(&quot;--.- &quot;);\n                }\n                else if (message[i] == 'R')\n                {\n                    Console.Write(&quot;.-. &quot;);\n                }\n                else if (message[i] == 'S')\n                {\n                    Console.Write(&quot;... &quot;);\n                }\n                else if (message[i] == 'T')\n                {\n                    Console.Write(&quot;- &quot;);\n                }\n                else if (message[i] == 'U')\n                {\n                    Console.Write(&quot;..- &quot;);\n                }\n                else if (message[i] == 'V')\n                {\n                    Console.Write(&quot;...- &quot;);\n                }\n                else if (message[i] == 'W')\n                {\n                    Console.Write(&quot;.-- &quot;);\n                }\n                else if (message[i] == 'X')\n                {\n                    Console.Write(&quot;-..- &quot;);\n                }\n                else if (message[i] == 'Y')\n                {\n                    Console.Write(&quot;-.-- &quot;);\n                }\n                else if (message[i] == 'Z')\n                {\n                    Console.Write(&quot;--.. &quot;);\n                }\n                    else \n                        {\n                            //Console.WriteLine(&quot;Does not compute!&quot;);\n                        }\n            }\n\n        }\n    }\n}\n\n</code></pre>\n"
      },
      "event_id": "$1649689087229siskW:matrix.workhardpgh.com",
      "origin_server_ts": 1649689087453,
      "unsigned": {
        "age": 526641631
      },
      "user_id": "@onoyemi:matrix.workhardpgh.com",
      "age": 526558268
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@renata42:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "```\n\nusing System;\n\nnamespace project_3_morsse\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Hello World!\");\n\n            // Morse Code\n            // Ask the user for a message. Print out the morse code version of that message.\n            // morse code message is: .... . .-.. .-.. ---\n\n            // VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\n\n             string[] morse = { \".- \", \"-... \", \"-.-. \", \"-.. \", \". \", \"..-. \", \"--. \", \".... \"\n             , \".. \", \".--- \", \"-.- \", \".-.. \", \"-- \", \"-. \", \"--- \", \".--. \", \"--.- \", \".-. \"\n             , \"... \", \"- \", \"..- \", \"...- \", \".-- \", \"-..- \", \"-.-- \", \"--.. \" };\n\n\n\n            //==== Ask user for message\n            // Display question to user\n            Console.WriteLine(\" Please enter the message you want converted? \");\n            // Store user response in variable \n            string usermessage = Console.ReadLine();\n            usermessage = usermessage.ToLower();\n            usermessage = usermessage.Trim();\n            // 0 index offset for ascii codes. \n            int offset = 97;\n\n            //==== Convert message to morse code\n            // iterate over usermessage\n\n            Console.WriteLine(\" Your message in morse code is: \");\n            bool previouswasspace = false;\n            for (int i = 0; i < usermessage.Length; i++)\n            {\n                // Extract character from string \n\n                char c = usermessage[i];\n                // Look up unicode integer from character\n\n                // subtract to get 0 index array\n                int n = (int)c - offset;\n\n                // make sure the character is a letter\n                if (n < 0 || n > 25)\n                {\n                    if (n == -65 && !previouswasspace)\n                    {\n                        Console.Write(\" / \");                     //user.removeCat (keeps cats off keyboard)\n                        previouswasspace = true;\n                    }    \n                    continue;             // <--- flow control. If you get inside that f block. Once you hit continue it goes back to for.\n                }\n\n                //Console.WriteLine($\"{c} {n} {morse[n]}\");\n\n                \n                Console.Write(morse[n]);\n                previouswasspace = false;\n            }\n            //==== Relay message to user\n\n            // DON'T FORGET ABOUT SPACES. !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n            // Go through the message that the user enters.\n            // Convert each of those characters into an integer\n            // You can then have an array which is basically like a 26 element array of strings\n            // Then you can be like okay the letter a turns into the code for a is \"3\" (example)\n            // Go to the array so you have the array setup something something morse code. Making our own ascii table.\n            // Parse through the user message. At some point capital letters\n            // Goes through and makes a new array of numbers. We have a for loop that goes through that array\n\n            // Simpler method explanation? \n            // Convert message character by character into a number\n            // Then we are going to convert each number into morese code\n            // For loops that are going to have to go through and check each one thing\n            // will need a table \n\n\n        }\n    }\n}\n\n```",
        "format": "org.matrix.custom.html",
        "formatted_body": "<pre><code>\nusing System;\n\nnamespace project_3_morsse\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(&quot;Hello World!&quot;);\n\n            // Morse Code\n            // Ask the user for a message. Print out the morse code version of that message.\n            // morse code message is: .... . .-.. .-.. ---\n\n            // VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\n\n             string[] morse = { &quot;.- &quot;, &quot;-... &quot;, &quot;-.-. &quot;, &quot;-.. &quot;, &quot;. &quot;, &quot;..-. &quot;, &quot;--. &quot;, &quot;.... &quot;\n             , &quot;.. &quot;, &quot;.--- &quot;, &quot;-.- &quot;, &quot;.-.. &quot;, &quot;-- &quot;, &quot;-. &quot;, &quot;--- &quot;, &quot;.--. &quot;, &quot;--.- &quot;, &quot;.-. &quot;\n             , &quot;... &quot;, &quot;- &quot;, &quot;..- &quot;, &quot;...- &quot;, &quot;.-- &quot;, &quot;-..- &quot;, &quot;-.-- &quot;, &quot;--.. &quot; };\n\n\n\n            //==== Ask user for message\n            // Display question to user\n            Console.WriteLine(&quot; Please enter the message you want converted? &quot;);\n            // Store user response in variable \n            string usermessage = Console.ReadLine();\n            usermessage = usermessage.ToLower();\n            usermessage = usermessage.Trim();\n            // 0 index offset for ascii codes. \n            int offset = 97;\n\n            //==== Convert message to morse code\n            // iterate over usermessage\n\n            Console.WriteLine(&quot; Your message in morse code is: &quot;);\n            bool previouswasspace = false;\n            for (int i = 0; i &lt; usermessage.Length; i++)\n            {\n                // Extract character from string \n\n                char c = usermessage[i];\n                // Look up unicode integer from character\n\n                // subtract to get 0 index array\n                int n = (int)c - offset;\n\n                // make sure the character is a letter\n                if (n &lt; 0 || n &gt; 25)\n                {\n                    if (n == -65 &amp;&amp; !previouswasspace)\n                    {\n                        Console.Write(&quot; / &quot;);                     //user.removeCat (keeps cats off keyboard)\n                        previouswasspace = true;\n                    }    \n                    continue;             // &lt;--- flow control. If you get inside that f block. Once you hit continue it goes back to for.\n                }\n\n                //Console.WriteLine($&quot;{c} {n} {morse[n]}&quot;);\n\n                \n                Console.Write(morse[n]);\n                previouswasspace = false;\n            }\n            //==== Relay message to user\n\n            // DON'T FORGET ABOUT SPACES. !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n            // Go through the message that the user enters.\n            // Convert each of those characters into an integer\n            // You can then have an array which is basically like a 26 element array of strings\n            // Then you can be like okay the letter a turns into the code for a is &quot;3&quot; (example)\n            // Go to the array so you have the array setup something something morse code. Making our own ascii table.\n            // Parse through the user message. At some point capital letters\n            // Goes through and makes a new array of numbers. We have a for loop that goes through that array\n\n            // Simpler method explanation? \n            // Convert message character by character into a number\n            // Then we are going to convert each number into morese code\n            // For loops that are going to have to go through and check each one thing\n            // will need a table \n\n\n        }\n    }\n}\n\n</code></pre>\n"
      },
      "event_id": "$1649690763231xVtKg:matrix.workhardpgh.com",
      "origin_server_ts": 1649690763073,
      "unsigned": {
        "age": 524966011
      },
      "user_id": "@renata42:matrix.workhardpgh.com",
      "age": 524882648
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "Morse Code with replace\n```\nusing System;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Ask a user for a message\n            // convert that into morse code\n            // spit the message back out\n\n            Console.WriteLine(\"What message would you like to translate?\");\n            string message = Console.ReadLine();\n            message = message.ToUpper();\n\n            message = message.Replace(\"A\", \".- \");\n            message = message.Replace(\"B\", \"-... \");\n            message = message.Replace(\"C\", \".-.- \");\n            message = message.Replace(\"D\", \"-.. \");\n\n            Console.WriteLine(\"Your translated message is: \" + message);\n\n            Console.ReadLine();\n        }\n    }\n}\n",
            "mimetype": "text/plain"
          },
          {
            "body": "<p>Morse Code with replace</p>\n<pre><code>using System;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Ask a user for a message\n            // convert that into morse code\n            // spit the message back out\n\n            Console.WriteLine(&quot;What message would you like to translate?&quot;);\n            string message = Console.ReadLine();\n            message = message.ToUpper();\n\n            message = message.Replace(&quot;A&quot;, &quot;.- &quot;);\n            message = message.Replace(&quot;B&quot;, &quot;-... &quot;);\n            message = message.Replace(&quot;C&quot;, &quot;.-.- &quot;);\n            message = message.Replace(&quot;D&quot;, &quot;-.. &quot;);\n\n            Console.WriteLine(&quot;Your translated message is: &quot; + message);\n\n            Console.ReadLine();\n        }\n    }\n}\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "Morse Code with replace\n```\nusing System;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Ask a user for a message\n            // convert that into morse code\n            // spit the message back out\n\n            Console.WriteLine(\"What message would you like to translate?\");\n            string message = Console.ReadLine();\n            message = message.ToUpper();\n\n            message = message.Replace(\"A\", \".- \");\n            message = message.Replace(\"B\", \"-... \");\n            message = message.Replace(\"C\", \".-.- \");\n            message = message.Replace(\"D\", \"-.. \");\n\n            Console.WriteLine(\"Your translated message is: \" + message);\n\n            Console.ReadLine();\n        }\n    }\n}\n",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Morse Code with replace</p>\n<pre><code>using System;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Ask a user for a message\n            // convert that into morse code\n            // spit the message back out\n\n            Console.WriteLine(&quot;What message would you like to translate?&quot;);\n            string message = Console.ReadLine();\n            message = message.ToUpper();\n\n            message = message.Replace(&quot;A&quot;, &quot;.- &quot;);\n            message = message.Replace(&quot;B&quot;, &quot;-... &quot;);\n            message = message.Replace(&quot;C&quot;, &quot;.-.- &quot;);\n            message = message.Replace(&quot;D&quot;, &quot;-.. &quot;);\n\n            Console.WriteLine(&quot;Your translated message is: &quot; + message);\n\n            Console.ReadLine();\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$1649691808232LVkNA:matrix.workhardpgh.com",
      "origin_server_ts": 1649691808165,
      "unsigned": {
        "age": 523920919
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 523837556
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "Morse Code with switch\n```\nusing System;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Ask a user for a message\n            // convert that into morse code\n            // spit the message back out\n\n            Console.WriteLine(\"What message would you like to translate?\");\n            string message = Console.ReadLine();\n            message = message.ToUpper();\n            string output = \"\";\n\n            for (int i = 0; i < message.Length; i++)\n            {\n                // if(message[i] == 'a')\n\n                switch(message[i])\n                {\n                    case 'A':\n                        output = output + \".- \";\n                        break;\n                    case 'B':\n                        output = output + \"-... \";\n                        break;\n                    case 'C':\n                        output = output + \"-.-. \";\n                        break;\n                    case 'D':\n                        output = output + \"-.. \";\n                        break;\n\n                }\n            }\n\n            Console.WriteLine(\"Your translated message is \" + output);\n\n            Console.ReadLine();\n        }\n    }\n}\n",
            "mimetype": "text/plain"
          },
          {
            "body": "<p>Morse Code with switch</p>\n<pre><code>using System;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Ask a user for a message\n            // convert that into morse code\n            // spit the message back out\n\n            Console.WriteLine(&quot;What message would you like to translate?&quot;);\n            string message = Console.ReadLine();\n            message = message.ToUpper();\n            string output = &quot;&quot;;\n\n            for (int i = 0; i &lt; message.Length; i++)\n            {\n                // if(message[i] == 'a')\n\n                switch(message[i])\n                {\n                    case 'A':\n                        output = output + &quot;.- &quot;;\n                        break;\n                    case 'B':\n                        output = output + &quot;-... &quot;;\n                        break;\n                    case 'C':\n                        output = output + &quot;-.-. &quot;;\n                        break;\n                    case 'D':\n                        output = output + &quot;-.. &quot;;\n                        break;\n\n                }\n            }\n\n            Console.WriteLine(&quot;Your translated message is &quot; + output);\n\n            Console.ReadLine();\n        }\n    }\n}\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "Morse Code with switch\n```\nusing System;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Ask a user for a message\n            // convert that into morse code\n            // spit the message back out\n\n            Console.WriteLine(\"What message would you like to translate?\");\n            string message = Console.ReadLine();\n            message = message.ToUpper();\n            string output = \"\";\n\n            for (int i = 0; i < message.Length; i++)\n            {\n                // if(message[i] == 'a')\n\n                switch(message[i])\n                {\n                    case 'A':\n                        output = output + \".- \";\n                        break;\n                    case 'B':\n                        output = output + \"-... \";\n                        break;\n                    case 'C':\n                        output = output + \"-.-. \";\n                        break;\n                    case 'D':\n                        output = output + \"-.. \";\n                        break;\n\n                }\n            }\n\n            Console.WriteLine(\"Your translated message is \" + output);\n\n            Console.ReadLine();\n        }\n    }\n}\n",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Morse Code with switch</p>\n<pre><code>using System;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Ask a user for a message\n            // convert that into morse code\n            // spit the message back out\n\n            Console.WriteLine(&quot;What message would you like to translate?&quot;);\n            string message = Console.ReadLine();\n            message = message.ToUpper();\n            string output = &quot;&quot;;\n\n            for (int i = 0; i &lt; message.Length; i++)\n            {\n                // if(message[i] == 'a')\n\n                switch(message[i])\n                {\n                    case 'A':\n                        output = output + &quot;.- &quot;;\n                        break;\n                    case 'B':\n                        output = output + &quot;-... &quot;;\n                        break;\n                    case 'C':\n                        output = output + &quot;-.-. &quot;;\n                        break;\n                    case 'D':\n                        output = output + &quot;-.. &quot;;\n                        break;\n\n                }\n            }\n\n            Console.WriteLine(&quot;Your translated message is &quot; + output);\n\n            Console.ReadLine();\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$1649692503233VegzR:matrix.workhardpgh.com",
      "origin_server_ts": 1649692503873,
      "unsigned": {
        "age": 523225211
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 523141848
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "Morse Code with dictionary arrays\n```\nusing System;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Ask a user for a message\n            // convert that into morse code\n            // spit the message back out\n\n            char[] b = { 'A', 'B', 'C', 'D', 'E' };\n            string[] c = { \".- \", \"-.. \", \"-.-. \", \"-... \", \". \" };\n\n\n            Console.WriteLine(\"What message would you like to translate?\");\n            string message = Console.ReadLine();\n            message = message.ToUpper();\n            string output = \"\";\n\n            for (int i = 0; i < message.Length; i++)\n            {\n                // if(message[i] == 'a')\n\n                for (int j = 0; j < b.Length; j++)\n                {\n                    if (message[i] == b[j])\n                    {\n                        output = output + c[j];\n                    }\n                }\n\n            }\n\n            Console.WriteLine(\"Your translated message is \" + output);\n\n            Console.ReadLine();\n        }\n    }\n}\n",
            "mimetype": "text/plain"
          },
          {
            "body": "<p>Morse Code with dictionary arrays</p>\n<pre><code>using System;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Ask a user for a message\n            // convert that into morse code\n            // spit the message back out\n\n            char[] b = { 'A', 'B', 'C', 'D', 'E' };\n            string[] c = { &quot;.- &quot;, &quot;-.. &quot;, &quot;-.-. &quot;, &quot;-... &quot;, &quot;. &quot; };\n\n\n            Console.WriteLine(&quot;What message would you like to translate?&quot;);\n            string message = Console.ReadLine();\n            message = message.ToUpper();\n            string output = &quot;&quot;;\n\n            for (int i = 0; i &lt; message.Length; i++)\n            {\n                // if(message[i] == 'a')\n\n                for (int j = 0; j &lt; b.Length; j++)\n                {\n                    if (message[i] == b[j])\n                    {\n                        output = output + c[j];\n                    }\n                }\n\n            }\n\n            Console.WriteLine(&quot;Your translated message is &quot; + output);\n\n            Console.ReadLine();\n        }\n    }\n}\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "Morse Code with dictionary arrays\n```\nusing System;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Ask a user for a message\n            // convert that into morse code\n            // spit the message back out\n\n            char[] b = { 'A', 'B', 'C', 'D', 'E' };\n            string[] c = { \".- \", \"-.. \", \"-.-. \", \"-... \", \". \" };\n\n\n            Console.WriteLine(\"What message would you like to translate?\");\n            string message = Console.ReadLine();\n            message = message.ToUpper();\n            string output = \"\";\n\n            for (int i = 0; i < message.Length; i++)\n            {\n                // if(message[i] == 'a')\n\n                for (int j = 0; j < b.Length; j++)\n                {\n                    if (message[i] == b[j])\n                    {\n                        output = output + c[j];\n                    }\n                }\n\n            }\n\n            Console.WriteLine(\"Your translated message is \" + output);\n\n            Console.ReadLine();\n        }\n    }\n}\n",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Morse Code with dictionary arrays</p>\n<pre><code>using System;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Ask a user for a message\n            // convert that into morse code\n            // spit the message back out\n\n            char[] b = { 'A', 'B', 'C', 'D', 'E' };\n            string[] c = { &quot;.- &quot;, &quot;-.. &quot;, &quot;-.-. &quot;, &quot;-... &quot;, &quot;. &quot; };\n\n\n            Console.WriteLine(&quot;What message would you like to translate?&quot;);\n            string message = Console.ReadLine();\n            message = message.ToUpper();\n            string output = &quot;&quot;;\n\n            for (int i = 0; i &lt; message.Length; i++)\n            {\n                // if(message[i] == 'a')\n\n                for (int j = 0; j &lt; b.Length; j++)\n                {\n                    if (message[i] == b[j])\n                    {\n                        output = output + c[j];\n                    }\n                }\n\n            }\n\n            Console.WriteLine(&quot;Your translated message is &quot; + output);\n\n            Console.ReadLine();\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$1649693593234QoxHu:matrix.workhardpgh.com",
      "origin_server_ts": 1649693593086,
      "unsigned": {
        "age": 522135998
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 522052635
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@spensermg:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "```\nusing System;\n\nnamespace RomanNumeralKata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Ask user for a message\n            //Convert string to characters\n            //Be able to set each letter to a morse code, either with a library or array\n\n            char[] alphabet = new char[4] { 'a', 'b', 'c', 'd' };\n            string[] morsealphabet = new string[4] { \".- \", \"-... \", \"-.-. \", \"-.. \" };\n\n            Console.WriteLine(\"What is the message you would like to write in morse code\");\n            string input = Console.ReadLine().ToLower();\n\n            //Convert message into morse code using a series of if statements\n            //Need to compare the alphabet to the morse alphabet\n\n            string output = \"\";\n\n            //run this loop the same number of times, as number of characters in the message\n            for (int i = 0; i < input.Length; i++)\n            {\n                //run this loop for the same number of strings in our morse alphabet array\n                for (int y = 0; y < morsealphabet.Length; y++)\n                {\n                    //this if statement is only used once the character in the user's input is the same as the alphabet array\n                    if (input[i] == alphabet[y])\n                    {\n                        //the string variable we established outside the double for loops sets the blank variable to be the morse code that corresponds to the same position of the alphabet\n                        output = output + morsealphabet[y];\n                    }\n                }\n\n            }\n\n            Console.WriteLine(\"Your message in morse code is: \" + output);\n\n        }\n    }\n}\n```",
            "mimetype": "text/plain"
          },
          {
            "body": "<pre><code>using System;\n\nnamespace RomanNumeralKata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Ask user for a message\n            //Convert string to characters\n            //Be able to set each letter to a morse code, either with a library or array\n\n            char[] alphabet = new char[4] { 'a', 'b', 'c', 'd' };\n            string[] morsealphabet = new string[4] { &quot;.- &quot;, &quot;-... &quot;, &quot;-.-. &quot;, &quot;-.. &quot; };\n\n            Console.WriteLine(&quot;What is the message you would like to write in morse code&quot;);\n            string input = Console.ReadLine().ToLower();\n\n            //Convert message into morse code using a series of if statements\n            //Need to compare the alphabet to the morse alphabet\n\n            string output = &quot;&quot;;\n\n            //run this loop the same number of times, as number of characters in the message\n            for (int i = 0; i &lt; input.Length; i++)\n            {\n                //run this loop for the same number of strings in our morse alphabet array\n                for (int y = 0; y &lt; morsealphabet.Length; y++)\n                {\n                    //this if statement is only used once the character in the user's input is the same as the alphabet array\n                    if (input[i] == alphabet[y])\n                    {\n                        //the string variable we established outside the double for loops sets the blank variable to be the morse code that corresponds to the same position of the alphabet\n                        output = output + morsealphabet[y];\n                    }\n                }\n\n            }\n\n            Console.WriteLine(&quot;Your message in morse code is: &quot; + output);\n\n        }\n    }\n}\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "```\nusing System;\n\nnamespace RomanNumeralKata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Ask user for a message\n            //Convert string to characters\n            //Be able to set each letter to a morse code, either with a library or array\n\n            char[] alphabet = new char[4] { 'a', 'b', 'c', 'd' };\n            string[] morsealphabet = new string[4] { \".- \", \"-... \", \"-.-. \", \"-.. \" };\n\n            Console.WriteLine(\"What is the message you would like to write in morse code\");\n            string input = Console.ReadLine().ToLower();\n\n            //Convert message into morse code using a series of if statements\n            //Need to compare the alphabet to the morse alphabet\n\n            string output = \"\";\n\n            //run this loop the same number of times, as number of characters in the message\n            for (int i = 0; i < input.Length; i++)\n            {\n                //run this loop for the same number of strings in our morse alphabet array\n                for (int y = 0; y < morsealphabet.Length; y++)\n                {\n                    //this if statement is only used once the character in the user's input is the same as the alphabet array\n                    if (input[i] == alphabet[y])\n                    {\n                        //the string variable we established outside the double for loops sets the blank variable to be the morse code that corresponds to the same position of the alphabet\n                        output = output + morsealphabet[y];\n                    }\n                }\n\n            }\n\n            Console.WriteLine(\"Your message in morse code is: \" + output);\n\n        }\n    }\n}\n```",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<pre><code>using System;\n\nnamespace RomanNumeralKata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Ask user for a message\n            //Convert string to characters\n            //Be able to set each letter to a morse code, either with a library or array\n\n            char[] alphabet = new char[4] { 'a', 'b', 'c', 'd' };\n            string[] morsealphabet = new string[4] { &quot;.- &quot;, &quot;-... &quot;, &quot;-.-. &quot;, &quot;-.. &quot; };\n\n            Console.WriteLine(&quot;What is the message you would like to write in morse code&quot;);\n            string input = Console.ReadLine().ToLower();\n\n            //Convert message into morse code using a series of if statements\n            //Need to compare the alphabet to the morse alphabet\n\n            string output = &quot;&quot;;\n\n            //run this loop the same number of times, as number of characters in the message\n            for (int i = 0; i &lt; input.Length; i++)\n            {\n                //run this loop for the same number of strings in our morse alphabet array\n                for (int y = 0; y &lt; morsealphabet.Length; y++)\n                {\n                    //this if statement is only used once the character in the user's input is the same as the alphabet array\n                    if (input[i] == alphabet[y])\n                    {\n                        //the string variable we established outside the double for loops sets the blank variable to be the morse code that corresponds to the same position of the alphabet\n                        output = output + morsealphabet[y];\n                    }\n                }\n\n            }\n\n            Console.WriteLine(&quot;Your message in morse code is: &quot; + output);\n\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$1649698673247ZvAYC:matrix.workhardpgh.com",
      "origin_server_ts": 1649698673290,
      "unsigned": {
        "age": 517055794
      },
      "user_id": "@spensermg:matrix.workhardpgh.com",
      "age": 516972431
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "Function small example\n```\nusing System;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int row = GetNumber();\n            int col = GetNumber();\n\n            Console.WriteLine(\"You are doing something at row \" + row + \" and column \" + col);\n\n            Console.ReadLine();\n        }\n\n        static void SayHello()\n        {\n            Console.WriteLine(\"Hello there!\");\n            Console.WriteLine(\"This is really cool!\");\n        }\n\n        static int GetNumber()\n        {\n            bool askForNumber = true;\n            int number = 0;\n            while (askForNumber)\n            {\n                Console.WriteLine(\"Give me a number from 1 - 10\");\n                number = Convert.ToInt32(Console.ReadLine());\n                if (number >= 1 && number <= 10)\n                {\n                    // if it is a good number, then set askForNumber to false\n                    askForNumber = false;\n                }\n            }\n            return number;\n        }\n\n    }\n}\n",
            "mimetype": "text/plain"
          },
          {
            "body": "<p>Function small example</p>\n<pre><code>using System;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int row = GetNumber();\n            int col = GetNumber();\n\n            Console.WriteLine(&quot;You are doing something at row &quot; + row + &quot; and column &quot; + col);\n\n            Console.ReadLine();\n        }\n\n        static void SayHello()\n        {\n            Console.WriteLine(&quot;Hello there!&quot;);\n            Console.WriteLine(&quot;This is really cool!&quot;);\n        }\n\n        static int GetNumber()\n        {\n            bool askForNumber = true;\n            int number = 0;\n            while (askForNumber)\n            {\n                Console.WriteLine(&quot;Give me a number from 1 - 10&quot;);\n                number = Convert.ToInt32(Console.ReadLine());\n                if (number &gt;= 1 &amp;&amp; number &lt;= 10)\n                {\n                    // if it is a good number, then set askForNumber to false\n                    askForNumber = false;\n                }\n            }\n            return number;\n        }\n\n    }\n}\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "Function small example\n```\nusing System;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int row = GetNumber();\n            int col = GetNumber();\n\n            Console.WriteLine(\"You are doing something at row \" + row + \" and column \" + col);\n\n            Console.ReadLine();\n        }\n\n        static void SayHello()\n        {\n            Console.WriteLine(\"Hello there!\");\n            Console.WriteLine(\"This is really cool!\");\n        }\n\n        static int GetNumber()\n        {\n            bool askForNumber = true;\n            int number = 0;\n            while (askForNumber)\n            {\n                Console.WriteLine(\"Give me a number from 1 - 10\");\n                number = Convert.ToInt32(Console.ReadLine());\n                if (number >= 1 && number <= 10)\n                {\n                    // if it is a good number, then set askForNumber to false\n                    askForNumber = false;\n                }\n            }\n            return number;\n        }\n\n    }\n}\n",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Function small example</p>\n<pre><code>using System;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int row = GetNumber();\n            int col = GetNumber();\n\n            Console.WriteLine(&quot;You are doing something at row &quot; + row + &quot; and column &quot; + col);\n\n            Console.ReadLine();\n        }\n\n        static void SayHello()\n        {\n            Console.WriteLine(&quot;Hello there!&quot;);\n            Console.WriteLine(&quot;This is really cool!&quot;);\n        }\n\n        static int GetNumber()\n        {\n            bool askForNumber = true;\n            int number = 0;\n            while (askForNumber)\n            {\n                Console.WriteLine(&quot;Give me a number from 1 - 10&quot;);\n                number = Convert.ToInt32(Console.ReadLine());\n                if (number &gt;= 1 &amp;&amp; number &lt;= 10)\n                {\n                    // if it is a good number, then set askForNumber to false\n                    askForNumber = false;\n                }\n            }\n            return number;\n        }\n\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$1649700021254KGWmd:matrix.workhardpgh.com",
      "origin_server_ts": 1649700021961,
      "unsigned": {
        "age": 515707123
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 515623760
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@taslater:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "```\nusing System;\n\nnamespace CashRegister\n{\n    class Program\n    {\n        // ======== PROMPT ========\n        // Create a cash register application that will\n        // Take in a cost of goods sold and cash given\n        // and will return the change to be given and\n        // the appropriate bills and coins to give\n\n        // ex:\n        // How much did it cost?\n        // 3.43\n        // How much did they pay?\n        // 10\n        // They get 6.57 in change\n        // 1 five, 1 one, 2 quarters, 1 nickel, 2 pennies\n\n        // ---- Variables required:\n        // howMuchDidItCost, howMuchDidTheyPay, change, coinAmounts, changeString???\n        // ---- Variable types\n        // Double it all\n        //\n        // ===== Get inputs =====\n        // Ask for amount owed\n        // Receive cost from user\n        // Ask for amount paid\n        // Receive amount paid\n\n        // ===== Do Maff =====\n\n\n        // this is a function that asks for a currency amounts (in decimals)?\n        static decimal GetUserDecimal(string askType)\n        {\n            // ask the user for what we want\n            Console.WriteLine($\"What was the {askType}? (dollas & censs plz)\");\n            // get the input from the user and converts it\n            decimal amount = Convert.ToDecimal(Console.ReadLine());\n            // returns a decimal from the user input\n            return amount;\n        }\n\n        static void Main(string[] args)\n        {\n            // use our function to get money inputs from the user\n            decimal cost = GetUserDecimal(\"cost\");\n            decimal paid = GetUserDecimal(\"paid\");\n\n            // find the change from the difference and assign to __change__\n            // __change__ will be modified\n            decimal change = paid - cost;\n\n            // our initial difference is saved for later\n            // we want to tell the user what the total is\n            // but we will alter __change__ during the rest of the code\n            // so we have to save it\n            decimal totalChange = change;\n\n            // declaring variables for our denominations\n            // bills and coins\n            int twenties = 0;\n            int tens = 0;\n            int fives = 0;\n            int ones = 0;\n            int quarters = 0;\n            int dimes = 0;\n            int nickels = 0;\n            int pennies = 0;\n\n            // THESE ARE JUST REMINDERS (to-do list)\n            // loooOOOOOoo000op\n            // modulo?\n            // RomanNumeralzzzz?\n            // wwwwwwwhhhillllee\n            // $0.60 - $0.25 = $0.35\n            // $0.35 - $0.25 = $0.10\n            // ohh no funkshuns!\n\n            // error checking\n            // make sure amount paid > price\n\n            // do cute stuff with arrays and loopz\n\n\n            // breaking __change__ down into currency (denominations)\n            // __change__ is being modified\n            // while the remaining change is greater than the denomination's value\n            // we are removing that value\n\n            // use while-loop instead of if-block because we may need\n            // more than one bill/coin to make change\n            while (change >= (decimal)20.0)\n            {\n                // subtract denomination value from __change__\n                change -= (decimal)20.0;\n                // add one bill/coin for each subtraction\n                twenties += 1;\n            }\n            while (change >= (decimal)10.0)\n            {\n                change -= (decimal)10.0;\n                tens += 1;\n            }\n            while (change >= (decimal)5.0)\n            {\n                change -= (decimal)5.0;\n                fives += 1;\n            }\n            while (change >= (decimal)1.0)\n            {\n                change -= (decimal)1.0;\n                ones += 1;\n            }\n            while (change >= (decimal)0.25)\n            {\n                change -= (decimal)0.25;\n                quarters += 1;\n            }\n            while (change >= (decimal)0.1)\n            {\n                change -= (decimal)0.1;\n                dimes += 1;\n            }\n            while (change >= (decimal)0.05)\n            {\n                change -= (decimal)0.05;\n                nickels += 1;\n            }\n            while (change >= (decimal)0.01)\n            {\n                change -= (decimal)0.01;\n                pennies += 1;\n            }\n\n            // declaring string that we will print out to display results to user\n            // message will tell the user __totalChange__ and all the change denominations\n            string outMessage = $\"Your change is ${ totalChange} which amounts to\";\n\n            // invoking function once per denomination\n            outMessage = updateOutMessage(outMessage, twenties, \"twenty\");\n            outMessage = updateOutMessage(outMessage, tens, \"ten\");\n            outMessage = updateOutMessage(outMessage, fives, \"five\");\n            outMessage = updateOutMessage(outMessage, ones, \"one\");\n            outMessage = updateOutMessage(outMessage, quarters, \"quarter\");\n            outMessage = updateOutMessage(outMessage, dimes, \"dime\");\n            outMessage = updateOutMessage(outMessage, nickels, \"nickel\");\n            outMessage = updateOutMessage(outMessage, pennies, \"penny\");\n            outMessage += \". That's amazing.\";\n\n            // print out all of our hard work to share with the world\n            // and make it a better place for you and for me <3\n            Console.WriteLine(outMessage);\n\n            //Console.WriteLine( {twenties} twenties, {tens} tens, {fives} fives {ones} ones {quarters} quarters {dimes} dimes {nickels} nickels {pennies} pennies!\");\n        }\n\n        // implemented around line 140\n        // has 3 ARGUMENTS (parameters, inputs)...\n        // __outMessage__ is the message that we're modifying and we will return (modified)\n        // __count__ is the number of units of each denomination (that we calculate previously)\n        // __denomination__ is the name of the units (singular not plural)\n        static string updateOutMessage(string outMessage, int count, string denomination)\n        {\n            // if there's only one coin or bill\n            if (count == 1)\n            {\n                // the nouns stays singular and we add that info to the message\n                outMessage += $\" 1 {denomination},\";\n            }\n            // if there's more than one coin or bill\n            else if (count > 1)\n            {\n                // we add different information to the message (including coin/bill count)\n                // apply gramar\n                // rewriting plural denomination because English is hard\n                outMessage += $\" {count} {denomination.Replace(\"y\", \"ie\")}s,\";\n            }\n            // if there are no units of that denomination, make no changes to the message\n\n            // return the modified (or unmodified) message\n            return outMessage;\n        }\n    }\n}\n\n```",
            "mimetype": "text/plain"
          },
          {
            "body": "<pre><code>using System;\n\nnamespace CashRegister\n{\n    class Program\n    {\n        // ======== PROMPT ========\n        // Create a cash register application that will\n        // Take in a cost of goods sold and cash given\n        // and will return the change to be given and\n        // the appropriate bills and coins to give\n\n        // ex:\n        // How much did it cost?\n        // 3.43\n        // How much did they pay?\n        // 10\n        // They get 6.57 in change\n        // 1 five, 1 one, 2 quarters, 1 nickel, 2 pennies\n\n        // ---- Variables required:\n        // howMuchDidItCost, howMuchDidTheyPay, change, coinAmounts, changeString???\n        // ---- Variable types\n        // Double it all\n        //\n        // ===== Get inputs =====\n        // Ask for amount owed\n        // Receive cost from user\n        // Ask for amount paid\n        // Receive amount paid\n\n        // ===== Do Maff =====\n\n\n        // this is a function that asks for a currency amounts (in decimals)?\n        static decimal GetUserDecimal(string askType)\n        {\n            // ask the user for what we want\n            Console.WriteLine($&quot;What was the {askType}? (dollas &amp; censs plz)&quot;);\n            // get the input from the user and converts it\n            decimal amount = Convert.ToDecimal(Console.ReadLine());\n            // returns a decimal from the user input\n            return amount;\n        }\n\n        static void Main(string[] args)\n        {\n            // use our function to get money inputs from the user\n            decimal cost = GetUserDecimal(&quot;cost&quot;);\n            decimal paid = GetUserDecimal(&quot;paid&quot;);\n\n            // find the change from the difference and assign to __change__\n            // __change__ will be modified\n            decimal change = paid - cost;\n\n            // our initial difference is saved for later\n            // we want to tell the user what the total is\n            // but we will alter __change__ during the rest of the code\n            // so we have to save it\n            decimal totalChange = change;\n\n            // declaring variables for our denominations\n            // bills and coins\n            int twenties = 0;\n            int tens = 0;\n            int fives = 0;\n            int ones = 0;\n            int quarters = 0;\n            int dimes = 0;\n            int nickels = 0;\n            int pennies = 0;\n\n            // THESE ARE JUST REMINDERS (to-do list)\n            // loooOOOOOoo000op\n            // modulo?\n            // RomanNumeralzzzz?\n            // wwwwwwwhhhillllee\n            // $0.60 - $0.25 = $0.35\n            // $0.35 - $0.25 = $0.10\n            // ohh no funkshuns!\n\n            // error checking\n            // make sure amount paid &gt; price\n\n            // do cute stuff with arrays and loopz\n\n\n            // breaking __change__ down into currency (denominations)\n            // __change__ is being modified\n            // while the remaining change is greater than the denomination's value\n            // we are removing that value\n\n            // use while-loop instead of if-block because we may need\n            // more than one bill/coin to make change\n            while (change &gt;= (decimal)20.0)\n            {\n                // subtract denomination value from __change__\n                change -= (decimal)20.0;\n                // add one bill/coin for each subtraction\n                twenties += 1;\n            }\n            while (change &gt;= (decimal)10.0)\n            {\n                change -= (decimal)10.0;\n                tens += 1;\n            }\n            while (change &gt;= (decimal)5.0)\n            {\n                change -= (decimal)5.0;\n                fives += 1;\n            }\n            while (change &gt;= (decimal)1.0)\n            {\n                change -= (decimal)1.0;\n                ones += 1;\n            }\n            while (change &gt;= (decimal)0.25)\n            {\n                change -= (decimal)0.25;\n                quarters += 1;\n            }\n            while (change &gt;= (decimal)0.1)\n            {\n                change -= (decimal)0.1;\n                dimes += 1;\n            }\n            while (change &gt;= (decimal)0.05)\n            {\n                change -= (decimal)0.05;\n                nickels += 1;\n            }\n            while (change &gt;= (decimal)0.01)\n            {\n                change -= (decimal)0.01;\n                pennies += 1;\n            }\n\n            // declaring string that we will print out to display results to user\n            // message will tell the user __totalChange__ and all the change denominations\n            string outMessage = $&quot;Your change is ${ totalChange} which amounts to&quot;;\n\n            // invoking function once per denomination\n            outMessage = updateOutMessage(outMessage, twenties, &quot;twenty&quot;);\n            outMessage = updateOutMessage(outMessage, tens, &quot;ten&quot;);\n            outMessage = updateOutMessage(outMessage, fives, &quot;five&quot;);\n            outMessage = updateOutMessage(outMessage, ones, &quot;one&quot;);\n            outMessage = updateOutMessage(outMessage, quarters, &quot;quarter&quot;);\n            outMessage = updateOutMessage(outMessage, dimes, &quot;dime&quot;);\n            outMessage = updateOutMessage(outMessage, nickels, &quot;nickel&quot;);\n            outMessage = updateOutMessage(outMessage, pennies, &quot;penny&quot;);\n            outMessage += &quot;. That's amazing.&quot;;\n\n            // print out all of our hard work to share with the world\n            // and make it a better place for you and for me &lt;3\n            Console.WriteLine(outMessage);\n\n            //Console.WriteLine( {twenties} twenties, {tens} tens, {fives} fives {ones} ones {quarters} quarters {dimes} dimes {nickels} nickels {pennies} pennies!&quot;);\n        }\n\n        // implemented around line 140\n        // has 3 ARGUMENTS (parameters, inputs)...\n        // __outMessage__ is the message that we're modifying and we will return (modified)\n        // __count__ is the number of units of each denomination (that we calculate previously)\n        // __denomination__ is the name of the units (singular not plural)\n        static string updateOutMessage(string outMessage, int count, string denomination)\n        {\n            // if there's only one coin or bill\n            if (count == 1)\n            {\n                // the nouns stays singular and we add that info to the message\n                outMessage += $&quot; 1 {denomination},&quot;;\n            }\n            // if there's more than one coin or bill\n            else if (count &gt; 1)\n            {\n                // we add different information to the message (including coin/bill count)\n                // apply gramar\n                // rewriting plural denomination because English is hard\n                outMessage += $&quot; {count} {denomination.Replace(&quot;y&quot;, &quot;ie&quot;)}s,&quot;;\n            }\n            // if there are no units of that denomination, make no changes to the message\n\n            // return the modified (or unmodified) message\n            return outMessage;\n        }\n    }\n}\n\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "```\nusing System;\n\nnamespace CashRegister\n{\n    class Program\n    {\n        // ======== PROMPT ========\n        // Create a cash register application that will\n        // Take in a cost of goods sold and cash given\n        // and will return the change to be given and\n        // the appropriate bills and coins to give\n\n        // ex:\n        // How much did it cost?\n        // 3.43\n        // How much did they pay?\n        // 10\n        // They get 6.57 in change\n        // 1 five, 1 one, 2 quarters, 1 nickel, 2 pennies\n\n        // ---- Variables required:\n        // howMuchDidItCost, howMuchDidTheyPay, change, coinAmounts, changeString???\n        // ---- Variable types\n        // Double it all\n        //\n        // ===== Get inputs =====\n        // Ask for amount owed\n        // Receive cost from user\n        // Ask for amount paid\n        // Receive amount paid\n\n        // ===== Do Maff =====\n\n\n        // this is a function that asks for a currency amounts (in decimals)?\n        static decimal GetUserDecimal(string askType)\n        {\n            // ask the user for what we want\n            Console.WriteLine($\"What was the {askType}? (dollas & censs plz)\");\n            // get the input from the user and converts it\n            decimal amount = Convert.ToDecimal(Console.ReadLine());\n            // returns a decimal from the user input\n            return amount;\n        }\n\n        static void Main(string[] args)\n        {\n            // use our function to get money inputs from the user\n            decimal cost = GetUserDecimal(\"cost\");\n            decimal paid = GetUserDecimal(\"paid\");\n\n            // find the change from the difference and assign to __change__\n            // __change__ will be modified\n            decimal change = paid - cost;\n\n            // our initial difference is saved for later\n            // we want to tell the user what the total is\n            // but we will alter __change__ during the rest of the code\n            // so we have to save it\n            decimal totalChange = change;\n\n            // declaring variables for our denominations\n            // bills and coins\n            int twenties = 0;\n            int tens = 0;\n            int fives = 0;\n            int ones = 0;\n            int quarters = 0;\n            int dimes = 0;\n            int nickels = 0;\n            int pennies = 0;\n\n            // THESE ARE JUST REMINDERS (to-do list)\n            // loooOOOOOoo000op\n            // modulo?\n            // RomanNumeralzzzz?\n            // wwwwwwwhhhillllee\n            // $0.60 - $0.25 = $0.35\n            // $0.35 - $0.25 = $0.10\n            // ohh no funkshuns!\n\n            // error checking\n            // make sure amount paid > price\n\n            // do cute stuff with arrays and loopz\n\n\n            // breaking __change__ down into currency (denominations)\n            // __change__ is being modified\n            // while the remaining change is greater than the denomination's value\n            // we are removing that value\n\n            // use while-loop instead of if-block because we may need\n            // more than one bill/coin to make change\n            while (change >= (decimal)20.0)\n            {\n                // subtract denomination value from __change__\n                change -= (decimal)20.0;\n                // add one bill/coin for each subtraction\n                twenties += 1;\n            }\n            while (change >= (decimal)10.0)\n            {\n                change -= (decimal)10.0;\n                tens += 1;\n            }\n            while (change >= (decimal)5.0)\n            {\n                change -= (decimal)5.0;\n                fives += 1;\n            }\n            while (change >= (decimal)1.0)\n            {\n                change -= (decimal)1.0;\n                ones += 1;\n            }\n            while (change >= (decimal)0.25)\n            {\n                change -= (decimal)0.25;\n                quarters += 1;\n            }\n            while (change >= (decimal)0.1)\n            {\n                change -= (decimal)0.1;\n                dimes += 1;\n            }\n            while (change >= (decimal)0.05)\n            {\n                change -= (decimal)0.05;\n                nickels += 1;\n            }\n            while (change >= (decimal)0.01)\n            {\n                change -= (decimal)0.01;\n                pennies += 1;\n            }\n\n            // declaring string that we will print out to display results to user\n            // message will tell the user __totalChange__ and all the change denominations\n            string outMessage = $\"Your change is ${ totalChange} which amounts to\";\n\n            // invoking function once per denomination\n            outMessage = updateOutMessage(outMessage, twenties, \"twenty\");\n            outMessage = updateOutMessage(outMessage, tens, \"ten\");\n            outMessage = updateOutMessage(outMessage, fives, \"five\");\n            outMessage = updateOutMessage(outMessage, ones, \"one\");\n            outMessage = updateOutMessage(outMessage, quarters, \"quarter\");\n            outMessage = updateOutMessage(outMessage, dimes, \"dime\");\n            outMessage = updateOutMessage(outMessage, nickels, \"nickel\");\n            outMessage = updateOutMessage(outMessage, pennies, \"penny\");\n            outMessage += \". That's amazing.\";\n\n            // print out all of our hard work to share with the world\n            // and make it a better place for you and for me <3\n            Console.WriteLine(outMessage);\n\n            //Console.WriteLine( {twenties} twenties, {tens} tens, {fives} fives {ones} ones {quarters} quarters {dimes} dimes {nickels} nickels {pennies} pennies!\");\n        }\n\n        // implemented around line 140\n        // has 3 ARGUMENTS (parameters, inputs)...\n        // __outMessage__ is the message that we're modifying and we will return (modified)\n        // __count__ is the number of units of each denomination (that we calculate previously)\n        // __denomination__ is the name of the units (singular not plural)\n        static string updateOutMessage(string outMessage, int count, string denomination)\n        {\n            // if there's only one coin or bill\n            if (count == 1)\n            {\n                // the nouns stays singular and we add that info to the message\n                outMessage += $\" 1 {denomination},\";\n            }\n            // if there's more than one coin or bill\n            else if (count > 1)\n            {\n                // we add different information to the message (including coin/bill count)\n                // apply gramar\n                // rewriting plural denomination because English is hard\n                outMessage += $\" {count} {denomination.Replace(\"y\", \"ie\")}s,\";\n            }\n            // if there are no units of that denomination, make no changes to the message\n\n            // return the modified (or unmodified) message\n            return outMessage;\n        }\n    }\n}\n\n```",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<pre><code>using System;\n\nnamespace CashRegister\n{\n    class Program\n    {\n        // ======== PROMPT ========\n        // Create a cash register application that will\n        // Take in a cost of goods sold and cash given\n        // and will return the change to be given and\n        // the appropriate bills and coins to give\n\n        // ex:\n        // How much did it cost?\n        // 3.43\n        // How much did they pay?\n        // 10\n        // They get 6.57 in change\n        // 1 five, 1 one, 2 quarters, 1 nickel, 2 pennies\n\n        // ---- Variables required:\n        // howMuchDidItCost, howMuchDidTheyPay, change, coinAmounts, changeString???\n        // ---- Variable types\n        // Double it all\n        //\n        // ===== Get inputs =====\n        // Ask for amount owed\n        // Receive cost from user\n        // Ask for amount paid\n        // Receive amount paid\n\n        // ===== Do Maff =====\n\n\n        // this is a function that asks for a currency amounts (in decimals)?\n        static decimal GetUserDecimal(string askType)\n        {\n            // ask the user for what we want\n            Console.WriteLine($&quot;What was the {askType}? (dollas &amp; censs plz)&quot;);\n            // get the input from the user and converts it\n            decimal amount = Convert.ToDecimal(Console.ReadLine());\n            // returns a decimal from the user input\n            return amount;\n        }\n\n        static void Main(string[] args)\n        {\n            // use our function to get money inputs from the user\n            decimal cost = GetUserDecimal(&quot;cost&quot;);\n            decimal paid = GetUserDecimal(&quot;paid&quot;);\n\n            // find the change from the difference and assign to __change__\n            // __change__ will be modified\n            decimal change = paid - cost;\n\n            // our initial difference is saved for later\n            // we want to tell the user what the total is\n            // but we will alter __change__ during the rest of the code\n            // so we have to save it\n            decimal totalChange = change;\n\n            // declaring variables for our denominations\n            // bills and coins\n            int twenties = 0;\n            int tens = 0;\n            int fives = 0;\n            int ones = 0;\n            int quarters = 0;\n            int dimes = 0;\n            int nickels = 0;\n            int pennies = 0;\n\n            // THESE ARE JUST REMINDERS (to-do list)\n            // loooOOOOOoo000op\n            // modulo?\n            // RomanNumeralzzzz?\n            // wwwwwwwhhhillllee\n            // $0.60 - $0.25 = $0.35\n            // $0.35 - $0.25 = $0.10\n            // ohh no funkshuns!\n\n            // error checking\n            // make sure amount paid &gt; price\n\n            // do cute stuff with arrays and loopz\n\n\n            // breaking __change__ down into currency (denominations)\n            // __change__ is being modified\n            // while the remaining change is greater than the denomination's value\n            // we are removing that value\n\n            // use while-loop instead of if-block because we may need\n            // more than one bill/coin to make change\n            while (change &gt;= (decimal)20.0)\n            {\n                // subtract denomination value from __change__\n                change -= (decimal)20.0;\n                // add one bill/coin for each subtraction\n                twenties += 1;\n            }\n            while (change &gt;= (decimal)10.0)\n            {\n                change -= (decimal)10.0;\n                tens += 1;\n            }\n            while (change &gt;= (decimal)5.0)\n            {\n                change -= (decimal)5.0;\n                fives += 1;\n            }\n            while (change &gt;= (decimal)1.0)\n            {\n                change -= (decimal)1.0;\n                ones += 1;\n            }\n            while (change &gt;= (decimal)0.25)\n            {\n                change -= (decimal)0.25;\n                quarters += 1;\n            }\n            while (change &gt;= (decimal)0.1)\n            {\n                change -= (decimal)0.1;\n                dimes += 1;\n            }\n            while (change &gt;= (decimal)0.05)\n            {\n                change -= (decimal)0.05;\n                nickels += 1;\n            }\n            while (change &gt;= (decimal)0.01)\n            {\n                change -= (decimal)0.01;\n                pennies += 1;\n            }\n\n            // declaring string that we will print out to display results to user\n            // message will tell the user __totalChange__ and all the change denominations\n            string outMessage = $&quot;Your change is ${ totalChange} which amounts to&quot;;\n\n            // invoking function once per denomination\n            outMessage = updateOutMessage(outMessage, twenties, &quot;twenty&quot;);\n            outMessage = updateOutMessage(outMessage, tens, &quot;ten&quot;);\n            outMessage = updateOutMessage(outMessage, fives, &quot;five&quot;);\n            outMessage = updateOutMessage(outMessage, ones, &quot;one&quot;);\n            outMessage = updateOutMessage(outMessage, quarters, &quot;quarter&quot;);\n            outMessage = updateOutMessage(outMessage, dimes, &quot;dime&quot;);\n            outMessage = updateOutMessage(outMessage, nickels, &quot;nickel&quot;);\n            outMessage = updateOutMessage(outMessage, pennies, &quot;penny&quot;);\n            outMessage += &quot;. That's amazing.&quot;;\n\n            // print out all of our hard work to share with the world\n            // and make it a better place for you and for me &lt;3\n            Console.WriteLine(outMessage);\n\n            //Console.WriteLine( {twenties} twenties, {tens} tens, {fives} fives {ones} ones {quarters} quarters {dimes} dimes {nickels} nickels {pennies} pennies!&quot;);\n        }\n\n        // implemented around line 140\n        // has 3 ARGUMENTS (parameters, inputs)...\n        // __outMessage__ is the message that we're modifying and we will return (modified)\n        // __count__ is the number of units of each denomination (that we calculate previously)\n        // __denomination__ is the name of the units (singular not plural)\n        static string updateOutMessage(string outMessage, int count, string denomination)\n        {\n            // if there's only one coin or bill\n            if (count == 1)\n            {\n                // the nouns stays singular and we add that info to the message\n                outMessage += $&quot; 1 {denomination},&quot;;\n            }\n            // if there's more than one coin or bill\n            else if (count &gt; 1)\n            {\n                // we add different information to the message (including coin/bill count)\n                // apply gramar\n                // rewriting plural denomination because English is hard\n                outMessage += $&quot; {count} {denomination.Replace(&quot;y&quot;, &quot;ie&quot;)}s,&quot;;\n            }\n            // if there are no units of that denomination, make no changes to the message\n\n            // return the modified (or unmodified) message\n            return outMessage;\n        }\n    }\n}\n\n</code></pre>\n"
      },
      "event_id": "$1649705400256OyGDv:matrix.workhardpgh.com",
      "origin_server_ts": 1649705400386,
      "unsigned": {
        "age": 510328698,
        "m.relations": {
          "m.replace": {
            "event_id": "$1649708166264dlUxu:matrix.workhardpgh.com",
            "origin_server_ts": 1649708166678,
            "sender": "@taslater:matrix.workhardpgh.com"
          }
        }
      },
      "user_id": "@taslater:matrix.workhardpgh.com",
      "age": 510245335
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@joewalker147:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "```\nusing System;\n\nnamespace project_next\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Create a cash register application that will\n            // Take in a cost of goods sold and cash given\n            // and will return the change to be given and\n            // the appropriate bills and coins to give\n\n            // ex:\n            // How much did it cost?\n            // 3.43\n            // How much did they pay?\n            // 10\n            // They get 6.57 in change\n            // 1 five, 1 one, 2 quarters, 1 nickel, 2 pennies\n\n\n\n            //===Ask user how much their groceries cost\n            Console.WriteLine(\"How much did your goods cost?\");\n            double costtoinput = Convert.ToDouble(Console.ReadLine());\n            int cost = Convert.ToInt32(costtoinput * 100);\n\n            //===Ask user the amount the are paying with\n            Console.WriteLine(\"What is the total amount you are paying with?\");\n            double paymenttoinput = Convert.ToDouble(Console.ReadLine());\n            int payment = Convert.ToInt32(paymenttoinput * 100);\n\n            //===figure out the change\n            int change = (payment - cost);\n            double showchange = Convert.ToDouble(change / 100.0);\n            Console.WriteLine(\"your change is \" + showchange);\n\n            //===break down change into various denominations\n            int[] breakdown = new int[8];\n\n            while (change >= 2000)\n            {\n                change = change - 2000;\n                breakdown[0] = breakdown[0] + 1;\n            }\n            if (change >= 1000)\n            {\n                change = change - 1000;\n                breakdown[1] = breakdown[1] + 1;\n            }\n            if (change >= 500)\n            {\n                change = change - 500;\n                breakdown[2] = breakdown[2] + 1;\n            }\n            while (change >= 100)\n            {\n                change = change - 100;\n                breakdown[3] = breakdown[3] + 1;\n            }\n            while (change >= 25)\n            {\n                change = change - 25;\n                breakdown[4] = breakdown[4] + 1;\n            }\n            while (change >= 10)\n            {\n                change = change - 10;\n                breakdown[5] = breakdown[5] + 1;\n            }\n            if (change >= 5)\n            {\n                change = change - 5;\n                breakdown[6] = breakdown[6] + 1;\n            }\n            while (change >= 1)\n            {\n                change = change - 1;\n                breakdown[7] = breakdown[7] + 1;\n            }\n\n            Console.WriteLine(\"The change you will be receiving is:\");\n            string[] bills = { \": 20 dollar bill(s)\", \": 10 dollar bill(s)\", \": 5 dollar bill(s)\", \": 1 dollar bill(s)\", \" Quarter(s)\", \" Dime(s)\", \" Nickel(s)\", \" Pennie(s)\" };\n\n            for (int i  = 0; i < 8; i++)\n            {\n                if (breakdown[i] > 0)\n                {\n                Console.Write(breakdown[i]+bills[i]+\", \");\n                }\n                //Console.WriteLine();\n\n            }\n        }\n    }\n}\n\n```",
            "mimetype": "text/plain"
          },
          {
            "body": "<pre><code>using System;\n\nnamespace project_next\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Create a cash register application that will\n            // Take in a cost of goods sold and cash given\n            // and will return the change to be given and\n            // the appropriate bills and coins to give\n\n            // ex:\n            // How much did it cost?\n            // 3.43\n            // How much did they pay?\n            // 10\n            // They get 6.57 in change\n            // 1 five, 1 one, 2 quarters, 1 nickel, 2 pennies\n\n\n\n            //===Ask user how much their groceries cost\n            Console.WriteLine(&quot;How much did your goods cost?&quot;);\n            double costtoinput = Convert.ToDouble(Console.ReadLine());\n            int cost = Convert.ToInt32(costtoinput * 100);\n\n            //===Ask user the amount the are paying with\n            Console.WriteLine(&quot;What is the total amount you are paying with?&quot;);\n            double paymenttoinput = Convert.ToDouble(Console.ReadLine());\n            int payment = Convert.ToInt32(paymenttoinput * 100);\n\n            //===figure out the change\n            int change = (payment - cost);\n            double showchange = Convert.ToDouble(change / 100.0);\n            Console.WriteLine(&quot;your change is &quot; + showchange);\n\n            //===break down change into various denominations\n            int[] breakdown = new int[8];\n\n            while (change &gt;= 2000)\n            {\n                change = change - 2000;\n                breakdown[0] = breakdown[0] + 1;\n            }\n            if (change &gt;= 1000)\n            {\n                change = change - 1000;\n                breakdown[1] = breakdown[1] + 1;\n            }\n            if (change &gt;= 500)\n            {\n                change = change - 500;\n                breakdown[2] = breakdown[2] + 1;\n            }\n            while (change &gt;= 100)\n            {\n                change = change - 100;\n                breakdown[3] = breakdown[3] + 1;\n            }\n            while (change &gt;= 25)\n            {\n                change = change - 25;\n                breakdown[4] = breakdown[4] + 1;\n            }\n            while (change &gt;= 10)\n            {\n                change = change - 10;\n                breakdown[5] = breakdown[5] + 1;\n            }\n            if (change &gt;= 5)\n            {\n                change = change - 5;\n                breakdown[6] = breakdown[6] + 1;\n            }\n            while (change &gt;= 1)\n            {\n                change = change - 1;\n                breakdown[7] = breakdown[7] + 1;\n            }\n\n            Console.WriteLine(&quot;The change you will be receiving is:&quot;);\n            string[] bills = { &quot;: 20 dollar bill(s)&quot;, &quot;: 10 dollar bill(s)&quot;, &quot;: 5 dollar bill(s)&quot;, &quot;: 1 dollar bill(s)&quot;, &quot; Quarter(s)&quot;, &quot; Dime(s)&quot;, &quot; Nickel(s)&quot;, &quot; Pennie(s)&quot; };\n\n            for (int i  = 0; i &lt; 8; i++)\n            {\n                if (breakdown[i] &gt; 0)\n                {\n                Console.Write(breakdown[i]+bills[i]+&quot;, &quot;);\n                }\n                //Console.WriteLine();\n\n            }\n        }\n    }\n}\n\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "```\nusing System;\n\nnamespace project_next\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Create a cash register application that will\n            // Take in a cost of goods sold and cash given\n            // and will return the change to be given and\n            // the appropriate bills and coins to give\n\n            // ex:\n            // How much did it cost?\n            // 3.43\n            // How much did they pay?\n            // 10\n            // They get 6.57 in change\n            // 1 five, 1 one, 2 quarters, 1 nickel, 2 pennies\n\n\n\n            //===Ask user how much their groceries cost\n            Console.WriteLine(\"How much did your goods cost?\");\n            double costtoinput = Convert.ToDouble(Console.ReadLine());\n            int cost = Convert.ToInt32(costtoinput * 100);\n\n            //===Ask user the amount the are paying with\n            Console.WriteLine(\"What is the total amount you are paying with?\");\n            double paymenttoinput = Convert.ToDouble(Console.ReadLine());\n            int payment = Convert.ToInt32(paymenttoinput * 100);\n\n            //===figure out the change\n            int change = (payment - cost);\n            double showchange = Convert.ToDouble(change / 100.0);\n            Console.WriteLine(\"your change is \" + showchange);\n\n            //===break down change into various denominations\n            int[] breakdown = new int[8];\n\n            while (change >= 2000)\n            {\n                change = change - 2000;\n                breakdown[0] = breakdown[0] + 1;\n            }\n            if (change >= 1000)\n            {\n                change = change - 1000;\n                breakdown[1] = breakdown[1] + 1;\n            }\n            if (change >= 500)\n            {\n                change = change - 500;\n                breakdown[2] = breakdown[2] + 1;\n            }\n            while (change >= 100)\n            {\n                change = change - 100;\n                breakdown[3] = breakdown[3] + 1;\n            }\n            while (change >= 25)\n            {\n                change = change - 25;\n                breakdown[4] = breakdown[4] + 1;\n            }\n            while (change >= 10)\n            {\n                change = change - 10;\n                breakdown[5] = breakdown[5] + 1;\n            }\n            if (change >= 5)\n            {\n                change = change - 5;\n                breakdown[6] = breakdown[6] + 1;\n            }\n            while (change >= 1)\n            {\n                change = change - 1;\n                breakdown[7] = breakdown[7] + 1;\n            }\n\n            Console.WriteLine(\"The change you will be receiving is:\");\n            string[] bills = { \": 20 dollar bill(s)\", \": 10 dollar bill(s)\", \": 5 dollar bill(s)\", \": 1 dollar bill(s)\", \" Quarter(s)\", \" Dime(s)\", \" Nickel(s)\", \" Pennie(s)\" };\n\n            for (int i  = 0; i < 8; i++)\n            {\n                if (breakdown[i] > 0)\n                {\n                Console.Write(breakdown[i]+bills[i]+\", \");\n                }\n                //Console.WriteLine();\n\n            }\n        }\n    }\n}\n\n```",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<pre><code>using System;\n\nnamespace project_next\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Create a cash register application that will\n            // Take in a cost of goods sold and cash given\n            // and will return the change to be given and\n            // the appropriate bills and coins to give\n\n            // ex:\n            // How much did it cost?\n            // 3.43\n            // How much did they pay?\n            // 10\n            // They get 6.57 in change\n            // 1 five, 1 one, 2 quarters, 1 nickel, 2 pennies\n\n\n\n            //===Ask user how much their groceries cost\n            Console.WriteLine(&quot;How much did your goods cost?&quot;);\n            double costtoinput = Convert.ToDouble(Console.ReadLine());\n            int cost = Convert.ToInt32(costtoinput * 100);\n\n            //===Ask user the amount the are paying with\n            Console.WriteLine(&quot;What is the total amount you are paying with?&quot;);\n            double paymenttoinput = Convert.ToDouble(Console.ReadLine());\n            int payment = Convert.ToInt32(paymenttoinput * 100);\n\n            //===figure out the change\n            int change = (payment - cost);\n            double showchange = Convert.ToDouble(change / 100.0);\n            Console.WriteLine(&quot;your change is &quot; + showchange);\n\n            //===break down change into various denominations\n            int[] breakdown = new int[8];\n\n            while (change &gt;= 2000)\n            {\n                change = change - 2000;\n                breakdown[0] = breakdown[0] + 1;\n            }\n            if (change &gt;= 1000)\n            {\n                change = change - 1000;\n                breakdown[1] = breakdown[1] + 1;\n            }\n            if (change &gt;= 500)\n            {\n                change = change - 500;\n                breakdown[2] = breakdown[2] + 1;\n            }\n            while (change &gt;= 100)\n            {\n                change = change - 100;\n                breakdown[3] = breakdown[3] + 1;\n            }\n            while (change &gt;= 25)\n            {\n                change = change - 25;\n                breakdown[4] = breakdown[4] + 1;\n            }\n            while (change &gt;= 10)\n            {\n                change = change - 10;\n                breakdown[5] = breakdown[5] + 1;\n            }\n            if (change &gt;= 5)\n            {\n                change = change - 5;\n                breakdown[6] = breakdown[6] + 1;\n            }\n            while (change &gt;= 1)\n            {\n                change = change - 1;\n                breakdown[7] = breakdown[7] + 1;\n            }\n\n            Console.WriteLine(&quot;The change you will be receiving is:&quot;);\n            string[] bills = { &quot;: 20 dollar bill(s)&quot;, &quot;: 10 dollar bill(s)&quot;, &quot;: 5 dollar bill(s)&quot;, &quot;: 1 dollar bill(s)&quot;, &quot; Quarter(s)&quot;, &quot; Dime(s)&quot;, &quot; Nickel(s)&quot;, &quot; Pennie(s)&quot; };\n\n            for (int i  = 0; i &lt; 8; i++)\n            {\n                if (breakdown[i] &gt; 0)\n                {\n                Console.Write(breakdown[i]+bills[i]+&quot;, &quot;);\n                }\n                //Console.WriteLine();\n\n            }\n        }\n    }\n}\n\n</code></pre>\n"
      },
      "event_id": "$1649705937257vZwrf:matrix.workhardpgh.com",
      "origin_server_ts": 1649705937695,
      "unsigned": {
        "age": 509791389
      },
      "user_id": "@joewalker147:matrix.workhardpgh.com",
      "age": 509708026
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@alex_vanlan:matrix.workhardpgh.com",
      "content": {
        "body": "Fun bonus question: how would you write the code so that it returns a randomized, but correct, denominations of change? ",
        "format": "org.matrix.custom.html",
        "msgtype": "m.text",
        "formatted_body": "Fun bonus question: how would you write the code so that it returns a randomized, but correct, denominations of change?"
      },
      "event_id": "$1649706041258GgjsA:matrix.workhardpgh.com",
      "origin_server_ts": 1649706041844,
      "unsigned": {
        "age": 509687240
      },
      "user_id": "@alex_vanlan:matrix.workhardpgh.com",
      "age": 509602712
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@alex_vanlan:matrix.workhardpgh.com",
      "content": {
        "body": "Either something like $34.37 “your change is 2 $17 bills, 3 $12.50 bills, 24¢ coin and a 13¢ coin” OR “1 $10 bill, 4 $5 bills, 2 $1, 7 quarters, 3 dimes, 5 nickels, and 7 pennies” ",
        "format": "org.matrix.custom.html",
        "msgtype": "m.text",
        "formatted_body": "Either something like $34.37 “your change is 2 $17 bills, 3 $12.50 bills, 24¢ coin and a 13¢ coin” OR “1 $10 bill, 4 $5 bills, 2 $1, 7 quarters, 3 dimes, 5 nickels, and 7 pennies”"
      },
      "event_id": "$1649706568259Pccbt:matrix.workhardpgh.com",
      "origin_server_ts": 1649706568727,
      "unsigned": {
        "age": 509160357
      },
      "user_id": "@alex_vanlan:matrix.workhardpgh.com",
      "age": 509075829
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@onoyemi:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "```\nusing System;\n\nnamespace Cash_Register\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Create a cash register application that will\n            // Take in a cost of goods sold and cash given\n            // and will return the change to be given and\n            // the appropriate bills and coins to give\n\n            Console.WriteLine(\"How much did it cost?\");\n            decimal cost = Convert.ToDecimal(Console.ReadLine());\n\n            Console.WriteLine(\"How much did you pay?\");\n            decimal payment = Convert.ToDecimal(Console.ReadLine());\n\n            decimal change = (payment - cost);\n            Console.WriteLine(\"Change dispensed is \" + change);\n\n            if (change >= 100)\n            {\n                int hundreds = (int)Math.Floor(change / 100);\n                Console.WriteLine(\"Hundreds = \" + hundreds);\n                change = change - hundreds * 100;\n                Console.WriteLine(change);\n            }\n            if (change <= 99)\n                {\n                int twenties = (int)Math.Floor(change / 20);\n                Console.WriteLine(\"Twenties = \" + twenties);\n                change = change - twenties * 20;\n                Console.WriteLine(change);\n                }\n            if (change <= 20)\n            {\n                int tens = (int)Math.Floor(change / 10);\n                Console.WriteLine(\"Tens = \" + tens);\n                change = change - tens * 10;\n                Console.WriteLine(change);\n            }\n            if (change <= 10)\n            {\n                int fives = (int)Math.Floor(change / 5);\n                Console.WriteLine(\"Fives = \" + fives);\n                change = change - fives * 5;\n                Console.WriteLine(change);\n            }\n            if (change <= 5)\n            {\n                int ones = (int)Math.Floor(change / 1);\n                Console.WriteLine(\"Ones = \" + ones);\n                change = change - ones;\n                Console.WriteLine(change);\n            }\n            if (change < 1)\n            {\n                int quarters = (int)Math.Floor(change / (decimal).25);\n                Console.WriteLine(\"Quarters = \" + quarters);\n                change = change - quarters * (decimal)0.25;\n                Console.WriteLine(change);\n            }\n            if (change < (decimal)0.25)\n            {\n                int dimes = (int)Math.Floor(change / (decimal).1);\n                Console.WriteLine(\"Dimes = \" + dimes);\n                change = change - dimes * (decimal).1;\n                Console.WriteLine(change);\n            }\n            if (change < (decimal).1)\n            {\n                int nickels = (int)Math.Floor(change / (decimal).05);\n                Console.WriteLine(\"Nickels = \" + nickels);\n                change = change - nickels * (decimal).05;\n                Console.WriteLine(change);\n            }\n            if (change < (decimal).05)\n            {\n                int pennies = (int)Math.Floor(change / (decimal).01);\n                Console.WriteLine(\"Pennies = \" + pennies);\n                change = change - pennies * (decimal).01;\n                Console.WriteLine(change);\n            }\n        }\n    }\n}\n\n```",
            "mimetype": "text/plain"
          },
          {
            "body": "<pre><code>using System;\n\nnamespace Cash_Register\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Create a cash register application that will\n            // Take in a cost of goods sold and cash given\n            // and will return the change to be given and\n            // the appropriate bills and coins to give\n\n            Console.WriteLine(&quot;How much did it cost?&quot;);\n            decimal cost = Convert.ToDecimal(Console.ReadLine());\n\n            Console.WriteLine(&quot;How much did you pay?&quot;);\n            decimal payment = Convert.ToDecimal(Console.ReadLine());\n\n            decimal change = (payment - cost);\n            Console.WriteLine(&quot;Change dispensed is &quot; + change);\n\n            if (change &gt;= 100)\n            {\n                int hundreds = (int)Math.Floor(change / 100);\n                Console.WriteLine(&quot;Hundreds = &quot; + hundreds);\n                change = change - hundreds * 100;\n                Console.WriteLine(change);\n            }\n            if (change &lt;= 99)\n                {\n                int twenties = (int)Math.Floor(change / 20);\n                Console.WriteLine(&quot;Twenties = &quot; + twenties);\n                change = change - twenties * 20;\n                Console.WriteLine(change);\n                }\n            if (change &lt;= 20)\n            {\n                int tens = (int)Math.Floor(change / 10);\n                Console.WriteLine(&quot;Tens = &quot; + tens);\n                change = change - tens * 10;\n                Console.WriteLine(change);\n            }\n            if (change &lt;= 10)\n            {\n                int fives = (int)Math.Floor(change / 5);\n                Console.WriteLine(&quot;Fives = &quot; + fives);\n                change = change - fives * 5;\n                Console.WriteLine(change);\n            }\n            if (change &lt;= 5)\n            {\n                int ones = (int)Math.Floor(change / 1);\n                Console.WriteLine(&quot;Ones = &quot; + ones);\n                change = change - ones;\n                Console.WriteLine(change);\n            }\n            if (change &lt; 1)\n            {\n                int quarters = (int)Math.Floor(change / (decimal).25);\n                Console.WriteLine(&quot;Quarters = &quot; + quarters);\n                change = change - quarters * (decimal)0.25;\n                Console.WriteLine(change);\n            }\n            if (change &lt; (decimal)0.25)\n            {\n                int dimes = (int)Math.Floor(change / (decimal).1);\n                Console.WriteLine(&quot;Dimes = &quot; + dimes);\n                change = change - dimes * (decimal).1;\n                Console.WriteLine(change);\n            }\n            if (change &lt; (decimal).1)\n            {\n                int nickels = (int)Math.Floor(change / (decimal).05);\n                Console.WriteLine(&quot;Nickels = &quot; + nickels);\n                change = change - nickels * (decimal).05;\n                Console.WriteLine(change);\n            }\n            if (change &lt; (decimal).05)\n            {\n                int pennies = (int)Math.Floor(change / (decimal).01);\n                Console.WriteLine(&quot;Pennies = &quot; + pennies);\n                change = change - pennies * (decimal).01;\n                Console.WriteLine(change);\n            }\n        }\n    }\n}\n\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "```\nusing System;\n\nnamespace Cash_Register\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Create a cash register application that will\n            // Take in a cost of goods sold and cash given\n            // and will return the change to be given and\n            // the appropriate bills and coins to give\n\n            Console.WriteLine(\"How much did it cost?\");\n            decimal cost = Convert.ToDecimal(Console.ReadLine());\n\n            Console.WriteLine(\"How much did you pay?\");\n            decimal payment = Convert.ToDecimal(Console.ReadLine());\n\n            decimal change = (payment - cost);\n            Console.WriteLine(\"Change dispensed is \" + change);\n\n            if (change >= 100)\n            {\n                int hundreds = (int)Math.Floor(change / 100);\n                Console.WriteLine(\"Hundreds = \" + hundreds);\n                change = change - hundreds * 100;\n                Console.WriteLine(change);\n            }\n            if (change <= 99)\n                {\n                int twenties = (int)Math.Floor(change / 20);\n                Console.WriteLine(\"Twenties = \" + twenties);\n                change = change - twenties * 20;\n                Console.WriteLine(change);\n                }\n            if (change <= 20)\n            {\n                int tens = (int)Math.Floor(change / 10);\n                Console.WriteLine(\"Tens = \" + tens);\n                change = change - tens * 10;\n                Console.WriteLine(change);\n            }\n            if (change <= 10)\n            {\n                int fives = (int)Math.Floor(change / 5);\n                Console.WriteLine(\"Fives = \" + fives);\n                change = change - fives * 5;\n                Console.WriteLine(change);\n            }\n            if (change <= 5)\n            {\n                int ones = (int)Math.Floor(change / 1);\n                Console.WriteLine(\"Ones = \" + ones);\n                change = change - ones;\n                Console.WriteLine(change);\n            }\n            if (change < 1)\n            {\n                int quarters = (int)Math.Floor(change / (decimal).25);\n                Console.WriteLine(\"Quarters = \" + quarters);\n                change = change - quarters * (decimal)0.25;\n                Console.WriteLine(change);\n            }\n            if (change < (decimal)0.25)\n            {\n                int dimes = (int)Math.Floor(change / (decimal).1);\n                Console.WriteLine(\"Dimes = \" + dimes);\n                change = change - dimes * (decimal).1;\n                Console.WriteLine(change);\n            }\n            if (change < (decimal).1)\n            {\n                int nickels = (int)Math.Floor(change / (decimal).05);\n                Console.WriteLine(\"Nickels = \" + nickels);\n                change = change - nickels * (decimal).05;\n                Console.WriteLine(change);\n            }\n            if (change < (decimal).05)\n            {\n                int pennies = (int)Math.Floor(change / (decimal).01);\n                Console.WriteLine(\"Pennies = \" + pennies);\n                change = change - pennies * (decimal).01;\n                Console.WriteLine(change);\n            }\n        }\n    }\n}\n\n```",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<pre><code>using System;\n\nnamespace Cash_Register\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Create a cash register application that will\n            // Take in a cost of goods sold and cash given\n            // and will return the change to be given and\n            // the appropriate bills and coins to give\n\n            Console.WriteLine(&quot;How much did it cost?&quot;);\n            decimal cost = Convert.ToDecimal(Console.ReadLine());\n\n            Console.WriteLine(&quot;How much did you pay?&quot;);\n            decimal payment = Convert.ToDecimal(Console.ReadLine());\n\n            decimal change = (payment - cost);\n            Console.WriteLine(&quot;Change dispensed is &quot; + change);\n\n            if (change &gt;= 100)\n            {\n                int hundreds = (int)Math.Floor(change / 100);\n                Console.WriteLine(&quot;Hundreds = &quot; + hundreds);\n                change = change - hundreds * 100;\n                Console.WriteLine(change);\n            }\n            if (change &lt;= 99)\n                {\n                int twenties = (int)Math.Floor(change / 20);\n                Console.WriteLine(&quot;Twenties = &quot; + twenties);\n                change = change - twenties * 20;\n                Console.WriteLine(change);\n                }\n            if (change &lt;= 20)\n            {\n                int tens = (int)Math.Floor(change / 10);\n                Console.WriteLine(&quot;Tens = &quot; + tens);\n                change = change - tens * 10;\n                Console.WriteLine(change);\n            }\n            if (change &lt;= 10)\n            {\n                int fives = (int)Math.Floor(change / 5);\n                Console.WriteLine(&quot;Fives = &quot; + fives);\n                change = change - fives * 5;\n                Console.WriteLine(change);\n            }\n            if (change &lt;= 5)\n            {\n                int ones = (int)Math.Floor(change / 1);\n                Console.WriteLine(&quot;Ones = &quot; + ones);\n                change = change - ones;\n                Console.WriteLine(change);\n            }\n            if (change &lt; 1)\n            {\n                int quarters = (int)Math.Floor(change / (decimal).25);\n                Console.WriteLine(&quot;Quarters = &quot; + quarters);\n                change = change - quarters * (decimal)0.25;\n                Console.WriteLine(change);\n            }\n            if (change &lt; (decimal)0.25)\n            {\n                int dimes = (int)Math.Floor(change / (decimal).1);\n                Console.WriteLine(&quot;Dimes = &quot; + dimes);\n                change = change - dimes * (decimal).1;\n                Console.WriteLine(change);\n            }\n            if (change &lt; (decimal).1)\n            {\n                int nickels = (int)Math.Floor(change / (decimal).05);\n                Console.WriteLine(&quot;Nickels = &quot; + nickels);\n                change = change - nickels * (decimal).05;\n                Console.WriteLine(change);\n            }\n            if (change &lt; (decimal).05)\n            {\n                int pennies = (int)Math.Floor(change / (decimal).01);\n                Console.WriteLine(&quot;Pennies = &quot; + pennies);\n                change = change - pennies * (decimal).01;\n                Console.WriteLine(change);\n            }\n        }\n    }\n}\n\n</code></pre>\n"
      },
      "event_id": "$1649706683260eSLIc:matrix.workhardpgh.com",
      "origin_server_ts": 1649706683496,
      "unsigned": {
        "age": 509045588
      },
      "user_id": "@onoyemi:matrix.workhardpgh.com",
      "age": 508961060
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@richcstan:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "imaniemanuel: imaniemanuel imaniemanuel imaniemanuel imaniemanuel ",
            "mimetype": "text/plain"
          },
          {
            "body": "<a href=\"https://matrix.to/#/@imaniemanuel:matrix.workhardpgh.com\">imaniemanuel</a>: <a href=\"https://matrix.to/#/@imaniemanuel:matrix.workhardpgh.com\">imaniemanuel</a> <a href=\"https://matrix.to/#/@imaniemanuel:matrix.workhardpgh.com\">imaniemanuel</a> <a href=\"https://matrix.to/#/@imaniemanuel:matrix.workhardpgh.com\">imaniemanuel</a> <a href=\"https://matrix.to/#/@imaniemanuel:matrix.workhardpgh.com\">imaniemanuel</a>",
            "mimetype": "text/html"
          }
        ],
        "body": "imaniemanuel: imaniemanuel imaniemanuel imaniemanuel imaniemanuel ",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<a href=\"https://matrix.to/#/@imaniemanuel:matrix.workhardpgh.com\">imaniemanuel</a>: <a href=\"https://matrix.to/#/@imaniemanuel:matrix.workhardpgh.com\">imaniemanuel</a> <a href=\"https://matrix.to/#/@imaniemanuel:matrix.workhardpgh.com\">imaniemanuel</a> <a href=\"https://matrix.to/#/@imaniemanuel:matrix.workhardpgh.com\">imaniemanuel</a> <a href=\"https://matrix.to/#/@imaniemanuel:matrix.workhardpgh.com\">imaniemanuel</a>"
      },
      "event_id": "$1649707170261JcFmN:matrix.workhardpgh.com",
      "origin_server_ts": 1649707170752,
      "unsigned": {
        "age": 508558332
      },
      "user_id": "@richcstan:matrix.workhardpgh.com",
      "age": 508473804
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@richcstan:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "using System;\n\nnamespace registerApp\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Create a cash register application that will\n            // Take in a cost of goods sold and cash given\n            // and will return the change to be given and\n            // the appropriate bills and coins to give\n\n            // ex:\n            // How much did it cost?\n            // 3.43\n            // How much did they pay?\n            // 10\n            // They get 6.57 in change\n            // 1 five, 1 one, 2 quarters, 1 nickel, 2 pennies\n\n\n            //------------------Program---------------------\n            Console.WriteLine(\"how much does the item cost?\");\n            decimal cost = Convert.ToDecimal(Console.ReadLine());\n            Console.WriteLine(\"how much was paid?\");\n            decimal paid = Convert.ToDecimal(Console.ReadLine());\n\n            decimal total = paid - cost;\n            Console.WriteLine(\"your change is: \" + total);\n\n            \n\n            int twenty = 0;\n            int ten = 0;\n            int five = 0;\n            int one = 0;\n            int quarter = 0;\n            int dime = 0;\n            int nickel = 0;\n            int penny = 0;\n\n            \n            while (total > 0)\n            {  \n                if (total >= 20)\n                {\n                    twenty = twenty + 1;\n                    total = total - 20;\n\n                }\n                else if (total >= 10)\n                {\n                    ten = ten + 1;\n                    total = total - 10;\n                }\n                else if (total >= 5)\n                {\n                    five = five + 1;\n                    total = total - 5;\n                }\n                else if (total >= 1)\n                {\n                    one = one + 1;\n                    total = total - 1;\n                }\n                else if (total >= .25m)\n                {\n                    quarter = quarter + 1;\n                    total = total - 0.25m;\n                }\n                else if (total >= .10m)\n                {\n                    dime = dime + 1;\n                    total = total - 0.10m;\n                }\n                else if (total >= 0.05m)\n                {\n                    nickel = nickel + 1;\n                    total = total - 0.05m;\n                }\n                else if (total >= .01m)\n                {\n                    penny = penny + 1;\n                    total = total - 0.01m;\n                }\n\n\n            }\n            \n            Console.WriteLine(\"this is the number of 20's.. \" + twenty);\n            Console.WriteLine(\"this is the number of 10's.. \" + ten);\n            Console.WriteLine(\"this is the number of 5's.. \" + five);\n            Console.WriteLine(\"this is the number of 1's.. \" + one);\n            Console.WriteLine(\"this is the number of quarter's.. \" + quarter);\n            Console.WriteLine(\"this is the number of dime's.. \" + dime);\n            Console.WriteLine(\"this is the number of nickel's.. \" + nickel);\n            Console.WriteLine(\"this is the number of penny's.. \" + penny);\n\n        }\n    }\n}\n",
            "mimetype": "text/plain"
          },
          {
            "body": "<p>using System;</p>\n<p>namespace registerApp<br>{<br>class Program<br>{<br>static void Main(string[] args)<br>{<br>// Create a cash register application that will<br>// Take in a cost of goods sold and cash given<br>// and will return the change to be given and<br>// the appropriate bills and coins to give</p>\n<pre><code>        // ex:\n        // How much did it cost?\n        // 3.43\n        // How much did they pay?\n        // 10\n        // They get 6.57 in change\n        // 1 five, 1 one, 2 quarters, 1 nickel, 2 pennies\n\n\n        //------------------Program---------------------\n        Console.WriteLine(&quot;how much does the item cost?&quot;);\n        decimal cost = Convert.ToDecimal(Console.ReadLine());\n        Console.WriteLine(&quot;how much was paid?&quot;);\n        decimal paid = Convert.ToDecimal(Console.ReadLine());\n\n        decimal total = paid - cost;\n        Console.WriteLine(&quot;your change is: &quot; + total);\n\n        \n\n        int twenty = 0;\n        int ten = 0;\n        int five = 0;\n        int one = 0;\n        int quarter = 0;\n        int dime = 0;\n        int nickel = 0;\n        int penny = 0;\n\n        \n        while (total &gt; 0)\n        {  \n            if (total &gt;= 20)\n            {\n                twenty = twenty + 1;\n                total = total - 20;\n\n            }\n            else if (total &gt;= 10)\n            {\n                ten = ten + 1;\n                total = total - 10;\n            }\n            else if (total &gt;= 5)\n            {\n                five = five + 1;\n                total = total - 5;\n            }\n            else if (total &gt;= 1)\n            {\n                one = one + 1;\n                total = total - 1;\n            }\n            else if (total &gt;= .25m)\n            {\n                quarter = quarter + 1;\n                total = total - 0.25m;\n            }\n            else if (total &gt;= .10m)\n            {\n                dime = dime + 1;\n                total = total - 0.10m;\n            }\n            else if (total &gt;= 0.05m)\n            {\n                nickel = nickel + 1;\n                total = total - 0.05m;\n            }\n            else if (total &gt;= .01m)\n            {\n                penny = penny + 1;\n                total = total - 0.01m;\n            }\n\n\n        }\n        \n        Console.WriteLine(&quot;this is the number of 20's.. &quot; + twenty);\n        Console.WriteLine(&quot;this is the number of 10's.. &quot; + ten);\n        Console.WriteLine(&quot;this is the number of 5's.. &quot; + five);\n        Console.WriteLine(&quot;this is the number of 1's.. &quot; + one);\n        Console.WriteLine(&quot;this is the number of quarter's.. &quot; + quarter);\n        Console.WriteLine(&quot;this is the number of dime's.. &quot; + dime);\n        Console.WriteLine(&quot;this is the number of nickel's.. &quot; + nickel);\n        Console.WriteLine(&quot;this is the number of penny's.. &quot; + penny);\n\n    }\n}\n</code></pre>\n<p>}</p>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "using System;\n\nnamespace registerApp\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Create a cash register application that will\n            // Take in a cost of goods sold and cash given\n            // and will return the change to be given and\n            // the appropriate bills and coins to give\n\n            // ex:\n            // How much did it cost?\n            // 3.43\n            // How much did they pay?\n            // 10\n            // They get 6.57 in change\n            // 1 five, 1 one, 2 quarters, 1 nickel, 2 pennies\n\n\n            //------------------Program---------------------\n            Console.WriteLine(\"how much does the item cost?\");\n            decimal cost = Convert.ToDecimal(Console.ReadLine());\n            Console.WriteLine(\"how much was paid?\");\n            decimal paid = Convert.ToDecimal(Console.ReadLine());\n\n            decimal total = paid - cost;\n            Console.WriteLine(\"your change is: \" + total);\n\n            \n\n            int twenty = 0;\n            int ten = 0;\n            int five = 0;\n            int one = 0;\n            int quarter = 0;\n            int dime = 0;\n            int nickel = 0;\n            int penny = 0;\n\n            \n            while (total > 0)\n            {  \n                if (total >= 20)\n                {\n                    twenty = twenty + 1;\n                    total = total - 20;\n\n                }\n                else if (total >= 10)\n                {\n                    ten = ten + 1;\n                    total = total - 10;\n                }\n                else if (total >= 5)\n                {\n                    five = five + 1;\n                    total = total - 5;\n                }\n                else if (total >= 1)\n                {\n                    one = one + 1;\n                    total = total - 1;\n                }\n                else if (total >= .25m)\n                {\n                    quarter = quarter + 1;\n                    total = total - 0.25m;\n                }\n                else if (total >= .10m)\n                {\n                    dime = dime + 1;\n                    total = total - 0.10m;\n                }\n                else if (total >= 0.05m)\n                {\n                    nickel = nickel + 1;\n                    total = total - 0.05m;\n                }\n                else if (total >= .01m)\n                {\n                    penny = penny + 1;\n                    total = total - 0.01m;\n                }\n\n\n            }\n            \n            Console.WriteLine(\"this is the number of 20's.. \" + twenty);\n            Console.WriteLine(\"this is the number of 10's.. \" + ten);\n            Console.WriteLine(\"this is the number of 5's.. \" + five);\n            Console.WriteLine(\"this is the number of 1's.. \" + one);\n            Console.WriteLine(\"this is the number of quarter's.. \" + quarter);\n            Console.WriteLine(\"this is the number of dime's.. \" + dime);\n            Console.WriteLine(\"this is the number of nickel's.. \" + nickel);\n            Console.WriteLine(\"this is the number of penny's.. \" + penny);\n\n        }\n    }\n}\n",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>using System;</p>\n<p>namespace registerApp<br>{<br>class Program<br>{<br>static void Main(string[] args)<br>{<br>// Create a cash register application that will<br>// Take in a cost of goods sold and cash given<br>// and will return the change to be given and<br>// the appropriate bills and coins to give</p>\n<pre><code>        // ex:\n        // How much did it cost?\n        // 3.43\n        // How much did they pay?\n        // 10\n        // They get 6.57 in change\n        // 1 five, 1 one, 2 quarters, 1 nickel, 2 pennies\n\n\n        //------------------Program---------------------\n        Console.WriteLine(&quot;how much does the item cost?&quot;);\n        decimal cost = Convert.ToDecimal(Console.ReadLine());\n        Console.WriteLine(&quot;how much was paid?&quot;);\n        decimal paid = Convert.ToDecimal(Console.ReadLine());\n\n        decimal total = paid - cost;\n        Console.WriteLine(&quot;your change is: &quot; + total);\n\n        \n\n        int twenty = 0;\n        int ten = 0;\n        int five = 0;\n        int one = 0;\n        int quarter = 0;\n        int dime = 0;\n        int nickel = 0;\n        int penny = 0;\n\n        \n        while (total &gt; 0)\n        {  \n            if (total &gt;= 20)\n            {\n                twenty = twenty + 1;\n                total = total - 20;\n\n            }\n            else if (total &gt;= 10)\n            {\n                ten = ten + 1;\n                total = total - 10;\n            }\n            else if (total &gt;= 5)\n            {\n                five = five + 1;\n                total = total - 5;\n            }\n            else if (total &gt;= 1)\n            {\n                one = one + 1;\n                total = total - 1;\n            }\n            else if (total &gt;= .25m)\n            {\n                quarter = quarter + 1;\n                total = total - 0.25m;\n            }\n            else if (total &gt;= .10m)\n            {\n                dime = dime + 1;\n                total = total - 0.10m;\n            }\n            else if (total &gt;= 0.05m)\n            {\n                nickel = nickel + 1;\n                total = total - 0.05m;\n            }\n            else if (total &gt;= .01m)\n            {\n                penny = penny + 1;\n                total = total - 0.01m;\n            }\n\n\n        }\n        \n        Console.WriteLine(&quot;this is the number of 20's.. &quot; + twenty);\n        Console.WriteLine(&quot;this is the number of 10's.. &quot; + ten);\n        Console.WriteLine(&quot;this is the number of 5's.. &quot; + five);\n        Console.WriteLine(&quot;this is the number of 1's.. &quot; + one);\n        Console.WriteLine(&quot;this is the number of quarter's.. &quot; + quarter);\n        Console.WriteLine(&quot;this is the number of dime's.. &quot; + dime);\n        Console.WriteLine(&quot;this is the number of nickel's.. &quot; + nickel);\n        Console.WriteLine(&quot;this is the number of penny's.. &quot; + penny);\n\n    }\n}\n</code></pre>\n<p>}</p>\n"
      },
      "event_id": "$1649707183262sWXTI:matrix.workhardpgh.com",
      "origin_server_ts": 1649707183323,
      "unsigned": {
        "age": 508545761
      },
      "user_id": "@richcstan:matrix.workhardpgh.com",
      "age": 508461233
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@richcstan:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "```using System;\n\nnamespace registerApp\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Create a cash register application that will\n            // Take in a cost of goods sold and cash given\n            // and will return the change to be given and\n            // the appropriate bills and coins to give\n\n            // ex:\n            // How much did it cost?\n            // 3.43\n            // How much did they pay?\n            // 10\n            // They get 6.57 in change\n            // 1 five, 1 one, 2 quarters, 1 nickel, 2 pennies\n\n\n            //------------------Program---------------------\n            Console.WriteLine(\"how much does the item cost?\");\n            decimal cost = Convert.ToDecimal(Console.ReadLine());\n            Console.WriteLine(\"how much was paid?\");\n            decimal paid = Convert.ToDecimal(Console.ReadLine());\n\n            decimal total = paid - cost;\n            Console.WriteLine(\"your change is: \" + total);\n\n            \n\n            int twenty = 0;\n            int ten = 0;\n            int five = 0;\n            int one = 0;\n            int quarter = 0;\n            int dime = 0;\n            int nickel = 0;\n            int penny = 0;\n\n            \n            while (total > 0)\n            {  \n                if (total >= 20)\n                {\n                    twenty = twenty + 1;\n                    total = total - 20;\n\n                }\n                else if (total >= 10)\n                {\n                    ten = ten + 1;\n                    total = total - 10;\n                }\n                else if (total >= 5)\n                {\n                    five = five + 1;\n                    total = total - 5;\n                }\n                else if (total >= 1)\n                {\n                    one = one + 1;\n                    total = total - 1;\n                }\n                else if (total >= .25m)\n                {\n                    quarter = quarter + 1;\n                    total = total - 0.25m;\n                }\n                else if (total >= .10m)\n                {\n                    dime = dime + 1;\n                    total = total - 0.10m;\n                }\n                else if (total >= 0.05m)\n                {\n                    nickel = nickel + 1;\n                    total = total - 0.05m;\n                }\n                else if (total >= .01m)\n                {\n                    penny = penny + 1;\n                    total = total - 0.01m;\n                }\n\n\n            }\n            \n            Console.WriteLine(\"this is the number of 20's.. \" + twenty);\n            Console.WriteLine(\"this is the number of 10's.. \" + ten);\n            Console.WriteLine(\"this is the number of 5's.. \" + five);\n            Console.WriteLine(\"this is the number of 1's.. \" + one);\n            Console.WriteLine(\"this is the number of quarter's.. \" + quarter);\n            Console.WriteLine(\"this is the number of dime's.. \" + dime);\n            Console.WriteLine(\"this is the number of nickel's.. \" + nickel);\n            Console.WriteLine(\"this is the number of penny's.. \" + penny);\n\n        }\n    }\n}\n```",
            "mimetype": "text/plain"
          },
          {
            "body": "<pre><code class=\"language-using\">\nnamespace registerApp\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Create a cash register application that will\n            // Take in a cost of goods sold and cash given\n            // and will return the change to be given and\n            // the appropriate bills and coins to give\n\n            // ex:\n            // How much did it cost?\n            // 3.43\n            // How much did they pay?\n            // 10\n            // They get 6.57 in change\n            // 1 five, 1 one, 2 quarters, 1 nickel, 2 pennies\n\n\n            //------------------Program---------------------\n            Console.WriteLine(&quot;how much does the item cost?&quot;);\n            decimal cost = Convert.ToDecimal(Console.ReadLine());\n            Console.WriteLine(&quot;how much was paid?&quot;);\n            decimal paid = Convert.ToDecimal(Console.ReadLine());\n\n            decimal total = paid - cost;\n            Console.WriteLine(&quot;your change is: &quot; + total);\n\n            \n\n            int twenty = 0;\n            int ten = 0;\n            int five = 0;\n            int one = 0;\n            int quarter = 0;\n            int dime = 0;\n            int nickel = 0;\n            int penny = 0;\n\n            \n            while (total &gt; 0)\n            {  \n                if (total &gt;= 20)\n                {\n                    twenty = twenty + 1;\n                    total = total - 20;\n\n                }\n                else if (total &gt;= 10)\n                {\n                    ten = ten + 1;\n                    total = total - 10;\n                }\n                else if (total &gt;= 5)\n                {\n                    five = five + 1;\n                    total = total - 5;\n                }\n                else if (total &gt;= 1)\n                {\n                    one = one + 1;\n                    total = total - 1;\n                }\n                else if (total &gt;= .25m)\n                {\n                    quarter = quarter + 1;\n                    total = total - 0.25m;\n                }\n                else if (total &gt;= .10m)\n                {\n                    dime = dime + 1;\n                    total = total - 0.10m;\n                }\n                else if (total &gt;= 0.05m)\n                {\n                    nickel = nickel + 1;\n                    total = total - 0.05m;\n                }\n                else if (total &gt;= .01m)\n                {\n                    penny = penny + 1;\n                    total = total - 0.01m;\n                }\n\n\n            }\n            \n            Console.WriteLine(&quot;this is the number of 20's.. &quot; + twenty);\n            Console.WriteLine(&quot;this is the number of 10's.. &quot; + ten);\n            Console.WriteLine(&quot;this is the number of 5's.. &quot; + five);\n            Console.WriteLine(&quot;this is the number of 1's.. &quot; + one);\n            Console.WriteLine(&quot;this is the number of quarter's.. &quot; + quarter);\n            Console.WriteLine(&quot;this is the number of dime's.. &quot; + dime);\n            Console.WriteLine(&quot;this is the number of nickel's.. &quot; + nickel);\n            Console.WriteLine(&quot;this is the number of penny's.. &quot; + penny);\n\n        }\n    }\n}\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "```using System;\n\nnamespace registerApp\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Create a cash register application that will\n            // Take in a cost of goods sold and cash given\n            // and will return the change to be given and\n            // the appropriate bills and coins to give\n\n            // ex:\n            // How much did it cost?\n            // 3.43\n            // How much did they pay?\n            // 10\n            // They get 6.57 in change\n            // 1 five, 1 one, 2 quarters, 1 nickel, 2 pennies\n\n\n            //------------------Program---------------------\n            Console.WriteLine(\"how much does the item cost?\");\n            decimal cost = Convert.ToDecimal(Console.ReadLine());\n            Console.WriteLine(\"how much was paid?\");\n            decimal paid = Convert.ToDecimal(Console.ReadLine());\n\n            decimal total = paid - cost;\n            Console.WriteLine(\"your change is: \" + total);\n\n            \n\n            int twenty = 0;\n            int ten = 0;\n            int five = 0;\n            int one = 0;\n            int quarter = 0;\n            int dime = 0;\n            int nickel = 0;\n            int penny = 0;\n\n            \n            while (total > 0)\n            {  \n                if (total >= 20)\n                {\n                    twenty = twenty + 1;\n                    total = total - 20;\n\n                }\n                else if (total >= 10)\n                {\n                    ten = ten + 1;\n                    total = total - 10;\n                }\n                else if (total >= 5)\n                {\n                    five = five + 1;\n                    total = total - 5;\n                }\n                else if (total >= 1)\n                {\n                    one = one + 1;\n                    total = total - 1;\n                }\n                else if (total >= .25m)\n                {\n                    quarter = quarter + 1;\n                    total = total - 0.25m;\n                }\n                else if (total >= .10m)\n                {\n                    dime = dime + 1;\n                    total = total - 0.10m;\n                }\n                else if (total >= 0.05m)\n                {\n                    nickel = nickel + 1;\n                    total = total - 0.05m;\n                }\n                else if (total >= .01m)\n                {\n                    penny = penny + 1;\n                    total = total - 0.01m;\n                }\n\n\n            }\n            \n            Console.WriteLine(\"this is the number of 20's.. \" + twenty);\n            Console.WriteLine(\"this is the number of 10's.. \" + ten);\n            Console.WriteLine(\"this is the number of 5's.. \" + five);\n            Console.WriteLine(\"this is the number of 1's.. \" + one);\n            Console.WriteLine(\"this is the number of quarter's.. \" + quarter);\n            Console.WriteLine(\"this is the number of dime's.. \" + dime);\n            Console.WriteLine(\"this is the number of nickel's.. \" + nickel);\n            Console.WriteLine(\"this is the number of penny's.. \" + penny);\n\n        }\n    }\n}\n```",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<pre><code class=\"language-using\">\nnamespace registerApp\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Create a cash register application that will\n            // Take in a cost of goods sold and cash given\n            // and will return the change to be given and\n            // the appropriate bills and coins to give\n\n            // ex:\n            // How much did it cost?\n            // 3.43\n            // How much did they pay?\n            // 10\n            // They get 6.57 in change\n            // 1 five, 1 one, 2 quarters, 1 nickel, 2 pennies\n\n\n            //------------------Program---------------------\n            Console.WriteLine(&quot;how much does the item cost?&quot;);\n            decimal cost = Convert.ToDecimal(Console.ReadLine());\n            Console.WriteLine(&quot;how much was paid?&quot;);\n            decimal paid = Convert.ToDecimal(Console.ReadLine());\n\n            decimal total = paid - cost;\n            Console.WriteLine(&quot;your change is: &quot; + total);\n\n            \n\n            int twenty = 0;\n            int ten = 0;\n            int five = 0;\n            int one = 0;\n            int quarter = 0;\n            int dime = 0;\n            int nickel = 0;\n            int penny = 0;\n\n            \n            while (total &gt; 0)\n            {  \n                if (total &gt;= 20)\n                {\n                    twenty = twenty + 1;\n                    total = total - 20;\n\n                }\n                else if (total &gt;= 10)\n                {\n                    ten = ten + 1;\n                    total = total - 10;\n                }\n                else if (total &gt;= 5)\n                {\n                    five = five + 1;\n                    total = total - 5;\n                }\n                else if (total &gt;= 1)\n                {\n                    one = one + 1;\n                    total = total - 1;\n                }\n                else if (total &gt;= .25m)\n                {\n                    quarter = quarter + 1;\n                    total = total - 0.25m;\n                }\n                else if (total &gt;= .10m)\n                {\n                    dime = dime + 1;\n                    total = total - 0.10m;\n                }\n                else if (total &gt;= 0.05m)\n                {\n                    nickel = nickel + 1;\n                    total = total - 0.05m;\n                }\n                else if (total &gt;= .01m)\n                {\n                    penny = penny + 1;\n                    total = total - 0.01m;\n                }\n\n\n            }\n            \n            Console.WriteLine(&quot;this is the number of 20's.. &quot; + twenty);\n            Console.WriteLine(&quot;this is the number of 10's.. &quot; + ten);\n            Console.WriteLine(&quot;this is the number of 5's.. &quot; + five);\n            Console.WriteLine(&quot;this is the number of 1's.. &quot; + one);\n            Console.WriteLine(&quot;this is the number of quarter's.. &quot; + quarter);\n            Console.WriteLine(&quot;this is the number of dime's.. &quot; + dime);\n            Console.WriteLine(&quot;this is the number of nickel's.. &quot; + nickel);\n            Console.WriteLine(&quot;this is the number of penny's.. &quot; + penny);\n\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$1649707248263nmlTh:matrix.workhardpgh.com",
      "origin_server_ts": 1649707248102,
      "unsigned": {
        "age": 508480982
      },
      "user_id": "@richcstan:matrix.workhardpgh.com",
      "age": 508396454
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@joewalker147:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "cash register - bonus random\n\n```\nusing System;\n\nnamespace project_next\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Create a cash register application that will\n            // Take in a cost of goods sold and cash given\n            // and will return the change to be given and\n            // the appropriate bills and coins to give\n\n            // ex:\n            // How much did it cost?\n            // 3.43\n            // How much did they pay?\n            // 10\n            // They get 6.57 in change\n            // 1 five, 1 one, 2 quarters, 1 nickel, 2 pennies\n\n\n\n            //===Ask user how much their groceries cost\n            Console.WriteLine(\"How much did your goods cost?\");\n            double costtoinput = Convert.ToDouble(Console.ReadLine());\n            int cost = Convert.ToInt32(costtoinput * 100);\n\n            //===Ask user the amount the are paying with\n            Console.WriteLine(\"What is the total amount you are paying with?\");\n            double paymenttoinput = Convert.ToDouble(Console.ReadLine());\n            int payment = Convert.ToInt32(paymenttoinput * 100);\n\n            //===figure out the change\n            int change = (payment - cost);\n            double showchange = Convert.ToDouble(change / 100.0);\n\n            string lastdigit = showchange.ToString();\n            int lastbox = lastdigit.Length - 1;\n\n            if (lastdigit[lastbox] != '3')\n                {\n                \n                Console.WriteLine(\"your change is \" + showchange);\n\n                //identify if change ends with 3\n                //produce change in random order\n                //===break down change into various denominations\n                int[] breakdown = new int[8];\n\n                while (change >= 2000)\n                {\n                    change = change - 2000;\n                    breakdown[0] = breakdown[0] + 1;\n                }\n                if (change >= 1000)\n                {\n                    change = change - 1000;\n                    breakdown[1] = breakdown[1] + 1;\n                }\n                if (change >= 500)\n                {\n                    change = change - 500;\n                    breakdown[2] = breakdown[2] + 1;\n                }\n                while (change >= 100)\n                {\n                    change = change - 100;\n                    breakdown[3] = breakdown[3] + 1;\n                }\n                while (change >= 25)\n                {\n                    change = change - 25;\n                    breakdown[4] = breakdown[4] + 1;\n                }\n                while (change >= 10)\n                {\n                    change = change - 10;\n                    breakdown[5] = breakdown[5] + 1;\n                }\n                if (change >= 5)\n                {\n                    change = change - 5;\n                    breakdown[6] = breakdown[6] + 1;\n                }\n                while (change >= 1)\n                {\n                    change = change - 1;\n                    breakdown[7] = breakdown[7] + 1;\n                }\n\n                Console.WriteLine(\"The change you will be receiving is:\");\n                string[] bills = { \": 20 dollar bill(s)\", \": 10 dollar bill(s)\", \": 5 dollar bill(s)\", \": 1 dollar bill(s)\", \" Quarter(s)\", \" Dime(s)\", \" Nickel(s)\", \" Penny(ies)\" };\n\n                for (int i = 0; i < 8; i++)\n                {\n                    if (breakdown[i] > 0)\n                    {\n                        Console.Write(breakdown[i] + bills[i] + \", \");\n                    }\n                    //Console.WriteLine();\n\n                }\n            }\n            else\n            {\n                // produce the change in a random order\n\n            }\n\n\n\n        }\n    }\n}\n\n```",
            "mimetype": "text/plain"
          },
          {
            "body": "<p>cash register - bonus random</p>\n<pre><code>using System;\n\nnamespace project_next\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Create a cash register application that will\n            // Take in a cost of goods sold and cash given\n            // and will return the change to be given and\n            // the appropriate bills and coins to give\n\n            // ex:\n            // How much did it cost?\n            // 3.43\n            // How much did they pay?\n            // 10\n            // They get 6.57 in change\n            // 1 five, 1 one, 2 quarters, 1 nickel, 2 pennies\n\n\n\n            //===Ask user how much their groceries cost\n            Console.WriteLine(&quot;How much did your goods cost?&quot;);\n            double costtoinput = Convert.ToDouble(Console.ReadLine());\n            int cost = Convert.ToInt32(costtoinput * 100);\n\n            //===Ask user the amount the are paying with\n            Console.WriteLine(&quot;What is the total amount you are paying with?&quot;);\n            double paymenttoinput = Convert.ToDouble(Console.ReadLine());\n            int payment = Convert.ToInt32(paymenttoinput * 100);\n\n            //===figure out the change\n            int change = (payment - cost);\n            double showchange = Convert.ToDouble(change / 100.0);\n\n            string lastdigit = showchange.ToString();\n            int lastbox = lastdigit.Length - 1;\n\n            if (lastdigit[lastbox] != '3')\n                {\n                \n                Console.WriteLine(&quot;your change is &quot; + showchange);\n\n                //identify if change ends with 3\n                //produce change in random order\n                //===break down change into various denominations\n                int[] breakdown = new int[8];\n\n                while (change &gt;= 2000)\n                {\n                    change = change - 2000;\n                    breakdown[0] = breakdown[0] + 1;\n                }\n                if (change &gt;= 1000)\n                {\n                    change = change - 1000;\n                    breakdown[1] = breakdown[1] + 1;\n                }\n                if (change &gt;= 500)\n                {\n                    change = change - 500;\n                    breakdown[2] = breakdown[2] + 1;\n                }\n                while (change &gt;= 100)\n                {\n                    change = change - 100;\n                    breakdown[3] = breakdown[3] + 1;\n                }\n                while (change &gt;= 25)\n                {\n                    change = change - 25;\n                    breakdown[4] = breakdown[4] + 1;\n                }\n                while (change &gt;= 10)\n                {\n                    change = change - 10;\n                    breakdown[5] = breakdown[5] + 1;\n                }\n                if (change &gt;= 5)\n                {\n                    change = change - 5;\n                    breakdown[6] = breakdown[6] + 1;\n                }\n                while (change &gt;= 1)\n                {\n                    change = change - 1;\n                    breakdown[7] = breakdown[7] + 1;\n                }\n\n                Console.WriteLine(&quot;The change you will be receiving is:&quot;);\n                string[] bills = { &quot;: 20 dollar bill(s)&quot;, &quot;: 10 dollar bill(s)&quot;, &quot;: 5 dollar bill(s)&quot;, &quot;: 1 dollar bill(s)&quot;, &quot; Quarter(s)&quot;, &quot; Dime(s)&quot;, &quot; Nickel(s)&quot;, &quot; Penny(ies)&quot; };\n\n                for (int i = 0; i &lt; 8; i++)\n                {\n                    if (breakdown[i] &gt; 0)\n                    {\n                        Console.Write(breakdown[i] + bills[i] + &quot;, &quot;);\n                    }\n                    //Console.WriteLine();\n\n                }\n            }\n            else\n            {\n                // produce the change in a random order\n\n            }\n\n\n\n        }\n    }\n}\n\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "cash register - bonus random\n\n```\nusing System;\n\nnamespace project_next\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Create a cash register application that will\n            // Take in a cost of goods sold and cash given\n            // and will return the change to be given and\n            // the appropriate bills and coins to give\n\n            // ex:\n            // How much did it cost?\n            // 3.43\n            // How much did they pay?\n            // 10\n            // They get 6.57 in change\n            // 1 five, 1 one, 2 quarters, 1 nickel, 2 pennies\n\n\n\n            //===Ask user how much their groceries cost\n            Console.WriteLine(\"How much did your goods cost?\");\n            double costtoinput = Convert.ToDouble(Console.ReadLine());\n            int cost = Convert.ToInt32(costtoinput * 100);\n\n            //===Ask user the amount the are paying with\n            Console.WriteLine(\"What is the total amount you are paying with?\");\n            double paymenttoinput = Convert.ToDouble(Console.ReadLine());\n            int payment = Convert.ToInt32(paymenttoinput * 100);\n\n            //===figure out the change\n            int change = (payment - cost);\n            double showchange = Convert.ToDouble(change / 100.0);\n\n            string lastdigit = showchange.ToString();\n            int lastbox = lastdigit.Length - 1;\n\n            if (lastdigit[lastbox] != '3')\n                {\n                \n                Console.WriteLine(\"your change is \" + showchange);\n\n                //identify if change ends with 3\n                //produce change in random order\n                //===break down change into various denominations\n                int[] breakdown = new int[8];\n\n                while (change >= 2000)\n                {\n                    change = change - 2000;\n                    breakdown[0] = breakdown[0] + 1;\n                }\n                if (change >= 1000)\n                {\n                    change = change - 1000;\n                    breakdown[1] = breakdown[1] + 1;\n                }\n                if (change >= 500)\n                {\n                    change = change - 500;\n                    breakdown[2] = breakdown[2] + 1;\n                }\n                while (change >= 100)\n                {\n                    change = change - 100;\n                    breakdown[3] = breakdown[3] + 1;\n                }\n                while (change >= 25)\n                {\n                    change = change - 25;\n                    breakdown[4] = breakdown[4] + 1;\n                }\n                while (change >= 10)\n                {\n                    change = change - 10;\n                    breakdown[5] = breakdown[5] + 1;\n                }\n                if (change >= 5)\n                {\n                    change = change - 5;\n                    breakdown[6] = breakdown[6] + 1;\n                }\n                while (change >= 1)\n                {\n                    change = change - 1;\n                    breakdown[7] = breakdown[7] + 1;\n                }\n\n                Console.WriteLine(\"The change you will be receiving is:\");\n                string[] bills = { \": 20 dollar bill(s)\", \": 10 dollar bill(s)\", \": 5 dollar bill(s)\", \": 1 dollar bill(s)\", \" Quarter(s)\", \" Dime(s)\", \" Nickel(s)\", \" Penny(ies)\" };\n\n                for (int i = 0; i < 8; i++)\n                {\n                    if (breakdown[i] > 0)\n                    {\n                        Console.Write(breakdown[i] + bills[i] + \", \");\n                    }\n                    //Console.WriteLine();\n\n                }\n            }\n            else\n            {\n                // produce the change in a random order\n\n            }\n\n\n\n        }\n    }\n}\n\n```",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>cash register - bonus random</p>\n<pre><code>using System;\n\nnamespace project_next\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Create a cash register application that will\n            // Take in a cost of goods sold and cash given\n            // and will return the change to be given and\n            // the appropriate bills and coins to give\n\n            // ex:\n            // How much did it cost?\n            // 3.43\n            // How much did they pay?\n            // 10\n            // They get 6.57 in change\n            // 1 five, 1 one, 2 quarters, 1 nickel, 2 pennies\n\n\n\n            //===Ask user how much their groceries cost\n            Console.WriteLine(&quot;How much did your goods cost?&quot;);\n            double costtoinput = Convert.ToDouble(Console.ReadLine());\n            int cost = Convert.ToInt32(costtoinput * 100);\n\n            //===Ask user the amount the are paying with\n            Console.WriteLine(&quot;What is the total amount you are paying with?&quot;);\n            double paymenttoinput = Convert.ToDouble(Console.ReadLine());\n            int payment = Convert.ToInt32(paymenttoinput * 100);\n\n            //===figure out the change\n            int change = (payment - cost);\n            double showchange = Convert.ToDouble(change / 100.0);\n\n            string lastdigit = showchange.ToString();\n            int lastbox = lastdigit.Length - 1;\n\n            if (lastdigit[lastbox] != '3')\n                {\n                \n                Console.WriteLine(&quot;your change is &quot; + showchange);\n\n                //identify if change ends with 3\n                //produce change in random order\n                //===break down change into various denominations\n                int[] breakdown = new int[8];\n\n                while (change &gt;= 2000)\n                {\n                    change = change - 2000;\n                    breakdown[0] = breakdown[0] + 1;\n                }\n                if (change &gt;= 1000)\n                {\n                    change = change - 1000;\n                    breakdown[1] = breakdown[1] + 1;\n                }\n                if (change &gt;= 500)\n                {\n                    change = change - 500;\n                    breakdown[2] = breakdown[2] + 1;\n                }\n                while (change &gt;= 100)\n                {\n                    change = change - 100;\n                    breakdown[3] = breakdown[3] + 1;\n                }\n                while (change &gt;= 25)\n                {\n                    change = change - 25;\n                    breakdown[4] = breakdown[4] + 1;\n                }\n                while (change &gt;= 10)\n                {\n                    change = change - 10;\n                    breakdown[5] = breakdown[5] + 1;\n                }\n                if (change &gt;= 5)\n                {\n                    change = change - 5;\n                    breakdown[6] = breakdown[6] + 1;\n                }\n                while (change &gt;= 1)\n                {\n                    change = change - 1;\n                    breakdown[7] = breakdown[7] + 1;\n                }\n\n                Console.WriteLine(&quot;The change you will be receiving is:&quot;);\n                string[] bills = { &quot;: 20 dollar bill(s)&quot;, &quot;: 10 dollar bill(s)&quot;, &quot;: 5 dollar bill(s)&quot;, &quot;: 1 dollar bill(s)&quot;, &quot; Quarter(s)&quot;, &quot; Dime(s)&quot;, &quot; Nickel(s)&quot;, &quot; Penny(ies)&quot; };\n\n                for (int i = 0; i &lt; 8; i++)\n                {\n                    if (breakdown[i] &gt; 0)\n                    {\n                        Console.Write(breakdown[i] + bills[i] + &quot;, &quot;);\n                    }\n                    //Console.WriteLine();\n\n                }\n            }\n            else\n            {\n                // produce the change in a random order\n\n            }\n\n\n\n        }\n    }\n}\n\n</code></pre>\n"
      },
      "event_id": "$1649708409265qcWdd:matrix.workhardpgh.com",
      "origin_server_ts": 1649708409286,
      "unsigned": {
        "age": 507319798
      },
      "user_id": "@joewalker147:matrix.workhardpgh.com",
      "age": 507235270
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@spensermg:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "```\nusing System;\n\nnamespace Cash_Register\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Automatic cash register\n            //Create a cash register application that will:\n            //Take in a cost of goods sold and cash given\n            //Return the change based to be returned to the customer\n            //Give the change back in the appropriate bills and coins\n\n            //===Ask user how much their groceries cost\n            Console.WriteLine(\"How much did your goods cost?\");\n            double costtoinput = Convert.ToDouble(Console.ReadLine());\n            int cost = Convert.ToInt32(costtoinput * 100);\n\n            //===Ask user the amount the are paying with\n            Console.WriteLine(\"What is the total amount you are paying with?\");\n            double paymenttoinput = Convert.ToDouble(Console.ReadLine());\n            int payment = Convert.ToInt32(paymenttoinput * 100);\n\n            //===figure out the change\n            int change = (payment - cost);\n            double showchange = Convert.ToDouble(change / 100.0);\n            Console.WriteLine(\"your change is \" + showchange);\n\n            string lastdigit = showchange.ToString();\n            int lastbox = lastdigit.Length - 1;\n            int[] breakdown = new int[8];\n\n            if (lastdigit[lastbox] == '3')\n            {\n                Console.WriteLine(\"The last number is 3.\");\n                //Utilize a loop similar to the else statement where the changes is produced in a random order\n                //Have to be a while loop that keeps selecting change once each time through until it reaches zero\n                while(change > 0)\n                {\n                    int numeral = 0;\n\n                    if (change > 0)\n                    {\n                        //this creates a random number\n                        Random number = new Random();\n                        //this creates a variable that receives that random number which is a positive int less than 9\n                        numeral = number.Next(9);\n                        //Console.WriteLine(numeral);\n                    }\n                    //These if statements are conditional upon the random number and the amount of change left\n                    //They add one to each count of bills and/or coins given both conditions are true\n                    if (numeral == 1 && change >= 2000)\n                    {\n                        change = change - 2000;\n                        breakdown[0] = breakdown[0] + 1;\n                    }\n                    if (numeral == 2 && change >= 1000)\n                    {\n                        change = change - 1000;\n                        breakdown[1] = breakdown[1] + 1;\n                    }\n                    if (numeral == 3 && change >= 500)\n                    {\n                        change = change - 500;\n                        breakdown[2] = breakdown[2] + 1;\n                    }\n                    if (numeral == 4 && change >= 100)\n                    {\n                        change = change - 100;\n                        breakdown[3] = breakdown[3] + 1;\n                    }\n                    if (numeral == 5 && change >= 25)\n                    {\n                        change = change - 25;\n                        breakdown[4] = breakdown[4] + 1;\n                    }\n                    if (numeral == 6 && change >= 10)\n                    {\n                        change = change - 10;\n                        breakdown[5] = breakdown[5] + 1;\n                    }\n                    if (numeral == 7 && change >= 5)\n                    {\n                        change = change - 5;\n                        breakdown[6] = breakdown[6] + 1;\n                    }\n                    if (numeral == 8 && change >= 1)\n                    {\n                        change = change - 1;\n                        breakdown[7] = breakdown[7] + 1;\n                    }\n                }\n            }\n            else\n            {\n                //===break down change into various denominations\n                while (change >= 2000)\n                {\n                    change = change - 2000;\n                    breakdown[0] = breakdown[0] + 1;\n                }\n                if (change >= 1000)\n                {\n                    change = change - 1000;\n                    breakdown[1] = breakdown[1] + 1;\n                }\n                if (change >= 500)\n                {\n                    change = change - 500;\n                    breakdown[2] = breakdown[2] + 1;\n                }\n                while (change >= 100)\n                {\n                    change = change - 100;\n                    breakdown[3] = breakdown[3] + 1;\n                }\n                while (change >= 25)\n                {\n                    change = change - 25;\n                    breakdown[4] = breakdown[4] + 1;\n                }\n                while (change >= 10)\n                {\n                    change = change - 10;\n                    breakdown[5] = breakdown[5] + 1;\n                }\n                if (change >= 5)\n                {\n                    change = change - 5;\n                    breakdown[6] = breakdown[6] + 1;\n                }\n                while (change >= 1)\n                {\n                    change = change - 1;\n                    breakdown[7] = breakdown[7] + 1;\n                }\n            }\n            Console.WriteLine(\"The change you will be receiving is:\");\n            string[] bills = { \": 20 dollar bill(s)\", \": 10 dollar bill(s)\", \": 5 dollar bill(s)\", \": 1 dollar bill(s)\", \" Quarter(s)\", \" Dime(s)\", \" Nickel(s)\", \" Pennie(s)\" };\n\n            for (int i = 0; i < 8; i++)\n            {\n                if (breakdown[i] > 0)\n                {\n                    Console.Write(breakdown[i] + bills[i] + \", \");\n                }\n                //Console.WriteLine();\n\n            }\n\n            //Bonus:\n            //Any time the change being returend ends in a 3,\n            //give the correct change but with random denominations\n            //instead of largest to smallest\n\n            //ex:\n            //How much did it cost?\n            //3.43\n            //How much did they pay?\n            //10\n            //They get 6.57 in change\n            //1 five, 1 one, 2 quarters, 1 nickel, 2 pennies\n        }\n    }\n}\n```\nandrew imaniemanuel Joe W (he/him) I took a crack at getting the system to randomly generate change if it ended in a 3. It's lengthy but works, found a random number generating function and included comments",
            "mimetype": "text/plain"
          },
          {
            "body": "<pre><code>using System;\n\nnamespace Cash_Register\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Automatic cash register\n            //Create a cash register application that will:\n            //Take in a cost of goods sold and cash given\n            //Return the change based to be returned to the customer\n            //Give the change back in the appropriate bills and coins\n\n            //===Ask user how much their groceries cost\n            Console.WriteLine(&quot;How much did your goods cost?&quot;);\n            double costtoinput = Convert.ToDouble(Console.ReadLine());\n            int cost = Convert.ToInt32(costtoinput * 100);\n\n            //===Ask user the amount the are paying with\n            Console.WriteLine(&quot;What is the total amount you are paying with?&quot;);\n            double paymenttoinput = Convert.ToDouble(Console.ReadLine());\n            int payment = Convert.ToInt32(paymenttoinput * 100);\n\n            //===figure out the change\n            int change = (payment - cost);\n            double showchange = Convert.ToDouble(change / 100.0);\n            Console.WriteLine(&quot;your change is &quot; + showchange);\n\n            string lastdigit = showchange.ToString();\n            int lastbox = lastdigit.Length - 1;\n            int[] breakdown = new int[8];\n\n            if (lastdigit[lastbox] == '3')\n            {\n                Console.WriteLine(&quot;The last number is 3.&quot;);\n                //Utilize a loop similar to the else statement where the changes is produced in a random order\n                //Have to be a while loop that keeps selecting change once each time through until it reaches zero\n                while(change &gt; 0)\n                {\n                    int numeral = 0;\n\n                    if (change &gt; 0)\n                    {\n                        //this creates a random number\n                        Random number = new Random();\n                        //this creates a variable that receives that random number which is a positive int less than 9\n                        numeral = number.Next(9);\n                        //Console.WriteLine(numeral);\n                    }\n                    //These if statements are conditional upon the random number and the amount of change left\n                    //They add one to each count of bills and/or coins given both conditions are true\n                    if (numeral == 1 &amp;&amp; change &gt;= 2000)\n                    {\n                        change = change - 2000;\n                        breakdown[0] = breakdown[0] + 1;\n                    }\n                    if (numeral == 2 &amp;&amp; change &gt;= 1000)\n                    {\n                        change = change - 1000;\n                        breakdown[1] = breakdown[1] + 1;\n                    }\n                    if (numeral == 3 &amp;&amp; change &gt;= 500)\n                    {\n                        change = change - 500;\n                        breakdown[2] = breakdown[2] + 1;\n                    }\n                    if (numeral == 4 &amp;&amp; change &gt;= 100)\n                    {\n                        change = change - 100;\n                        breakdown[3] = breakdown[3] + 1;\n                    }\n                    if (numeral == 5 &amp;&amp; change &gt;= 25)\n                    {\n                        change = change - 25;\n                        breakdown[4] = breakdown[4] + 1;\n                    }\n                    if (numeral == 6 &amp;&amp; change &gt;= 10)\n                    {\n                        change = change - 10;\n                        breakdown[5] = breakdown[5] + 1;\n                    }\n                    if (numeral == 7 &amp;&amp; change &gt;= 5)\n                    {\n                        change = change - 5;\n                        breakdown[6] = breakdown[6] + 1;\n                    }\n                    if (numeral == 8 &amp;&amp; change &gt;= 1)\n                    {\n                        change = change - 1;\n                        breakdown[7] = breakdown[7] + 1;\n                    }\n                }\n            }\n            else\n            {\n                //===break down change into various denominations\n                while (change &gt;= 2000)\n                {\n                    change = change - 2000;\n                    breakdown[0] = breakdown[0] + 1;\n                }\n                if (change &gt;= 1000)\n                {\n                    change = change - 1000;\n                    breakdown[1] = breakdown[1] + 1;\n                }\n                if (change &gt;= 500)\n                {\n                    change = change - 500;\n                    breakdown[2] = breakdown[2] + 1;\n                }\n                while (change &gt;= 100)\n                {\n                    change = change - 100;\n                    breakdown[3] = breakdown[3] + 1;\n                }\n                while (change &gt;= 25)\n                {\n                    change = change - 25;\n                    breakdown[4] = breakdown[4] + 1;\n                }\n                while (change &gt;= 10)\n                {\n                    change = change - 10;\n                    breakdown[5] = breakdown[5] + 1;\n                }\n                if (change &gt;= 5)\n                {\n                    change = change - 5;\n                    breakdown[6] = breakdown[6] + 1;\n                }\n                while (change &gt;= 1)\n                {\n                    change = change - 1;\n                    breakdown[7] = breakdown[7] + 1;\n                }\n            }\n            Console.WriteLine(&quot;The change you will be receiving is:&quot;);\n            string[] bills = { &quot;: 20 dollar bill(s)&quot;, &quot;: 10 dollar bill(s)&quot;, &quot;: 5 dollar bill(s)&quot;, &quot;: 1 dollar bill(s)&quot;, &quot; Quarter(s)&quot;, &quot; Dime(s)&quot;, &quot; Nickel(s)&quot;, &quot; Pennie(s)&quot; };\n\n            for (int i = 0; i &lt; 8; i++)\n            {\n                if (breakdown[i] &gt; 0)\n                {\n                    Console.Write(breakdown[i] + bills[i] + &quot;, &quot;);\n                }\n                //Console.WriteLine();\n\n            }\n\n            //Bonus:\n            //Any time the change being returend ends in a 3,\n            //give the correct change but with random denominations\n            //instead of largest to smallest\n\n            //ex:\n            //How much did it cost?\n            //3.43\n            //How much did they pay?\n            //10\n            //They get 6.57 in change\n            //1 five, 1 one, 2 quarters, 1 nickel, 2 pennies\n        }\n    }\n}\n</code></pre>\n<p><a href=\"https://matrix.to/#/@andrew:matrix.workhardpgh.com\">andrew</a> <a href=\"https://matrix.to/#/@imaniemanuel:matrix.workhardpgh.com\">imaniemanuel</a> <a href=\"https://matrix.to/#/@joewalker147:matrix.workhardpgh.com\">Joe W (he/him)</a> I took a crack at getting the system to randomly generate change if it ended in a 3. It's lengthy but works, found a random number generating function and included comments</p>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "```\nusing System;\n\nnamespace Cash_Register\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Automatic cash register\n            //Create a cash register application that will:\n            //Take in a cost of goods sold and cash given\n            //Return the change based to be returned to the customer\n            //Give the change back in the appropriate bills and coins\n\n            //===Ask user how much their groceries cost\n            Console.WriteLine(\"How much did your goods cost?\");\n            double costtoinput = Convert.ToDouble(Console.ReadLine());\n            int cost = Convert.ToInt32(costtoinput * 100);\n\n            //===Ask user the amount the are paying with\n            Console.WriteLine(\"What is the total amount you are paying with?\");\n            double paymenttoinput = Convert.ToDouble(Console.ReadLine());\n            int payment = Convert.ToInt32(paymenttoinput * 100);\n\n            //===figure out the change\n            int change = (payment - cost);\n            double showchange = Convert.ToDouble(change / 100.0);\n            Console.WriteLine(\"your change is \" + showchange);\n\n            string lastdigit = showchange.ToString();\n            int lastbox = lastdigit.Length - 1;\n            int[] breakdown = new int[8];\n\n            if (lastdigit[lastbox] == '3')\n            {\n                Console.WriteLine(\"The last number is 3.\");\n                //Utilize a loop similar to the else statement where the changes is produced in a random order\n                //Have to be a while loop that keeps selecting change once each time through until it reaches zero\n                while(change > 0)\n                {\n                    int numeral = 0;\n\n                    if (change > 0)\n                    {\n                        //this creates a random number\n                        Random number = new Random();\n                        //this creates a variable that receives that random number which is a positive int less than 9\n                        numeral = number.Next(9);\n                        //Console.WriteLine(numeral);\n                    }\n                    //These if statements are conditional upon the random number and the amount of change left\n                    //They add one to each count of bills and/or coins given both conditions are true\n                    if (numeral == 1 && change >= 2000)\n                    {\n                        change = change - 2000;\n                        breakdown[0] = breakdown[0] + 1;\n                    }\n                    if (numeral == 2 && change >= 1000)\n                    {\n                        change = change - 1000;\n                        breakdown[1] = breakdown[1] + 1;\n                    }\n                    if (numeral == 3 && change >= 500)\n                    {\n                        change = change - 500;\n                        breakdown[2] = breakdown[2] + 1;\n                    }\n                    if (numeral == 4 && change >= 100)\n                    {\n                        change = change - 100;\n                        breakdown[3] = breakdown[3] + 1;\n                    }\n                    if (numeral == 5 && change >= 25)\n                    {\n                        change = change - 25;\n                        breakdown[4] = breakdown[4] + 1;\n                    }\n                    if (numeral == 6 && change >= 10)\n                    {\n                        change = change - 10;\n                        breakdown[5] = breakdown[5] + 1;\n                    }\n                    if (numeral == 7 && change >= 5)\n                    {\n                        change = change - 5;\n                        breakdown[6] = breakdown[6] + 1;\n                    }\n                    if (numeral == 8 && change >= 1)\n                    {\n                        change = change - 1;\n                        breakdown[7] = breakdown[7] + 1;\n                    }\n                }\n            }\n            else\n            {\n                //===break down change into various denominations\n                while (change >= 2000)\n                {\n                    change = change - 2000;\n                    breakdown[0] = breakdown[0] + 1;\n                }\n                if (change >= 1000)\n                {\n                    change = change - 1000;\n                    breakdown[1] = breakdown[1] + 1;\n                }\n                if (change >= 500)\n                {\n                    change = change - 500;\n                    breakdown[2] = breakdown[2] + 1;\n                }\n                while (change >= 100)\n                {\n                    change = change - 100;\n                    breakdown[3] = breakdown[3] + 1;\n                }\n                while (change >= 25)\n                {\n                    change = change - 25;\n                    breakdown[4] = breakdown[4] + 1;\n                }\n                while (change >= 10)\n                {\n                    change = change - 10;\n                    breakdown[5] = breakdown[5] + 1;\n                }\n                if (change >= 5)\n                {\n                    change = change - 5;\n                    breakdown[6] = breakdown[6] + 1;\n                }\n                while (change >= 1)\n                {\n                    change = change - 1;\n                    breakdown[7] = breakdown[7] + 1;\n                }\n            }\n            Console.WriteLine(\"The change you will be receiving is:\");\n            string[] bills = { \": 20 dollar bill(s)\", \": 10 dollar bill(s)\", \": 5 dollar bill(s)\", \": 1 dollar bill(s)\", \" Quarter(s)\", \" Dime(s)\", \" Nickel(s)\", \" Pennie(s)\" };\n\n            for (int i = 0; i < 8; i++)\n            {\n                if (breakdown[i] > 0)\n                {\n                    Console.Write(breakdown[i] + bills[i] + \", \");\n                }\n                //Console.WriteLine();\n\n            }\n\n            //Bonus:\n            //Any time the change being returend ends in a 3,\n            //give the correct change but with random denominations\n            //instead of largest to smallest\n\n            //ex:\n            //How much did it cost?\n            //3.43\n            //How much did they pay?\n            //10\n            //They get 6.57 in change\n            //1 five, 1 one, 2 quarters, 1 nickel, 2 pennies\n        }\n    }\n}\n```\nandrew imaniemanuel Joe W (he/him) I took a crack at getting the system to randomly generate change if it ended in a 3. It's lengthy but works, found a random number generating function and included comments",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<pre><code>using System;\n\nnamespace Cash_Register\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Automatic cash register\n            //Create a cash register application that will:\n            //Take in a cost of goods sold and cash given\n            //Return the change based to be returned to the customer\n            //Give the change back in the appropriate bills and coins\n\n            //===Ask user how much their groceries cost\n            Console.WriteLine(&quot;How much did your goods cost?&quot;);\n            double costtoinput = Convert.ToDouble(Console.ReadLine());\n            int cost = Convert.ToInt32(costtoinput * 100);\n\n            //===Ask user the amount the are paying with\n            Console.WriteLine(&quot;What is the total amount you are paying with?&quot;);\n            double paymenttoinput = Convert.ToDouble(Console.ReadLine());\n            int payment = Convert.ToInt32(paymenttoinput * 100);\n\n            //===figure out the change\n            int change = (payment - cost);\n            double showchange = Convert.ToDouble(change / 100.0);\n            Console.WriteLine(&quot;your change is &quot; + showchange);\n\n            string lastdigit = showchange.ToString();\n            int lastbox = lastdigit.Length - 1;\n            int[] breakdown = new int[8];\n\n            if (lastdigit[lastbox] == '3')\n            {\n                Console.WriteLine(&quot;The last number is 3.&quot;);\n                //Utilize a loop similar to the else statement where the changes is produced in a random order\n                //Have to be a while loop that keeps selecting change once each time through until it reaches zero\n                while(change &gt; 0)\n                {\n                    int numeral = 0;\n\n                    if (change &gt; 0)\n                    {\n                        //this creates a random number\n                        Random number = new Random();\n                        //this creates a variable that receives that random number which is a positive int less than 9\n                        numeral = number.Next(9);\n                        //Console.WriteLine(numeral);\n                    }\n                    //These if statements are conditional upon the random number and the amount of change left\n                    //They add one to each count of bills and/or coins given both conditions are true\n                    if (numeral == 1 &amp;&amp; change &gt;= 2000)\n                    {\n                        change = change - 2000;\n                        breakdown[0] = breakdown[0] + 1;\n                    }\n                    if (numeral == 2 &amp;&amp; change &gt;= 1000)\n                    {\n                        change = change - 1000;\n                        breakdown[1] = breakdown[1] + 1;\n                    }\n                    if (numeral == 3 &amp;&amp; change &gt;= 500)\n                    {\n                        change = change - 500;\n                        breakdown[2] = breakdown[2] + 1;\n                    }\n                    if (numeral == 4 &amp;&amp; change &gt;= 100)\n                    {\n                        change = change - 100;\n                        breakdown[3] = breakdown[3] + 1;\n                    }\n                    if (numeral == 5 &amp;&amp; change &gt;= 25)\n                    {\n                        change = change - 25;\n                        breakdown[4] = breakdown[4] + 1;\n                    }\n                    if (numeral == 6 &amp;&amp; change &gt;= 10)\n                    {\n                        change = change - 10;\n                        breakdown[5] = breakdown[5] + 1;\n                    }\n                    if (numeral == 7 &amp;&amp; change &gt;= 5)\n                    {\n                        change = change - 5;\n                        breakdown[6] = breakdown[6] + 1;\n                    }\n                    if (numeral == 8 &amp;&amp; change &gt;= 1)\n                    {\n                        change = change - 1;\n                        breakdown[7] = breakdown[7] + 1;\n                    }\n                }\n            }\n            else\n            {\n                //===break down change into various denominations\n                while (change &gt;= 2000)\n                {\n                    change = change - 2000;\n                    breakdown[0] = breakdown[0] + 1;\n                }\n                if (change &gt;= 1000)\n                {\n                    change = change - 1000;\n                    breakdown[1] = breakdown[1] + 1;\n                }\n                if (change &gt;= 500)\n                {\n                    change = change - 500;\n                    breakdown[2] = breakdown[2] + 1;\n                }\n                while (change &gt;= 100)\n                {\n                    change = change - 100;\n                    breakdown[3] = breakdown[3] + 1;\n                }\n                while (change &gt;= 25)\n                {\n                    change = change - 25;\n                    breakdown[4] = breakdown[4] + 1;\n                }\n                while (change &gt;= 10)\n                {\n                    change = change - 10;\n                    breakdown[5] = breakdown[5] + 1;\n                }\n                if (change &gt;= 5)\n                {\n                    change = change - 5;\n                    breakdown[6] = breakdown[6] + 1;\n                }\n                while (change &gt;= 1)\n                {\n                    change = change - 1;\n                    breakdown[7] = breakdown[7] + 1;\n                }\n            }\n            Console.WriteLine(&quot;The change you will be receiving is:&quot;);\n            string[] bills = { &quot;: 20 dollar bill(s)&quot;, &quot;: 10 dollar bill(s)&quot;, &quot;: 5 dollar bill(s)&quot;, &quot;: 1 dollar bill(s)&quot;, &quot; Quarter(s)&quot;, &quot; Dime(s)&quot;, &quot; Nickel(s)&quot;, &quot; Pennie(s)&quot; };\n\n            for (int i = 0; i &lt; 8; i++)\n            {\n                if (breakdown[i] &gt; 0)\n                {\n                    Console.Write(breakdown[i] + bills[i] + &quot;, &quot;);\n                }\n                //Console.WriteLine();\n\n            }\n\n            //Bonus:\n            //Any time the change being returend ends in a 3,\n            //give the correct change but with random denominations\n            //instead of largest to smallest\n\n            //ex:\n            //How much did it cost?\n            //3.43\n            //How much did they pay?\n            //10\n            //They get 6.57 in change\n            //1 five, 1 one, 2 quarters, 1 nickel, 2 pennies\n        }\n    }\n}\n</code></pre>\n<p><a href=\"https://matrix.to/#/@andrew:matrix.workhardpgh.com\">andrew</a> <a href=\"https://matrix.to/#/@imaniemanuel:matrix.workhardpgh.com\">imaniemanuel</a> <a href=\"https://matrix.to/#/@joewalker147:matrix.workhardpgh.com\">Joe W (he/him)</a> I took a crack at getting the system to randomly generate change if it ended in a 3. It's lengthy but works, found a random number generating function and included comments</p>\n"
      },
      "event_id": "$1649723269270nPVQF:matrix.workhardpgh.com",
      "origin_server_ts": 1649723269856,
      "unsigned": {
        "age": 492459228
      },
      "user_id": "@spensermg:matrix.workhardpgh.com",
      "age": 492374700
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@scottb:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "I thought the method of multiplying by 100 to get rid of the decimals in the beginning was an interesting way of handling it.  Once the change is determined though you convert back to a double.  I see why but someone who has to modify this six months from now may have trouble understanding what’s going on…this might be a good place for a comment to explain what’s going on to make it easier for them to follow.  On a totally unrelated topic to your code, I pity the person who is due $104.33 in change and ends up getting it all in pennies…they get heavy after a certain dollar amount"
      },
      "event_id": "$1649724314271lStJH:matrix.workhardpgh.com",
      "origin_server_ts": 1649724314878,
      "unsigned": {
        "age": 491414206,
        "m.relations": {
          "m.annotation": {
            "chunk": [
              {
                "type": "m.reaction",
                "key": "👍",
                "count": 1
              }
            ]
          },
          "m.replace": {
            "event_id": "$1649724351272hePWC:matrix.workhardpgh.com",
            "origin_server_ts": 1649724351628,
            "sender": "@scottb:matrix.workhardpgh.com"
          }
        }
      },
      "user_id": "@scottb:matrix.workhardpgh.com",
      "age": 491329678
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "Cash Register with Modulo\n```\nusing System;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // cash register\n\n            // ask for how much it costs\n            // ask for how much they paid\n            Console.WriteLine(\"How much did it cost?\");\n            int cost = (int)(Convert.ToDecimal(Console.ReadLine()) * 100);\n\n            Console.WriteLine(\"How much did they pay?\");\n            int paid = (int)(Convert.ToDecimal(Console.ReadLine()) * 100);\n\n            // show them the amount of change they're getting back\n            int change = paid - cost;\n            Console.WriteLine(\"I owe you $\" + change/100.0);\n\n            // show them the denominations they're getting back\n\n            int numberOfTwenties = change / 2000;\n            Console.WriteLine(numberOfTwenties + \" Twenties\");\n            change = change % 2000;\n\n            int numberOfTens = change / 1000;\n            Console.WriteLine(numberOfTens + \" Tens\");\n            change = change % 1000;\n\n            int numberOfFives = change / 500;\n            Console.WriteLine(numberOfFives + \" Fives\");\n            change = change % 500;\n\n            int numberOfOnes = change / 100;\n            Console.WriteLine(numberOfOnes + \" Ones\");\n            change = change % 100;\n\n\n            Console.ReadLine();\n        }\n\n\n    }\n}\n",
            "mimetype": "text/plain"
          },
          {
            "body": "<p>Cash Register with Modulo</p>\n<pre><code>using System;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // cash register\n\n            // ask for how much it costs\n            // ask for how much they paid\n            Console.WriteLine(&quot;How much did it cost?&quot;);\n            int cost = (int)(Convert.ToDecimal(Console.ReadLine()) * 100);\n\n            Console.WriteLine(&quot;How much did they pay?&quot;);\n            int paid = (int)(Convert.ToDecimal(Console.ReadLine()) * 100);\n\n            // show them the amount of change they're getting back\n            int change = paid - cost;\n            Console.WriteLine(&quot;I owe you $&quot; + change/100.0);\n\n            // show them the denominations they're getting back\n\n            int numberOfTwenties = change / 2000;\n            Console.WriteLine(numberOfTwenties + &quot; Twenties&quot;);\n            change = change % 2000;\n\n            int numberOfTens = change / 1000;\n            Console.WriteLine(numberOfTens + &quot; Tens&quot;);\n            change = change % 1000;\n\n            int numberOfFives = change / 500;\n            Console.WriteLine(numberOfFives + &quot; Fives&quot;);\n            change = change % 500;\n\n            int numberOfOnes = change / 100;\n            Console.WriteLine(numberOfOnes + &quot; Ones&quot;);\n            change = change % 100;\n\n\n            Console.ReadLine();\n        }\n\n\n    }\n}\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "Cash Register with Modulo\n```\nusing System;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // cash register\n\n            // ask for how much it costs\n            // ask for how much they paid\n            Console.WriteLine(\"How much did it cost?\");\n            int cost = (int)(Convert.ToDecimal(Console.ReadLine()) * 100);\n\n            Console.WriteLine(\"How much did they pay?\");\n            int paid = (int)(Convert.ToDecimal(Console.ReadLine()) * 100);\n\n            // show them the amount of change they're getting back\n            int change = paid - cost;\n            Console.WriteLine(\"I owe you $\" + change/100.0);\n\n            // show them the denominations they're getting back\n\n            int numberOfTwenties = change / 2000;\n            Console.WriteLine(numberOfTwenties + \" Twenties\");\n            change = change % 2000;\n\n            int numberOfTens = change / 1000;\n            Console.WriteLine(numberOfTens + \" Tens\");\n            change = change % 1000;\n\n            int numberOfFives = change / 500;\n            Console.WriteLine(numberOfFives + \" Fives\");\n            change = change % 500;\n\n            int numberOfOnes = change / 100;\n            Console.WriteLine(numberOfOnes + \" Ones\");\n            change = change % 100;\n\n\n            Console.ReadLine();\n        }\n\n\n    }\n}\n",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Cash Register with Modulo</p>\n<pre><code>using System;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // cash register\n\n            // ask for how much it costs\n            // ask for how much they paid\n            Console.WriteLine(&quot;How much did it cost?&quot;);\n            int cost = (int)(Convert.ToDecimal(Console.ReadLine()) * 100);\n\n            Console.WriteLine(&quot;How much did they pay?&quot;);\n            int paid = (int)(Convert.ToDecimal(Console.ReadLine()) * 100);\n\n            // show them the amount of change they're getting back\n            int change = paid - cost;\n            Console.WriteLine(&quot;I owe you $&quot; + change/100.0);\n\n            // show them the denominations they're getting back\n\n            int numberOfTwenties = change / 2000;\n            Console.WriteLine(numberOfTwenties + &quot; Twenties&quot;);\n            change = change % 2000;\n\n            int numberOfTens = change / 1000;\n            Console.WriteLine(numberOfTens + &quot; Tens&quot;);\n            change = change % 1000;\n\n            int numberOfFives = change / 500;\n            Console.WriteLine(numberOfFives + &quot; Fives&quot;);\n            change = change % 500;\n\n            int numberOfOnes = change / 100;\n            Console.WriteLine(numberOfOnes + &quot; Ones&quot;);\n            change = change % 100;\n\n\n            Console.ReadLine();\n        }\n\n\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$1649776250282Audhs:matrix.workhardpgh.com",
      "origin_server_ts": 1649776250174,
      "unsigned": {
        "age": 439478910
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 439394382
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "Function Examples\n```\nusing System;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(Sum(5, 7));\n            Console.WriteLine(Sum(12, 89));\n\n            int feet = 2;\n            int hands = 13;\n            Console.WriteLine(\"I have this many hands and feet: \" + Sum(feet, hands));\n\n            Console.WriteLine(\"If I double my feet, I'll have this many feet: \" + DoubleIt(feet));\n            Console.WriteLine(feet);\n\n            feet = DoubleIt(feet);\n\n\n            Console.WriteLine(\"Before changing\");\n            string[] names = { \"John\", \"Jean\", \"Saturn\" };\n            PrintMe(names); // prints the names\n\n            Console.WriteLine(\"After changing\");\n            ChangeFirstName(names);\n            PrintMe(names);\n\n\n\n            int x = 5;\n            int y = x;\n\n            x = 15;\n\n            Console.WriteLine(\"X: \" + x);\n            Console.WriteLine(\"Y: \" + y);\n\n\n            int[] numX = { 1, 2, 3 };\n            int[] numY = numX;\n            int[] numZ = new int[10];\n\n            Random rnd = new Random();\n\n\n            numY[1] = 23;\n\n            Console.WriteLine(numX[1]);\n\n\n            Console.ReadLine();\n        }\n\n        // a function that will add two numbers and return the result\n        static int Sum(int numberOne, int numberTwo)\n        {\n            return numberOne + numberTwo;\n        }\n\n        static int DoubleIt(int someNumber)\n        {\n            someNumber = someNumber * 2;\n            return someNumber;\n        }\n\n        static void PrintMe(string[] strings)\n        {\n            for (int i = 0; i < strings.Length; i++)\n            {\n                Console.WriteLine(strings[i]);\n            }\n        }\n\n        static void ChangeFirstName(string[] names)\n        {\n            names[0] = \"Hello there!\";\n        }\n\n    }\n}\n",
            "mimetype": "text/plain"
          },
          {
            "body": "<p>Function Examples</p>\n<pre><code>using System;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(Sum(5, 7));\n            Console.WriteLine(Sum(12, 89));\n\n            int feet = 2;\n            int hands = 13;\n            Console.WriteLine(&quot;I have this many hands and feet: &quot; + Sum(feet, hands));\n\n            Console.WriteLine(&quot;If I double my feet, I'll have this many feet: &quot; + DoubleIt(feet));\n            Console.WriteLine(feet);\n\n            feet = DoubleIt(feet);\n\n\n            Console.WriteLine(&quot;Before changing&quot;);\n            string[] names = { &quot;John&quot;, &quot;Jean&quot;, &quot;Saturn&quot; };\n            PrintMe(names); // prints the names\n\n            Console.WriteLine(&quot;After changing&quot;);\n            ChangeFirstName(names);\n            PrintMe(names);\n\n\n\n            int x = 5;\n            int y = x;\n\n            x = 15;\n\n            Console.WriteLine(&quot;X: &quot; + x);\n            Console.WriteLine(&quot;Y: &quot; + y);\n\n\n            int[] numX = { 1, 2, 3 };\n            int[] numY = numX;\n            int[] numZ = new int[10];\n\n            Random rnd = new Random();\n\n\n            numY[1] = 23;\n\n            Console.WriteLine(numX[1]);\n\n\n            Console.ReadLine();\n        }\n\n        // a function that will add two numbers and return the result\n        static int Sum(int numberOne, int numberTwo)\n        {\n            return numberOne + numberTwo;\n        }\n\n        static int DoubleIt(int someNumber)\n        {\n            someNumber = someNumber * 2;\n            return someNumber;\n        }\n\n        static void PrintMe(string[] strings)\n        {\n            for (int i = 0; i &lt; strings.Length; i++)\n            {\n                Console.WriteLine(strings[i]);\n            }\n        }\n\n        static void ChangeFirstName(string[] names)\n        {\n            names[0] = &quot;Hello there!&quot;;\n        }\n\n    }\n}\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "Function Examples\n```\nusing System;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(Sum(5, 7));\n            Console.WriteLine(Sum(12, 89));\n\n            int feet = 2;\n            int hands = 13;\n            Console.WriteLine(\"I have this many hands and feet: \" + Sum(feet, hands));\n\n            Console.WriteLine(\"If I double my feet, I'll have this many feet: \" + DoubleIt(feet));\n            Console.WriteLine(feet);\n\n            feet = DoubleIt(feet);\n\n\n            Console.WriteLine(\"Before changing\");\n            string[] names = { \"John\", \"Jean\", \"Saturn\" };\n            PrintMe(names); // prints the names\n\n            Console.WriteLine(\"After changing\");\n            ChangeFirstName(names);\n            PrintMe(names);\n\n\n\n            int x = 5;\n            int y = x;\n\n            x = 15;\n\n            Console.WriteLine(\"X: \" + x);\n            Console.WriteLine(\"Y: \" + y);\n\n\n            int[] numX = { 1, 2, 3 };\n            int[] numY = numX;\n            int[] numZ = new int[10];\n\n            Random rnd = new Random();\n\n\n            numY[1] = 23;\n\n            Console.WriteLine(numX[1]);\n\n\n            Console.ReadLine();\n        }\n\n        // a function that will add two numbers and return the result\n        static int Sum(int numberOne, int numberTwo)\n        {\n            return numberOne + numberTwo;\n        }\n\n        static int DoubleIt(int someNumber)\n        {\n            someNumber = someNumber * 2;\n            return someNumber;\n        }\n\n        static void PrintMe(string[] strings)\n        {\n            for (int i = 0; i < strings.Length; i++)\n            {\n                Console.WriteLine(strings[i]);\n            }\n        }\n\n        static void ChangeFirstName(string[] names)\n        {\n            names[0] = \"Hello there!\";\n        }\n\n    }\n}\n",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Function Examples</p>\n<pre><code>using System;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(Sum(5, 7));\n            Console.WriteLine(Sum(12, 89));\n\n            int feet = 2;\n            int hands = 13;\n            Console.WriteLine(&quot;I have this many hands and feet: &quot; + Sum(feet, hands));\n\n            Console.WriteLine(&quot;If I double my feet, I'll have this many feet: &quot; + DoubleIt(feet));\n            Console.WriteLine(feet);\n\n            feet = DoubleIt(feet);\n\n\n            Console.WriteLine(&quot;Before changing&quot;);\n            string[] names = { &quot;John&quot;, &quot;Jean&quot;, &quot;Saturn&quot; };\n            PrintMe(names); // prints the names\n\n            Console.WriteLine(&quot;After changing&quot;);\n            ChangeFirstName(names);\n            PrintMe(names);\n\n\n\n            int x = 5;\n            int y = x;\n\n            x = 15;\n\n            Console.WriteLine(&quot;X: &quot; + x);\n            Console.WriteLine(&quot;Y: &quot; + y);\n\n\n            int[] numX = { 1, 2, 3 };\n            int[] numY = numX;\n            int[] numZ = new int[10];\n\n            Random rnd = new Random();\n\n\n            numY[1] = 23;\n\n            Console.WriteLine(numX[1]);\n\n\n            Console.ReadLine();\n        }\n\n        // a function that will add two numbers and return the result\n        static int Sum(int numberOne, int numberTwo)\n        {\n            return numberOne + numberTwo;\n        }\n\n        static int DoubleIt(int someNumber)\n        {\n            someNumber = someNumber * 2;\n            return someNumber;\n        }\n\n        static void PrintMe(string[] strings)\n        {\n            for (int i = 0; i &lt; strings.Length; i++)\n            {\n                Console.WriteLine(strings[i]);\n            }\n        }\n\n        static void ChangeFirstName(string[] names)\n        {\n            names[0] = &quot;Hello there!&quot;;\n        }\n\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$1649778926286BjUrq:matrix.workhardpgh.com",
      "origin_server_ts": 1649778926306,
      "unsigned": {
        "age": 436802778
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 436718250
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@jallison:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "Initial working code:\n```\nusing System;\n\nnamespace Calculator\n{\nclass Program\n{\nstatic void Main(string\\[\\] args)\n{\n//Ask for a math problem\n//Break math problem into three parts--first number, plus/minus, second number\n//Do the math\nConsole.WriteLine(\"Please input problem:\");\nstring math = Console.ReadLine();\nint number1 = (int)Char.GetNumericValue(math\\[0\\]);\n//Console.WriteLine(number1);\nint number2 = (int)Char.GetNumericValue(math\\[2\\]);\n//Console.WriteLine(number2);\nint result = 0;\nif (math\\[1\\] == '+')\n{\nresult = number1 + number2;\n}\nelse if (math\\[1\\] == '-')\n{\nresult = number1 - number2;\n}\nelse if (math\\[1\\] == '\\*')\n{\nresult = number1 \\* number2;\n}\nelse if (math\\[1\\] == '/')\n{\nresult = number1 / number2;\n}\nConsole.WriteLine(result);\n}\n}\n}",
            "mimetype": "text/plain"
          },
          {
            "body": "<p>Initial working code:</p>\n<pre><code>using System;\n\nnamespace Calculator\n{\nclass Program\n{\nstatic void Main(string\\[\\] args)\n{\n//Ask for a math problem\n//Break math problem into three parts--first number, plus/minus, second number\n//Do the math\nConsole.WriteLine(&quot;Please input problem:&quot;);\nstring math = Console.ReadLine();\nint number1 = (int)Char.GetNumericValue(math\\[0\\]);\n//Console.WriteLine(number1);\nint number2 = (int)Char.GetNumericValue(math\\[2\\]);\n//Console.WriteLine(number2);\nint result = 0;\nif (math\\[1\\] == '+')\n{\nresult = number1 + number2;\n}\nelse if (math\\[1\\] == '-')\n{\nresult = number1 - number2;\n}\nelse if (math\\[1\\] == '\\*')\n{\nresult = number1 \\* number2;\n}\nelse if (math\\[1\\] == '/')\n{\nresult = number1 / number2;\n}\nConsole.WriteLine(result);\n}\n}\n}\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "Initial working code:\n```\nusing System;\n\nnamespace Calculator\n{\nclass Program\n{\nstatic void Main(string\\[\\] args)\n{\n//Ask for a math problem\n//Break math problem into three parts--first number, plus/minus, second number\n//Do the math\nConsole.WriteLine(\"Please input problem:\");\nstring math = Console.ReadLine();\nint number1 = (int)Char.GetNumericValue(math\\[0\\]);\n//Console.WriteLine(number1);\nint number2 = (int)Char.GetNumericValue(math\\[2\\]);\n//Console.WriteLine(number2);\nint result = 0;\nif (math\\[1\\] == '+')\n{\nresult = number1 + number2;\n}\nelse if (math\\[1\\] == '-')\n{\nresult = number1 - number2;\n}\nelse if (math\\[1\\] == '\\*')\n{\nresult = number1 \\* number2;\n}\nelse if (math\\[1\\] == '/')\n{\nresult = number1 / number2;\n}\nConsole.WriteLine(result);\n}\n}\n}",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Initial working code:</p>\n<pre><code>using System;\n\nnamespace Calculator\n{\nclass Program\n{\nstatic void Main(string\\[\\] args)\n{\n//Ask for a math problem\n//Break math problem into three parts--first number, plus/minus, second number\n//Do the math\nConsole.WriteLine(&quot;Please input problem:&quot;);\nstring math = Console.ReadLine();\nint number1 = (int)Char.GetNumericValue(math\\[0\\]);\n//Console.WriteLine(number1);\nint number2 = (int)Char.GetNumericValue(math\\[2\\]);\n//Console.WriteLine(number2);\nint result = 0;\nif (math\\[1\\] == '+')\n{\nresult = number1 + number2;\n}\nelse if (math\\[1\\] == '-')\n{\nresult = number1 - number2;\n}\nelse if (math\\[1\\] == '\\*')\n{\nresult = number1 \\* number2;\n}\nelse if (math\\[1\\] == '/')\n{\nresult = number1 / number2;\n}\nConsole.WriteLine(result);\n}\n}\n}\n</code></pre>\n"
      },
      "event_id": "$1649787392334oWPCI:matrix.workhardpgh.com",
      "origin_server_ts": 1649787392325,
      "unsigned": {
        "age": 428336759,
        "m.relations": {
          "m.replace": {
            "event_id": "$1649787496338qjgCd:matrix.workhardpgh.com",
            "origin_server_ts": 1649787496747,
            "sender": "@jallison:matrix.workhardpgh.com"
          }
        }
      },
      "user_id": "@jallison:matrix.workhardpgh.com",
      "age": 428252231
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@jim_code:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "Current working code for team 3: Yemi Truechild (she/her) Spenser Greeley andrew \n```csharp\nusing System;\n\nnamespace Calculator01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n\nConsole.WriteLine(\"Hey, I'm a calculator! What should I do?\");\n            string input = Console.ReadLine();\n\n            double firstNumber = char.GetNumericValue(input, 0);\n            double secondNumber = char.GetNumericValue(input, 2);\n\n            if (input.Contains(\"+\"))\n            {\n                Console.WriteLine(firstNumber + secondNumber);\n            }\n            if (input.Contains(\"-\"))\n            {\n                Console.WriteLine(firstNumber - secondNumber);\n            }\n   }\n    }\n}```",
            "mimetype": "text/plain"
          },
          {
            "body": "<p>Current working code for team 3: <a href=\"https://matrix.to/#/@onoyemi:matrix.workhardpgh.com\">Yemi Truechild (she/her)</a> <a href=\"https://matrix.to/#/@spensermg:matrix.workhardpgh.com\">Spenser Greeley</a> <a href=\"https://matrix.to/#/@andrew:matrix.workhardpgh.com\">andrew</a></p>\n<pre><code class=\"language-csharp\">using System;\n\nnamespace Calculator01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n\nConsole.WriteLine(&quot;Hey, I'm a calculator! What should I do?&quot;);\n            string input = Console.ReadLine();\n\n            double firstNumber = char.GetNumericValue(input, 0);\n            double secondNumber = char.GetNumericValue(input, 2);\n\n            if (input.Contains(&quot;+&quot;))\n            {\n                Console.WriteLine(firstNumber + secondNumber);\n            }\n            if (input.Contains(&quot;-&quot;))\n            {\n                Console.WriteLine(firstNumber - secondNumber);\n            }\n   }\n    }\n}```\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "Current working code for team 3: Yemi Truechild (she/her) Spenser Greeley andrew \n```csharp\nusing System;\n\nnamespace Calculator01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n\nConsole.WriteLine(\"Hey, I'm a calculator! What should I do?\");\n            string input = Console.ReadLine();\n\n            double firstNumber = char.GetNumericValue(input, 0);\n            double secondNumber = char.GetNumericValue(input, 2);\n\n            if (input.Contains(\"+\"))\n            {\n                Console.WriteLine(firstNumber + secondNumber);\n            }\n            if (input.Contains(\"-\"))\n            {\n                Console.WriteLine(firstNumber - secondNumber);\n            }\n   }\n    }\n}```",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Current working code for team 3: <a href=\"https://matrix.to/#/@onoyemi:matrix.workhardpgh.com\">Yemi Truechild (she/her)</a> <a href=\"https://matrix.to/#/@spensermg:matrix.workhardpgh.com\">Spenser Greeley</a> <a href=\"https://matrix.to/#/@andrew:matrix.workhardpgh.com\">andrew</a></p>\n<pre><code class=\"language-csharp\">using System;\n\nnamespace Calculator01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n\nConsole.WriteLine(&quot;Hey, I'm a calculator! What should I do?&quot;);\n            string input = Console.ReadLine();\n\n            double firstNumber = char.GetNumericValue(input, 0);\n            double secondNumber = char.GetNumericValue(input, 2);\n\n            if (input.Contains(&quot;+&quot;))\n            {\n                Console.WriteLine(firstNumber + secondNumber);\n            }\n            if (input.Contains(&quot;-&quot;))\n            {\n                Console.WriteLine(firstNumber - secondNumber);\n            }\n   }\n    }\n}```\n</code></pre>\n"
      },
      "event_id": "$1649787993341fvINc:matrix.workhardpgh.com",
      "origin_server_ts": 1649787993585,
      "unsigned": {
        "age": 427735499
      },
      "user_id": "@jim_code:matrix.workhardpgh.com",
      "age": 427649981
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@jallison:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "Current Working Code\n```\nusing System;\n\nnamespace Calculator\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Ask for a math problem\n            //Break math problem into three parts--first number, plus/minus, second number\n            //Do the math\n            Console.WriteLine(\"Please input problem:\");\n            string math = Console.ReadLine();\n            //string number1 = \"\";\n            //string op = \"\";\n            //string number2 = \"\";\n            string[] mathparts = new string[3];\n            int variablecounter = 0;\n            for(int i = 0; i < math.Length; i++)\n            {\n                //Console.WriteLine(math[i]);\n                char potato = math[i];\n                //check if potato is an integer\n                //check if potato is a space character\n                //check if potato is an operator\n                if (potato == '0' || potato == '1' || potato == '2' || potato == '3' || potato == '4' || potato == '5' || potato == '6' || potato == '7' || potato == '8' || potato == '9')\n                {\n                    mathparts[variablecounter] += potato;\n                    Console.WriteLine(\"This is an integer \" + potato);\n                }\n                else\n                {\n                    Console.WriteLine(\"This is not an integer \" + potato);\n                }\n            }\n            //int number1 = (int)Char.GetNumericValue(math[0]);\n            ////Console.WriteLine(number1);\n            //int number2 = (int)Char.GetNumericValue(math[4]);\n            ////Console.WriteLine(number2);\n            //int result = 0;\n            //if (math[2] == '+')\n            //{\n            //    result = number1 + number2;\n            //}\n            //else if (math[2] == '-')\n            //{\n            //    result = number1 - number2;\n            //}\n            //else if (math[2] == '*')\n            //{\n            //    result = number1 * number2;\n            //}\n            //else if (math[2] == '/')\n            //{\n            //    result = number1 / number2;\n            //}\n            //    Console.WriteLine(result);\n        }\n    }\n}\n",
            "mimetype": "text/plain"
          },
          {
            "body": "<p>Current Working Code</p>\n<pre><code>using System;\n\nnamespace Calculator\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Ask for a math problem\n            //Break math problem into three parts--first number, plus/minus, second number\n            //Do the math\n            Console.WriteLine(&quot;Please input problem:&quot;);\n            string math = Console.ReadLine();\n            //string number1 = &quot;&quot;;\n            //string op = &quot;&quot;;\n            //string number2 = &quot;&quot;;\n            string[] mathparts = new string[3];\n            int variablecounter = 0;\n            for(int i = 0; i &lt; math.Length; i++)\n            {\n                //Console.WriteLine(math[i]);\n                char potato = math[i];\n                //check if potato is an integer\n                //check if potato is a space character\n                //check if potato is an operator\n                if (potato == '0' || potato == '1' || potato == '2' || potato == '3' || potato == '4' || potato == '5' || potato == '6' || potato == '7' || potato == '8' || potato == '9')\n                {\n                    mathparts[variablecounter] += potato;\n                    Console.WriteLine(&quot;This is an integer &quot; + potato);\n                }\n                else\n                {\n                    Console.WriteLine(&quot;This is not an integer &quot; + potato);\n                }\n            }\n            //int number1 = (int)Char.GetNumericValue(math[0]);\n            ////Console.WriteLine(number1);\n            //int number2 = (int)Char.GetNumericValue(math[4]);\n            ////Console.WriteLine(number2);\n            //int result = 0;\n            //if (math[2] == '+')\n            //{\n            //    result = number1 + number2;\n            //}\n            //else if (math[2] == '-')\n            //{\n            //    result = number1 - number2;\n            //}\n            //else if (math[2] == '*')\n            //{\n            //    result = number1 * number2;\n            //}\n            //else if (math[2] == '/')\n            //{\n            //    result = number1 / number2;\n            //}\n            //    Console.WriteLine(result);\n        }\n    }\n}\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "Current Working Code\n```\nusing System;\n\nnamespace Calculator\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Ask for a math problem\n            //Break math problem into three parts--first number, plus/minus, second number\n            //Do the math\n            Console.WriteLine(\"Please input problem:\");\n            string math = Console.ReadLine();\n            //string number1 = \"\";\n            //string op = \"\";\n            //string number2 = \"\";\n            string[] mathparts = new string[3];\n            int variablecounter = 0;\n            for(int i = 0; i < math.Length; i++)\n            {\n                //Console.WriteLine(math[i]);\n                char potato = math[i];\n                //check if potato is an integer\n                //check if potato is a space character\n                //check if potato is an operator\n                if (potato == '0' || potato == '1' || potato == '2' || potato == '3' || potato == '4' || potato == '5' || potato == '6' || potato == '7' || potato == '8' || potato == '9')\n                {\n                    mathparts[variablecounter] += potato;\n                    Console.WriteLine(\"This is an integer \" + potato);\n                }\n                else\n                {\n                    Console.WriteLine(\"This is not an integer \" + potato);\n                }\n            }\n            //int number1 = (int)Char.GetNumericValue(math[0]);\n            ////Console.WriteLine(number1);\n            //int number2 = (int)Char.GetNumericValue(math[4]);\n            ////Console.WriteLine(number2);\n            //int result = 0;\n            //if (math[2] == '+')\n            //{\n            //    result = number1 + number2;\n            //}\n            //else if (math[2] == '-')\n            //{\n            //    result = number1 - number2;\n            //}\n            //else if (math[2] == '*')\n            //{\n            //    result = number1 * number2;\n            //}\n            //else if (math[2] == '/')\n            //{\n            //    result = number1 / number2;\n            //}\n            //    Console.WriteLine(result);\n        }\n    }\n}\n",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Current Working Code</p>\n<pre><code>using System;\n\nnamespace Calculator\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Ask for a math problem\n            //Break math problem into three parts--first number, plus/minus, second number\n            //Do the math\n            Console.WriteLine(&quot;Please input problem:&quot;);\n            string math = Console.ReadLine();\n            //string number1 = &quot;&quot;;\n            //string op = &quot;&quot;;\n            //string number2 = &quot;&quot;;\n            string[] mathparts = new string[3];\n            int variablecounter = 0;\n            for(int i = 0; i &lt; math.Length; i++)\n            {\n                //Console.WriteLine(math[i]);\n                char potato = math[i];\n                //check if potato is an integer\n                //check if potato is a space character\n                //check if potato is an operator\n                if (potato == '0' || potato == '1' || potato == '2' || potato == '3' || potato == '4' || potato == '5' || potato == '6' || potato == '7' || potato == '8' || potato == '9')\n                {\n                    mathparts[variablecounter] += potato;\n                    Console.WriteLine(&quot;This is an integer &quot; + potato);\n                }\n                else\n                {\n                    Console.WriteLine(&quot;This is not an integer &quot; + potato);\n                }\n            }\n            //int number1 = (int)Char.GetNumericValue(math[0]);\n            ////Console.WriteLine(number1);\n            //int number2 = (int)Char.GetNumericValue(math[4]);\n            ////Console.WriteLine(number2);\n            //int result = 0;\n            //if (math[2] == '+')\n            //{\n            //    result = number1 + number2;\n            //}\n            //else if (math[2] == '-')\n            //{\n            //    result = number1 - number2;\n            //}\n            //else if (math[2] == '*')\n            //{\n            //    result = number1 * number2;\n            //}\n            //else if (math[2] == '/')\n            //{\n            //    result = number1 / number2;\n            //}\n            //    Console.WriteLine(result);\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$1649789233346ERgaV:matrix.workhardpgh.com",
      "origin_server_ts": 1649789233252,
      "unsigned": {
        "age": 426495832
      },
      "user_id": "@jallison:matrix.workhardpgh.com",
      "age": 426410314
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@tobiasfunction:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "Joe W (he/him) donna.san davidlasky \n\n```csharp\nusing System;\n\nnamespace Calculator\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // == PLAN ==\n            // - ask for a math problem\n            // - store as string\n            // - break down problem\n            // - compute and answer\n            // - display the answer\n\n            // Ask question\n            Console.WriteLine(\"Please enter your math problem.\");\n            // Get input as a string\n            string problem = Console.ReadLine();\n            // Remove potential spaces\n            problem = problem.Replace(\" \", \"\");\n\n            // Define variables\n            // Empty strings to build numbers\n            string firstNumberString = \"\";\n            string secondNumberString = \"\";\n            // Character to store operator\n            char Operator = '0';\n            // Marks whether first number has been finished\n            bool firstNumberDone = false;\n\n            // FOR LOOP checks characters one by one\n            for (int i = 0; i < problem.Length; i++)\n            {\n                // checks if the character is a number\n                if (Char.IsNumber(problem, i))\n                {\n                    // checks if first number is done\n                    if (firstNumberDone == false) // first number is not done\n                    {\n                        firstNumberString += problem[i];\n                    }\n                    else // first number is done\n                    {\n                        secondNumberString += problem[i];\n                    }\n                }\n                else // Character is not a number\n                {\n                    // when it hits not-a-number => first number is complete\n                    firstNumberDone = true;\n\n                    // capture operator\n                    Operator = problem[i];\n\n                }\n            }\n\n            // convert numbers to integers\n            int firstNumber = Convert.ToInt32(firstNumberString);\n            int secondNumber = Convert.ToInt32(secondNumberString);\n\n            Console.WriteLine(\"firstNumber: \" + firstNumber);\n            Console.WriteLine(\"secondNumber: \" + secondNumber);\n\n\n            // pipe it through existing math statement\n\n            int solution = 0;\n\n            // DO THE MATH\n\n            // identify the operator\n            if (Operator == '+')\n            {\n                solution = firstNumber + secondNumber;\n            }\n            else if (Operator == '-')\n            {\n                solution = firstNumber - secondNumber;\n            }\n            else if (Operator == '*')\n            {\n                solution = firstNumber * secondNumber;\n            }\n\n            Console.WriteLine(\"solution: \" + solution);\n\n        }\n    }\n}\n```",
            "mimetype": "text/plain"
          },
          {
            "body": "<p><a href=\"https://matrix.to/#/@joewalker147:matrix.workhardpgh.com\">Joe W (he/him)</a> <a href=\"https://matrix.to/#/@donna.san:matrix.workhardpgh.com\">donna.san</a> <a href=\"https://matrix.to/#/@davidlasky:matrix.workhardpgh.com\">davidlasky</a></p>\n<pre><code class=\"language-csharp\">using System;\n\nnamespace Calculator\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // == PLAN ==\n            // - ask for a math problem\n            // - store as string\n            // - break down problem\n            // - compute and answer\n            // - display the answer\n\n            // Ask question\n            Console.WriteLine(&quot;Please enter your math problem.&quot;);\n            // Get input as a string\n            string problem = Console.ReadLine();\n            // Remove potential spaces\n            problem = problem.Replace(&quot; &quot;, &quot;&quot;);\n\n            // Define variables\n            // Empty strings to build numbers\n            string firstNumberString = &quot;&quot;;\n            string secondNumberString = &quot;&quot;;\n            // Character to store operator\n            char Operator = '0';\n            // Marks whether first number has been finished\n            bool firstNumberDone = false;\n\n            // FOR LOOP checks characters one by one\n            for (int i = 0; i &lt; problem.Length; i++)\n            {\n                // checks if the character is a number\n                if (Char.IsNumber(problem, i))\n                {\n                    // checks if first number is done\n                    if (firstNumberDone == false) // first number is not done\n                    {\n                        firstNumberString += problem[i];\n                    }\n                    else // first number is done\n                    {\n                        secondNumberString += problem[i];\n                    }\n                }\n                else // Character is not a number\n                {\n                    // when it hits not-a-number =&gt; first number is complete\n                    firstNumberDone = true;\n\n                    // capture operator\n                    Operator = problem[i];\n\n                }\n            }\n\n            // convert numbers to integers\n            int firstNumber = Convert.ToInt32(firstNumberString);\n            int secondNumber = Convert.ToInt32(secondNumberString);\n\n            Console.WriteLine(&quot;firstNumber: &quot; + firstNumber);\n            Console.WriteLine(&quot;secondNumber: &quot; + secondNumber);\n\n\n            // pipe it through existing math statement\n\n            int solution = 0;\n\n            // DO THE MATH\n\n            // identify the operator\n            if (Operator == '+')\n            {\n                solution = firstNumber + secondNumber;\n            }\n            else if (Operator == '-')\n            {\n                solution = firstNumber - secondNumber;\n            }\n            else if (Operator == '*')\n            {\n                solution = firstNumber * secondNumber;\n            }\n\n            Console.WriteLine(&quot;solution: &quot; + solution);\n\n        }\n    }\n}\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "Joe W (he/him) donna.san davidlasky \n\n```csharp\nusing System;\n\nnamespace Calculator\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // == PLAN ==\n            // - ask for a math problem\n            // - store as string\n            // - break down problem\n            // - compute and answer\n            // - display the answer\n\n            // Ask question\n            Console.WriteLine(\"Please enter your math problem.\");\n            // Get input as a string\n            string problem = Console.ReadLine();\n            // Remove potential spaces\n            problem = problem.Replace(\" \", \"\");\n\n            // Define variables\n            // Empty strings to build numbers\n            string firstNumberString = \"\";\n            string secondNumberString = \"\";\n            // Character to store operator\n            char Operator = '0';\n            // Marks whether first number has been finished\n            bool firstNumberDone = false;\n\n            // FOR LOOP checks characters one by one\n            for (int i = 0; i < problem.Length; i++)\n            {\n                // checks if the character is a number\n                if (Char.IsNumber(problem, i))\n                {\n                    // checks if first number is done\n                    if (firstNumberDone == false) // first number is not done\n                    {\n                        firstNumberString += problem[i];\n                    }\n                    else // first number is done\n                    {\n                        secondNumberString += problem[i];\n                    }\n                }\n                else // Character is not a number\n                {\n                    // when it hits not-a-number => first number is complete\n                    firstNumberDone = true;\n\n                    // capture operator\n                    Operator = problem[i];\n\n                }\n            }\n\n            // convert numbers to integers\n            int firstNumber = Convert.ToInt32(firstNumberString);\n            int secondNumber = Convert.ToInt32(secondNumberString);\n\n            Console.WriteLine(\"firstNumber: \" + firstNumber);\n            Console.WriteLine(\"secondNumber: \" + secondNumber);\n\n\n            // pipe it through existing math statement\n\n            int solution = 0;\n\n            // DO THE MATH\n\n            // identify the operator\n            if (Operator == '+')\n            {\n                solution = firstNumber + secondNumber;\n            }\n            else if (Operator == '-')\n            {\n                solution = firstNumber - secondNumber;\n            }\n            else if (Operator == '*')\n            {\n                solution = firstNumber * secondNumber;\n            }\n\n            Console.WriteLine(\"solution: \" + solution);\n\n        }\n    }\n}\n```",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p><a href=\"https://matrix.to/#/@joewalker147:matrix.workhardpgh.com\">Joe W (he/him)</a> <a href=\"https://matrix.to/#/@donna.san:matrix.workhardpgh.com\">donna.san</a> <a href=\"https://matrix.to/#/@davidlasky:matrix.workhardpgh.com\">davidlasky</a></p>\n<pre><code class=\"language-csharp\">using System;\n\nnamespace Calculator\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // == PLAN ==\n            // - ask for a math problem\n            // - store as string\n            // - break down problem\n            // - compute and answer\n            // - display the answer\n\n            // Ask question\n            Console.WriteLine(&quot;Please enter your math problem.&quot;);\n            // Get input as a string\n            string problem = Console.ReadLine();\n            // Remove potential spaces\n            problem = problem.Replace(&quot; &quot;, &quot;&quot;);\n\n            // Define variables\n            // Empty strings to build numbers\n            string firstNumberString = &quot;&quot;;\n            string secondNumberString = &quot;&quot;;\n            // Character to store operator\n            char Operator = '0';\n            // Marks whether first number has been finished\n            bool firstNumberDone = false;\n\n            // FOR LOOP checks characters one by one\n            for (int i = 0; i &lt; problem.Length; i++)\n            {\n                // checks if the character is a number\n                if (Char.IsNumber(problem, i))\n                {\n                    // checks if first number is done\n                    if (firstNumberDone == false) // first number is not done\n                    {\n                        firstNumberString += problem[i];\n                    }\n                    else // first number is done\n                    {\n                        secondNumberString += problem[i];\n                    }\n                }\n                else // Character is not a number\n                {\n                    // when it hits not-a-number =&gt; first number is complete\n                    firstNumberDone = true;\n\n                    // capture operator\n                    Operator = problem[i];\n\n                }\n            }\n\n            // convert numbers to integers\n            int firstNumber = Convert.ToInt32(firstNumberString);\n            int secondNumber = Convert.ToInt32(secondNumberString);\n\n            Console.WriteLine(&quot;firstNumber: &quot; + firstNumber);\n            Console.WriteLine(&quot;secondNumber: &quot; + secondNumber);\n\n\n            // pipe it through existing math statement\n\n            int solution = 0;\n\n            // DO THE MATH\n\n            // identify the operator\n            if (Operator == '+')\n            {\n                solution = firstNumber + secondNumber;\n            }\n            else if (Operator == '-')\n            {\n                solution = firstNumber - secondNumber;\n            }\n            else if (Operator == '*')\n            {\n                solution = firstNumber * secondNumber;\n            }\n\n            Console.WriteLine(&quot;solution: &quot; + solution);\n\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$1649789882347ocBwO:matrix.workhardpgh.com",
      "origin_server_ts": 1649789882497,
      "unsigned": {
        "age": 425846587,
        "m.relations": {
          "m.replace": {
            "event_id": "$1649790374351qiAAw:matrix.workhardpgh.com",
            "origin_server_ts": 1649790374406,
            "sender": "@tobiasfunction:matrix.workhardpgh.com"
          }
        }
      },
      "user_id": "@tobiasfunction:matrix.workhardpgh.com",
      "age": 425761069
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@jim_code:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "Yemi Truechild (she/her): Spenser Greeley andrew \n\nCurrent working bonus code for team 3:\n\n```csharp\nusing System;\n\nnamespace Calculator01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Take in a math problem\n            // like, 2 + 2\n            // or, 5 - 1\n\n            // give the person the right answer to that problem\n\n            // Bonus:\n            // Make it work with multi-digit numbers\n            // 71 + 238\n\n            // Extra Bonus:\n            // Consider how you might do 3 numbers instead of two\n\n\n            //1. Ask for a mathematical problem\n            //2. ReadLine for input\n            //3. Determine user's operation\n            //4. Create variables that will store values\n\n            //LeftNumber = input.Substring(0, 3);\n\n            //Console.WriteLine(\"Hey, I'm a calculator! What should I do?\");\n            //string input = Console.ReadLine();\n\n            //double firstNumber = char.GetNumericValue(input, 0);\n            //double secondNumber = char.GetNumericValue(input, 2);\n\n            //if (input.Contains(\"+\"))\n            //{\n            //    Console.WriteLine(firstNumber + secondNumber);\n            //}\n            //if (input.Contains(\"-\"))\n            //{\n            //    Console.WriteLine(firstNumber - secondNumber);\n            //}\n\n            Console.WriteLine(\"Hey! I'm a calculator, what's up?\");\n            string input = Console.ReadLine();\n            //Console.WriteLine(input);\n            //Console.WriteLine(input.Substring(0, 4));\n            int place = 0;\n\n            for (int i = 0; i < input.Length; i++)\n            {\n                if (input[i] == '+' || input[i] == '-')\n                {\n                    place = i;\n                }\n            }\n            string firstNumber = input.Substring(0, place);\n            string secondNumber = input.Substring(place + 1);\n            //Console.WriteLine(firstNumber);\n            //Console.WriteLine(secondNumber);\n\n            int num1 = Convert.ToInt32(firstNumber);\n            int num2 = Convert.ToInt32(secondNumber);\n            //Console.WriteLine(num1 + num2);\n\n            if (input.Contains(\"+\"))\n            {\n                Console.WriteLine(num1 + num2);\n            }\n            if (input.Contains(\"-\"))\n            {\n                Console.WriteLine(num1 - num2);\n            }\n        }\n    }\n}\n``` ",
            "mimetype": "text/plain"
          },
          {
            "body": "<p><a href=\"https://matrix.to/#/@onoyemi:matrix.workhardpgh.com\">Yemi Truechild (she/her)</a>: <a href=\"https://matrix.to/#/@spensermg:matrix.workhardpgh.com\">Spenser Greeley</a> <a href=\"https://matrix.to/#/@andrew:matrix.workhardpgh.com\">andrew</a></p>\n<p>Current working bonus code for team 3:</p>\n<pre><code class=\"language-csharp\">using System;\n\nnamespace Calculator01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Take in a math problem\n            // like, 2 + 2\n            // or, 5 - 1\n\n            // give the person the right answer to that problem\n\n            // Bonus:\n            // Make it work with multi-digit numbers\n            // 71 + 238\n\n            // Extra Bonus:\n            // Consider how you might do 3 numbers instead of two\n\n\n            //1. Ask for a mathematical problem\n            //2. ReadLine for input\n            //3. Determine user's operation\n            //4. Create variables that will store values\n\n            //LeftNumber = input.Substring(0, 3);\n\n            //Console.WriteLine(&quot;Hey, I'm a calculator! What should I do?&quot;);\n            //string input = Console.ReadLine();\n\n            //double firstNumber = char.GetNumericValue(input, 0);\n            //double secondNumber = char.GetNumericValue(input, 2);\n\n            //if (input.Contains(&quot;+&quot;))\n            //{\n            //    Console.WriteLine(firstNumber + secondNumber);\n            //}\n            //if (input.Contains(&quot;-&quot;))\n            //{\n            //    Console.WriteLine(firstNumber - secondNumber);\n            //}\n\n            Console.WriteLine(&quot;Hey! I'm a calculator, what's up?&quot;);\n            string input = Console.ReadLine();\n            //Console.WriteLine(input);\n            //Console.WriteLine(input.Substring(0, 4));\n            int place = 0;\n\n            for (int i = 0; i &lt; input.Length; i++)\n            {\n                if (input[i] == '+' || input[i] == '-')\n                {\n                    place = i;\n                }\n            }\n            string firstNumber = input.Substring(0, place);\n            string secondNumber = input.Substring(place + 1);\n            //Console.WriteLine(firstNumber);\n            //Console.WriteLine(secondNumber);\n\n            int num1 = Convert.ToInt32(firstNumber);\n            int num2 = Convert.ToInt32(secondNumber);\n            //Console.WriteLine(num1 + num2);\n\n            if (input.Contains(&quot;+&quot;))\n            {\n                Console.WriteLine(num1 + num2);\n            }\n            if (input.Contains(&quot;-&quot;))\n            {\n                Console.WriteLine(num1 - num2);\n            }\n        }\n    }\n}\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "Yemi Truechild (she/her): Spenser Greeley andrew \n\nCurrent working bonus code for team 3:\n\n```csharp\nusing System;\n\nnamespace Calculator01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Take in a math problem\n            // like, 2 + 2\n            // or, 5 - 1\n\n            // give the person the right answer to that problem\n\n            // Bonus:\n            // Make it work with multi-digit numbers\n            // 71 + 238\n\n            // Extra Bonus:\n            // Consider how you might do 3 numbers instead of two\n\n\n            //1. Ask for a mathematical problem\n            //2. ReadLine for input\n            //3. Determine user's operation\n            //4. Create variables that will store values\n\n            //LeftNumber = input.Substring(0, 3);\n\n            //Console.WriteLine(\"Hey, I'm a calculator! What should I do?\");\n            //string input = Console.ReadLine();\n\n            //double firstNumber = char.GetNumericValue(input, 0);\n            //double secondNumber = char.GetNumericValue(input, 2);\n\n            //if (input.Contains(\"+\"))\n            //{\n            //    Console.WriteLine(firstNumber + secondNumber);\n            //}\n            //if (input.Contains(\"-\"))\n            //{\n            //    Console.WriteLine(firstNumber - secondNumber);\n            //}\n\n            Console.WriteLine(\"Hey! I'm a calculator, what's up?\");\n            string input = Console.ReadLine();\n            //Console.WriteLine(input);\n            //Console.WriteLine(input.Substring(0, 4));\n            int place = 0;\n\n            for (int i = 0; i < input.Length; i++)\n            {\n                if (input[i] == '+' || input[i] == '-')\n                {\n                    place = i;\n                }\n            }\n            string firstNumber = input.Substring(0, place);\n            string secondNumber = input.Substring(place + 1);\n            //Console.WriteLine(firstNumber);\n            //Console.WriteLine(secondNumber);\n\n            int num1 = Convert.ToInt32(firstNumber);\n            int num2 = Convert.ToInt32(secondNumber);\n            //Console.WriteLine(num1 + num2);\n\n            if (input.Contains(\"+\"))\n            {\n                Console.WriteLine(num1 + num2);\n            }\n            if (input.Contains(\"-\"))\n            {\n                Console.WriteLine(num1 - num2);\n            }\n        }\n    }\n}\n``` ",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p><a href=\"https://matrix.to/#/@onoyemi:matrix.workhardpgh.com\">Yemi Truechild (she/her)</a>: <a href=\"https://matrix.to/#/@spensermg:matrix.workhardpgh.com\">Spenser Greeley</a> <a href=\"https://matrix.to/#/@andrew:matrix.workhardpgh.com\">andrew</a></p>\n<p>Current working bonus code for team 3:</p>\n<pre><code class=\"language-csharp\">using System;\n\nnamespace Calculator01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Take in a math problem\n            // like, 2 + 2\n            // or, 5 - 1\n\n            // give the person the right answer to that problem\n\n            // Bonus:\n            // Make it work with multi-digit numbers\n            // 71 + 238\n\n            // Extra Bonus:\n            // Consider how you might do 3 numbers instead of two\n\n\n            //1. Ask for a mathematical problem\n            //2. ReadLine for input\n            //3. Determine user's operation\n            //4. Create variables that will store values\n\n            //LeftNumber = input.Substring(0, 3);\n\n            //Console.WriteLine(&quot;Hey, I'm a calculator! What should I do?&quot;);\n            //string input = Console.ReadLine();\n\n            //double firstNumber = char.GetNumericValue(input, 0);\n            //double secondNumber = char.GetNumericValue(input, 2);\n\n            //if (input.Contains(&quot;+&quot;))\n            //{\n            //    Console.WriteLine(firstNumber + secondNumber);\n            //}\n            //if (input.Contains(&quot;-&quot;))\n            //{\n            //    Console.WriteLine(firstNumber - secondNumber);\n            //}\n\n            Console.WriteLine(&quot;Hey! I'm a calculator, what's up?&quot;);\n            string input = Console.ReadLine();\n            //Console.WriteLine(input);\n            //Console.WriteLine(input.Substring(0, 4));\n            int place = 0;\n\n            for (int i = 0; i &lt; input.Length; i++)\n            {\n                if (input[i] == '+' || input[i] == '-')\n                {\n                    place = i;\n                }\n            }\n            string firstNumber = input.Substring(0, place);\n            string secondNumber = input.Substring(place + 1);\n            //Console.WriteLine(firstNumber);\n            //Console.WriteLine(secondNumber);\n\n            int num1 = Convert.ToInt32(firstNumber);\n            int num2 = Convert.ToInt32(secondNumber);\n            //Console.WriteLine(num1 + num2);\n\n            if (input.Contains(&quot;+&quot;))\n            {\n                Console.WriteLine(num1 + num2);\n            }\n            if (input.Contains(&quot;-&quot;))\n            {\n                Console.WriteLine(num1 - num2);\n            }\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$1649795844359DWCgO:matrix.workhardpgh.com",
      "origin_server_ts": 1649795844908,
      "unsigned": {
        "age": 419884176
      },
      "user_id": "@jim_code:matrix.workhardpgh.com",
      "age": 419798658
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@jallison:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "Latest Working Code\n\n```\nusing System;\n\nnamespace Calculator\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Ask for a math problem\n            //Break math problem into three parts--first number, plus/minus, second number\n            //Do the math\n            Console.WriteLine(\"Please input problem:\");\n            string math = Console.ReadLine();\n            //string number1 = \"\";\n            //string op = \"\";\n            //string number2 = \"\";\n            //expand mathparts somehow--add spaces? Infinite space? To infinity and beyond?\n            //mathparts is an array that stores the seperate parts of the math problem\n            string[] mathparts = new string[3];\n            //variablecounter does something. I kind of forget what.\n            //I think it helps count out the different numbers somehow?\n            //tells computer where to store characters in mathparts\n            int variablecounter = 0;\n            //tells computer when to break between parts of the equation that are being stored in mathparts\n            //keeps track of whether previous character is an integer or an operator\n            bool isinteger = true;\n            //loops over user input one character at a time\n            for(int i = 0; i < math.Length; i++)\n            {\n                //Console.WriteLine(math[i]);\n                char potato = math[i];\n                //check if potato is an integer\n                //check if potato is a space character\n                //check if potato is an operator\n                if (potato == '0' || potato == '1' || potato == '2' || potato == '3' || potato == '4' || potato == '5' || potato == '6' || potato == '7' || potato == '8' || potato == '9')\n                {\n                    //mathparts[variablecounter] += potato;\n                    Console.WriteLine(\"This is an integer \" + potato);\n                    if (!isinteger)\n                    {\n                        //identify where number stops and operator starts\n                        variablecounter++;\n                        isinteger = true;\n                        Console.WriteLine(\"Transition from number to operator\");\n                    }\n                }\n                else if (potato == '+' || potato == '-' || potato == '*' || potato == '/')\n                {\n                    Console.WriteLine(\"This is an operator \" + potato);\n                    char op = potato;\n                    if (isinteger)\n                    {\n                        //identify where operator stops and number starts\n                        variablecounter++;\n                        isinteger = false;\n                        Console.WriteLine(\"Transition from operator to number\");\n                    }\n                }\n                else\n                {\n                    Console.WriteLine(\"This is not an integer \" + potato);\n                    continue;\n                }\n                mathparts[variablecounter] += potato;\n            }\n            for (int j = 0; j < mathparts.Length; j++)\n            {\n                Console.WriteLine(mathparts[j]);\n            }\n            int number1 = Convert.ToInt32(mathparts[0]);\n            //Console.WriteLine(number1);\n            int number2 = Convert.ToInt32(mathparts[2]);\n            //Console.WriteLine(number2);\n            int result = 0;\n            if (mathparts[1] == \"+\")\n            {\n                result = number1 + number2;\n            }\n            else if (mathparts[1] == \"-\")\n            {\n                result = number1 - number2;\n            }\n            else if (mathparts[1] == \"*\")\n            {\n                result = number1 * number2;\n            }\n            else if (mathparts[1] == \"/\")\n            {\n                result = number1 / number2;\n            }\n            Console.WriteLine(result);\n        }\n    }\n}\n```",
            "mimetype": "text/plain"
          },
          {
            "body": "<p>Latest Working Code</p>\n<pre><code>using System;\n\nnamespace Calculator\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Ask for a math problem\n            //Break math problem into three parts--first number, plus/minus, second number\n            //Do the math\n            Console.WriteLine(&quot;Please input problem:&quot;);\n            string math = Console.ReadLine();\n            //string number1 = &quot;&quot;;\n            //string op = &quot;&quot;;\n            //string number2 = &quot;&quot;;\n            //expand mathparts somehow--add spaces? Infinite space? To infinity and beyond?\n            //mathparts is an array that stores the seperate parts of the math problem\n            string[] mathparts = new string[3];\n            //variablecounter does something. I kind of forget what.\n            //I think it helps count out the different numbers somehow?\n            //tells computer where to store characters in mathparts\n            int variablecounter = 0;\n            //tells computer when to break between parts of the equation that are being stored in mathparts\n            //keeps track of whether previous character is an integer or an operator\n            bool isinteger = true;\n            //loops over user input one character at a time\n            for(int i = 0; i &lt; math.Length; i++)\n            {\n                //Console.WriteLine(math[i]);\n                char potato = math[i];\n                //check if potato is an integer\n                //check if potato is a space character\n                //check if potato is an operator\n                if (potato == '0' || potato == '1' || potato == '2' || potato == '3' || potato == '4' || potato == '5' || potato == '6' || potato == '7' || potato == '8' || potato == '9')\n                {\n                    //mathparts[variablecounter] += potato;\n                    Console.WriteLine(&quot;This is an integer &quot; + potato);\n                    if (!isinteger)\n                    {\n                        //identify where number stops and operator starts\n                        variablecounter++;\n                        isinteger = true;\n                        Console.WriteLine(&quot;Transition from number to operator&quot;);\n                    }\n                }\n                else if (potato == '+' || potato == '-' || potato == '*' || potato == '/')\n                {\n                    Console.WriteLine(&quot;This is an operator &quot; + potato);\n                    char op = potato;\n                    if (isinteger)\n                    {\n                        //identify where operator stops and number starts\n                        variablecounter++;\n                        isinteger = false;\n                        Console.WriteLine(&quot;Transition from operator to number&quot;);\n                    }\n                }\n                else\n                {\n                    Console.WriteLine(&quot;This is not an integer &quot; + potato);\n                    continue;\n                }\n                mathparts[variablecounter] += potato;\n            }\n            for (int j = 0; j &lt; mathparts.Length; j++)\n            {\n                Console.WriteLine(mathparts[j]);\n            }\n            int number1 = Convert.ToInt32(mathparts[0]);\n            //Console.WriteLine(number1);\n            int number2 = Convert.ToInt32(mathparts[2]);\n            //Console.WriteLine(number2);\n            int result = 0;\n            if (mathparts[1] == &quot;+&quot;)\n            {\n                result = number1 + number2;\n            }\n            else if (mathparts[1] == &quot;-&quot;)\n            {\n                result = number1 - number2;\n            }\n            else if (mathparts[1] == &quot;*&quot;)\n            {\n                result = number1 * number2;\n            }\n            else if (mathparts[1] == &quot;/&quot;)\n            {\n                result = number1 / number2;\n            }\n            Console.WriteLine(result);\n        }\n    }\n}\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "Latest Working Code\n\n```\nusing System;\n\nnamespace Calculator\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Ask for a math problem\n            //Break math problem into three parts--first number, plus/minus, second number\n            //Do the math\n            Console.WriteLine(\"Please input problem:\");\n            string math = Console.ReadLine();\n            //string number1 = \"\";\n            //string op = \"\";\n            //string number2 = \"\";\n            //expand mathparts somehow--add spaces? Infinite space? To infinity and beyond?\n            //mathparts is an array that stores the seperate parts of the math problem\n            string[] mathparts = new string[3];\n            //variablecounter does something. I kind of forget what.\n            //I think it helps count out the different numbers somehow?\n            //tells computer where to store characters in mathparts\n            int variablecounter = 0;\n            //tells computer when to break between parts of the equation that are being stored in mathparts\n            //keeps track of whether previous character is an integer or an operator\n            bool isinteger = true;\n            //loops over user input one character at a time\n            for(int i = 0; i < math.Length; i++)\n            {\n                //Console.WriteLine(math[i]);\n                char potato = math[i];\n                //check if potato is an integer\n                //check if potato is a space character\n                //check if potato is an operator\n                if (potato == '0' || potato == '1' || potato == '2' || potato == '3' || potato == '4' || potato == '5' || potato == '6' || potato == '7' || potato == '8' || potato == '9')\n                {\n                    //mathparts[variablecounter] += potato;\n                    Console.WriteLine(\"This is an integer \" + potato);\n                    if (!isinteger)\n                    {\n                        //identify where number stops and operator starts\n                        variablecounter++;\n                        isinteger = true;\n                        Console.WriteLine(\"Transition from number to operator\");\n                    }\n                }\n                else if (potato == '+' || potato == '-' || potato == '*' || potato == '/')\n                {\n                    Console.WriteLine(\"This is an operator \" + potato);\n                    char op = potato;\n                    if (isinteger)\n                    {\n                        //identify where operator stops and number starts\n                        variablecounter++;\n                        isinteger = false;\n                        Console.WriteLine(\"Transition from operator to number\");\n                    }\n                }\n                else\n                {\n                    Console.WriteLine(\"This is not an integer \" + potato);\n                    continue;\n                }\n                mathparts[variablecounter] += potato;\n            }\n            for (int j = 0; j < mathparts.Length; j++)\n            {\n                Console.WriteLine(mathparts[j]);\n            }\n            int number1 = Convert.ToInt32(mathparts[0]);\n            //Console.WriteLine(number1);\n            int number2 = Convert.ToInt32(mathparts[2]);\n            //Console.WriteLine(number2);\n            int result = 0;\n            if (mathparts[1] == \"+\")\n            {\n                result = number1 + number2;\n            }\n            else if (mathparts[1] == \"-\")\n            {\n                result = number1 - number2;\n            }\n            else if (mathparts[1] == \"*\")\n            {\n                result = number1 * number2;\n            }\n            else if (mathparts[1] == \"/\")\n            {\n                result = number1 / number2;\n            }\n            Console.WriteLine(result);\n        }\n    }\n}\n```",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Latest Working Code</p>\n<pre><code>using System;\n\nnamespace Calculator\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Ask for a math problem\n            //Break math problem into three parts--first number, plus/minus, second number\n            //Do the math\n            Console.WriteLine(&quot;Please input problem:&quot;);\n            string math = Console.ReadLine();\n            //string number1 = &quot;&quot;;\n            //string op = &quot;&quot;;\n            //string number2 = &quot;&quot;;\n            //expand mathparts somehow--add spaces? Infinite space? To infinity and beyond?\n            //mathparts is an array that stores the seperate parts of the math problem\n            string[] mathparts = new string[3];\n            //variablecounter does something. I kind of forget what.\n            //I think it helps count out the different numbers somehow?\n            //tells computer where to store characters in mathparts\n            int variablecounter = 0;\n            //tells computer when to break between parts of the equation that are being stored in mathparts\n            //keeps track of whether previous character is an integer or an operator\n            bool isinteger = true;\n            //loops over user input one character at a time\n            for(int i = 0; i &lt; math.Length; i++)\n            {\n                //Console.WriteLine(math[i]);\n                char potato = math[i];\n                //check if potato is an integer\n                //check if potato is a space character\n                //check if potato is an operator\n                if (potato == '0' || potato == '1' || potato == '2' || potato == '3' || potato == '4' || potato == '5' || potato == '6' || potato == '7' || potato == '8' || potato == '9')\n                {\n                    //mathparts[variablecounter] += potato;\n                    Console.WriteLine(&quot;This is an integer &quot; + potato);\n                    if (!isinteger)\n                    {\n                        //identify where number stops and operator starts\n                        variablecounter++;\n                        isinteger = true;\n                        Console.WriteLine(&quot;Transition from number to operator&quot;);\n                    }\n                }\n                else if (potato == '+' || potato == '-' || potato == '*' || potato == '/')\n                {\n                    Console.WriteLine(&quot;This is an operator &quot; + potato);\n                    char op = potato;\n                    if (isinteger)\n                    {\n                        //identify where operator stops and number starts\n                        variablecounter++;\n                        isinteger = false;\n                        Console.WriteLine(&quot;Transition from operator to number&quot;);\n                    }\n                }\n                else\n                {\n                    Console.WriteLine(&quot;This is not an integer &quot; + potato);\n                    continue;\n                }\n                mathparts[variablecounter] += potato;\n            }\n            for (int j = 0; j &lt; mathparts.Length; j++)\n            {\n                Console.WriteLine(mathparts[j]);\n            }\n            int number1 = Convert.ToInt32(mathparts[0]);\n            //Console.WriteLine(number1);\n            int number2 = Convert.ToInt32(mathparts[2]);\n            //Console.WriteLine(number2);\n            int result = 0;\n            if (mathparts[1] == &quot;+&quot;)\n            {\n                result = number1 + number2;\n            }\n            else if (mathparts[1] == &quot;-&quot;)\n            {\n                result = number1 - number2;\n            }\n            else if (mathparts[1] == &quot;*&quot;)\n            {\n                result = number1 * number2;\n            }\n            else if (mathparts[1] == &quot;/&quot;)\n            {\n                result = number1 / number2;\n            }\n            Console.WriteLine(result);\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$1649796032360nzWBm:matrix.workhardpgh.com",
      "origin_server_ts": 1649796032375,
      "unsigned": {
        "age": 419696709,
        "m.relations": {
          "m.replace": {
            "event_id": "$1649796663364abTfk:matrix.workhardpgh.com",
            "origin_server_ts": 1649796663739,
            "sender": "@jallison:matrix.workhardpgh.com"
          }
        }
      },
      "user_id": "@jallison:matrix.workhardpgh.com",
      "age": 419611191
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@jim_code:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "Yemi Truechild (she/her): Spenser Greeley andrew \n\n2nd version for bonus code using \"Splits\", team 3:\n\n```csharp\nusing System;\n\nnamespace Calculator01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Take in a math problem\n            // like, 2 + 2\n            // or, 5 - 1\n\n            // give the person the right answer to that problem\n\n            // Bonus:\n            // Make it work with multi-digit numbers\n            // 71 + 238\n\n            // Extra Bonus:\n            // Consider how you might do 3 numbers instead of two\n\n\n            //1. Ask for a mathematical problem\n            //2. ReadLine for input\n            //3. Determine user's operation\n            //4. Create variables that will store values\n\n\n            Console.WriteLine(\"Hey, I'm a calculator! What should I do?\");\n            string input = Console.ReadLine();\n            string[] splits = input.Split(' ', '+', '-');\n            long firstNumber = Convert.ToInt64(splits[0]);\n            long secondNumber = Convert.ToInt64(splits[1]);\n\n            //double firstNumber = char.GetNumericValue(input, 0);\n            //double secondNumber = char.GetNumericValue(input, 2);\n\n            if (input.Contains(\"+\"))\n            {\n                Console.WriteLine(firstNumber + secondNumber);\n            }\n            if (input.Contains(\"-\"))\n            {\n                Console.WriteLine(firstNumber - secondNumber);\n            }\n\n        }\n    }\n}```",
            "mimetype": "text/plain"
          },
          {
            "body": "<p><a href=\"https://matrix.to/#/@onoyemi:matrix.workhardpgh.com\">Yemi Truechild (she/her)</a>: <a href=\"https://matrix.to/#/@spensermg:matrix.workhardpgh.com\">Spenser Greeley</a> <a href=\"https://matrix.to/#/@andrew:matrix.workhardpgh.com\">andrew</a></p>\n<p>2nd version for bonus code using &quot;Splits&quot;, team 3:</p>\n<pre><code class=\"language-csharp\">using System;\n\nnamespace Calculator01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Take in a math problem\n            // like, 2 + 2\n            // or, 5 - 1\n\n            // give the person the right answer to that problem\n\n            // Bonus:\n            // Make it work with multi-digit numbers\n            // 71 + 238\n\n            // Extra Bonus:\n            // Consider how you might do 3 numbers instead of two\n\n\n            //1. Ask for a mathematical problem\n            //2. ReadLine for input\n            //3. Determine user's operation\n            //4. Create variables that will store values\n\n\n            Console.WriteLine(&quot;Hey, I'm a calculator! What should I do?&quot;);\n            string input = Console.ReadLine();\n            string[] splits = input.Split(' ', '+', '-');\n            long firstNumber = Convert.ToInt64(splits[0]);\n            long secondNumber = Convert.ToInt64(splits[1]);\n\n            //double firstNumber = char.GetNumericValue(input, 0);\n            //double secondNumber = char.GetNumericValue(input, 2);\n\n            if (input.Contains(&quot;+&quot;))\n            {\n                Console.WriteLine(firstNumber + secondNumber);\n            }\n            if (input.Contains(&quot;-&quot;))\n            {\n                Console.WriteLine(firstNumber - secondNumber);\n            }\n\n        }\n    }\n}```\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "Yemi Truechild (she/her): Spenser Greeley andrew \n\n2nd version for bonus code using \"Splits\", team 3:\n\n```csharp\nusing System;\n\nnamespace Calculator01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Take in a math problem\n            // like, 2 + 2\n            // or, 5 - 1\n\n            // give the person the right answer to that problem\n\n            // Bonus:\n            // Make it work with multi-digit numbers\n            // 71 + 238\n\n            // Extra Bonus:\n            // Consider how you might do 3 numbers instead of two\n\n\n            //1. Ask for a mathematical problem\n            //2. ReadLine for input\n            //3. Determine user's operation\n            //4. Create variables that will store values\n\n\n            Console.WriteLine(\"Hey, I'm a calculator! What should I do?\");\n            string input = Console.ReadLine();\n            string[] splits = input.Split(' ', '+', '-');\n            long firstNumber = Convert.ToInt64(splits[0]);\n            long secondNumber = Convert.ToInt64(splits[1]);\n\n            //double firstNumber = char.GetNumericValue(input, 0);\n            //double secondNumber = char.GetNumericValue(input, 2);\n\n            if (input.Contains(\"+\"))\n            {\n                Console.WriteLine(firstNumber + secondNumber);\n            }\n            if (input.Contains(\"-\"))\n            {\n                Console.WriteLine(firstNumber - secondNumber);\n            }\n\n        }\n    }\n}```",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p><a href=\"https://matrix.to/#/@onoyemi:matrix.workhardpgh.com\">Yemi Truechild (she/her)</a>: <a href=\"https://matrix.to/#/@spensermg:matrix.workhardpgh.com\">Spenser Greeley</a> <a href=\"https://matrix.to/#/@andrew:matrix.workhardpgh.com\">andrew</a></p>\n<p>2nd version for bonus code using &quot;Splits&quot;, team 3:</p>\n<pre><code class=\"language-csharp\">using System;\n\nnamespace Calculator01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Take in a math problem\n            // like, 2 + 2\n            // or, 5 - 1\n\n            // give the person the right answer to that problem\n\n            // Bonus:\n            // Make it work with multi-digit numbers\n            // 71 + 238\n\n            // Extra Bonus:\n            // Consider how you might do 3 numbers instead of two\n\n\n            //1. Ask for a mathematical problem\n            //2. ReadLine for input\n            //3. Determine user's operation\n            //4. Create variables that will store values\n\n\n            Console.WriteLine(&quot;Hey, I'm a calculator! What should I do?&quot;);\n            string input = Console.ReadLine();\n            string[] splits = input.Split(' ', '+', '-');\n            long firstNumber = Convert.ToInt64(splits[0]);\n            long secondNumber = Convert.ToInt64(splits[1]);\n\n            //double firstNumber = char.GetNumericValue(input, 0);\n            //double secondNumber = char.GetNumericValue(input, 2);\n\n            if (input.Contains(&quot;+&quot;))\n            {\n                Console.WriteLine(firstNumber + secondNumber);\n            }\n            if (input.Contains(&quot;-&quot;))\n            {\n                Console.WriteLine(firstNumber - secondNumber);\n            }\n\n        }\n    }\n}```\n</code></pre>\n"
      },
      "event_id": "$1649796502362UdCrB:matrix.workhardpgh.com",
      "origin_server_ts": 1649796502814,
      "unsigned": {
        "age": 419226270
      },
      "user_id": "@jim_code:matrix.workhardpgh.com",
      "age": 419064050
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@taslater:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "Help, I need something better to do with my evenings!\n\nSolution to \"Calculator\" (string parsing) using regex to split the input including some tests. I would love to throw helpful errors for malformed inputs, but it doesn't yet.\n\n```csharp\nusing System;\nusing System.Text.RegularExpressions;\n\nnamespace Calculator\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Test[] tests = {\n                new Test(\"1+1\", 2m),\n                new Test(\"111 - 11\", 100m),\n                new Test(\"2 * 4    - 3\", 5m),\n                new Test(\"2.14/ 1.07 - 3.08 * 11   + 40.62\", 28.74m),\n            };\n\n            Calculator calculator = new Calculator();\n\n            for (int i = 0; i < tests.Length; i++)\n            {\n                Test t = tests[i];\n                Console.WriteLine($\"Test {i + 1}:\");\n                t.Check(calculator.Calculate(t.input));\n                Console.WriteLine();\n            }\n        }\n    }\n\n    public struct Test\n    {\n        public string input;\n        public decimal output;\n\n        public Test(string _input, decimal _output)\n        {\n            input = _input;\n            output = _output;\n        }\n\n        public void Check(decimal calculated)\n        {\n            string equalNotEqual;\n            if (output == calculated)\n            {\n                Console.WriteLine(\"Passed\");\n                equalNotEqual = \"==\";\n            }\n            else\n            {\n                Console.WriteLine(\"Failed\");\n                equalNotEqual = \"!=\";\n            }\n            Console.WriteLine($\"{input} {equalNotEqual} {calculated}\");\n        }\n\n    }\n\n    class Calculator\n    {\n        Regex numberSplitter = new Regex(@\"\\s*[\\+\\-\\*\\/]\\s*\");\n\n        public decimal Calculate(string input)\n        {\n            string[] numberStrings = numberSplitter.Split(input);\n            decimal[] numbers = new decimal[numberStrings.Length];\n            for (int i = 0; i < numberStrings.Length; i++)\n            {\n                numbers[i] = Convert.ToDecimal(numberStrings[i]);\n            }\n\n            MatchCollection operatorMatches = numberSplitter.Matches(input);\n            char[] operatorStrings = new char[operatorMatches.Count];\n            for (int i = 0; i < operatorMatches.Count; i++)\n            {\n                operatorStrings[i] = operatorMatches[i].Value.Trim()[0];\n            }\n\n            decimal result = Convert.ToDecimal(numberStrings[0]);\n            for (int i = 0; i < operatorStrings.Length; i++)\n            {\n                result = Combine(result, operatorStrings[i], numbers[i + 1]);\n            }\n\n            return result;\n        }\n\n        private decimal Combine(decimal m0, char op, decimal m1)\n        {\n            if (op == '+')\n            {\n                return m0 + m1;\n            }\n            else if (op == '-')\n            {\n                return m0 - m1;\n            }\n            else if (op == '*')\n            {\n                return m0 * m1;\n            }\n            else if (op == '/')\n            {\n                return m0 / m1;\n            }\n\n            return 0m;\n        }\n    }\n}\n```\n\nAny suggestions?\n\nAlso, does anyone know why my Element code blocks don't have pretty colors?",
            "mimetype": "text/plain"
          },
          {
            "body": "<p>Help, I need something better to do with my evenings!</p>\n<p>Solution to &quot;Calculator&quot; (string parsing) using regex to split the input including some tests. I would love to throw helpful errors for malformed inputs, but it doesn't yet.</p>\n<pre><code class=\"language-csharp\">using System;\nusing System.Text.RegularExpressions;\n\nnamespace Calculator\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Test[] tests = {\n                new Test(&quot;1+1&quot;, 2m),\n                new Test(&quot;111 - 11&quot;, 100m),\n                new Test(&quot;2 * 4    - 3&quot;, 5m),\n                new Test(&quot;2.14/ 1.07 - 3.08 * 11   + 40.62&quot;, 28.74m),\n            };\n\n            Calculator calculator = new Calculator();\n\n            for (int i = 0; i &lt; tests.Length; i++)\n            {\n                Test t = tests[i];\n                Console.WriteLine($&quot;Test {i + 1}:&quot;);\n                t.Check(calculator.Calculate(t.input));\n                Console.WriteLine();\n            }\n        }\n    }\n\n    public struct Test\n    {\n        public string input;\n        public decimal output;\n\n        public Test(string _input, decimal _output)\n        {\n            input = _input;\n            output = _output;\n        }\n\n        public void Check(decimal calculated)\n        {\n            string equalNotEqual;\n            if (output == calculated)\n            {\n                Console.WriteLine(&quot;Passed&quot;);\n                equalNotEqual = &quot;==&quot;;\n            }\n            else\n            {\n                Console.WriteLine(&quot;Failed&quot;);\n                equalNotEqual = &quot;!=&quot;;\n            }\n            Console.WriteLine($&quot;{input} {equalNotEqual} {calculated}&quot;);\n        }\n\n    }\n\n    class Calculator\n    {\n        Regex numberSplitter = new Regex(@&quot;\\s*[\\+\\-\\*\\/]\\s*&quot;);\n\n        public decimal Calculate(string input)\n        {\n            string[] numberStrings = numberSplitter.Split(input);\n            decimal[] numbers = new decimal[numberStrings.Length];\n            for (int i = 0; i &lt; numberStrings.Length; i++)\n            {\n                numbers[i] = Convert.ToDecimal(numberStrings[i]);\n            }\n\n            MatchCollection operatorMatches = numberSplitter.Matches(input);\n            char[] operatorStrings = new char[operatorMatches.Count];\n            for (int i = 0; i &lt; operatorMatches.Count; i++)\n            {\n                operatorStrings[i] = operatorMatches[i].Value.Trim()[0];\n            }\n\n            decimal result = Convert.ToDecimal(numberStrings[0]);\n            for (int i = 0; i &lt; operatorStrings.Length; i++)\n            {\n                result = Combine(result, operatorStrings[i], numbers[i + 1]);\n            }\n\n            return result;\n        }\n\n        private decimal Combine(decimal m0, char op, decimal m1)\n        {\n            if (op == '+')\n            {\n                return m0 + m1;\n            }\n            else if (op == '-')\n            {\n                return m0 - m1;\n            }\n            else if (op == '*')\n            {\n                return m0 * m1;\n            }\n            else if (op == '/')\n            {\n                return m0 / m1;\n            }\n\n            return 0m;\n        }\n    }\n}\n</code></pre>\n<p>Any suggestions?</p>\n<p>Also, does anyone know why my Element code blocks don't have pretty colors?</p>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "Help, I need something better to do with my evenings!\n\nSolution to \"Calculator\" (string parsing) using regex to split the input including some tests. I would love to throw helpful errors for malformed inputs, but it doesn't yet.\n\n```csharp\nusing System;\nusing System.Text.RegularExpressions;\n\nnamespace Calculator\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Test[] tests = {\n                new Test(\"1+1\", 2m),\n                new Test(\"111 - 11\", 100m),\n                new Test(\"2 * 4    - 3\", 5m),\n                new Test(\"2.14/ 1.07 - 3.08 * 11   + 40.62\", 28.74m),\n            };\n\n            Calculator calculator = new Calculator();\n\n            for (int i = 0; i < tests.Length; i++)\n            {\n                Test t = tests[i];\n                Console.WriteLine($\"Test {i + 1}:\");\n                t.Check(calculator.Calculate(t.input));\n                Console.WriteLine();\n            }\n        }\n    }\n\n    public struct Test\n    {\n        public string input;\n        public decimal output;\n\n        public Test(string _input, decimal _output)\n        {\n            input = _input;\n            output = _output;\n        }\n\n        public void Check(decimal calculated)\n        {\n            string equalNotEqual;\n            if (output == calculated)\n            {\n                Console.WriteLine(\"Passed\");\n                equalNotEqual = \"==\";\n            }\n            else\n            {\n                Console.WriteLine(\"Failed\");\n                equalNotEqual = \"!=\";\n            }\n            Console.WriteLine($\"{input} {equalNotEqual} {calculated}\");\n        }\n\n    }\n\n    class Calculator\n    {\n        Regex numberSplitter = new Regex(@\"\\s*[\\+\\-\\*\\/]\\s*\");\n\n        public decimal Calculate(string input)\n        {\n            string[] numberStrings = numberSplitter.Split(input);\n            decimal[] numbers = new decimal[numberStrings.Length];\n            for (int i = 0; i < numberStrings.Length; i++)\n            {\n                numbers[i] = Convert.ToDecimal(numberStrings[i]);\n            }\n\n            MatchCollection operatorMatches = numberSplitter.Matches(input);\n            char[] operatorStrings = new char[operatorMatches.Count];\n            for (int i = 0; i < operatorMatches.Count; i++)\n            {\n                operatorStrings[i] = operatorMatches[i].Value.Trim()[0];\n            }\n\n            decimal result = Convert.ToDecimal(numberStrings[0]);\n            for (int i = 0; i < operatorStrings.Length; i++)\n            {\n                result = Combine(result, operatorStrings[i], numbers[i + 1]);\n            }\n\n            return result;\n        }\n\n        private decimal Combine(decimal m0, char op, decimal m1)\n        {\n            if (op == '+')\n            {\n                return m0 + m1;\n            }\n            else if (op == '-')\n            {\n                return m0 - m1;\n            }\n            else if (op == '*')\n            {\n                return m0 * m1;\n            }\n            else if (op == '/')\n            {\n                return m0 / m1;\n            }\n\n            return 0m;\n        }\n    }\n}\n```\n\nAny suggestions?\n\nAlso, does anyone know why my Element code blocks don't have pretty colors?",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Help, I need something better to do with my evenings!</p>\n<p>Solution to &quot;Calculator&quot; (string parsing) using regex to split the input including some tests. I would love to throw helpful errors for malformed inputs, but it doesn't yet.</p>\n<pre><code class=\"language-csharp\">using System;\nusing System.Text.RegularExpressions;\n\nnamespace Calculator\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Test[] tests = {\n                new Test(&quot;1+1&quot;, 2m),\n                new Test(&quot;111 - 11&quot;, 100m),\n                new Test(&quot;2 * 4    - 3&quot;, 5m),\n                new Test(&quot;2.14/ 1.07 - 3.08 * 11   + 40.62&quot;, 28.74m),\n            };\n\n            Calculator calculator = new Calculator();\n\n            for (int i = 0; i &lt; tests.Length; i++)\n            {\n                Test t = tests[i];\n                Console.WriteLine($&quot;Test {i + 1}:&quot;);\n                t.Check(calculator.Calculate(t.input));\n                Console.WriteLine();\n            }\n        }\n    }\n\n    public struct Test\n    {\n        public string input;\n        public decimal output;\n\n        public Test(string _input, decimal _output)\n        {\n            input = _input;\n            output = _output;\n        }\n\n        public void Check(decimal calculated)\n        {\n            string equalNotEqual;\n            if (output == calculated)\n            {\n                Console.WriteLine(&quot;Passed&quot;);\n                equalNotEqual = &quot;==&quot;;\n            }\n            else\n            {\n                Console.WriteLine(&quot;Failed&quot;);\n                equalNotEqual = &quot;!=&quot;;\n            }\n            Console.WriteLine($&quot;{input} {equalNotEqual} {calculated}&quot;);\n        }\n\n    }\n\n    class Calculator\n    {\n        Regex numberSplitter = new Regex(@&quot;\\s*[\\+\\-\\*\\/]\\s*&quot;);\n\n        public decimal Calculate(string input)\n        {\n            string[] numberStrings = numberSplitter.Split(input);\n            decimal[] numbers = new decimal[numberStrings.Length];\n            for (int i = 0; i &lt; numberStrings.Length; i++)\n            {\n                numbers[i] = Convert.ToDecimal(numberStrings[i]);\n            }\n\n            MatchCollection operatorMatches = numberSplitter.Matches(input);\n            char[] operatorStrings = new char[operatorMatches.Count];\n            for (int i = 0; i &lt; operatorMatches.Count; i++)\n            {\n                operatorStrings[i] = operatorMatches[i].Value.Trim()[0];\n            }\n\n            decimal result = Convert.ToDecimal(numberStrings[0]);\n            for (int i = 0; i &lt; operatorStrings.Length; i++)\n            {\n                result = Combine(result, operatorStrings[i], numbers[i + 1]);\n            }\n\n            return result;\n        }\n\n        private decimal Combine(decimal m0, char op, decimal m1)\n        {\n            if (op == '+')\n            {\n                return m0 + m1;\n            }\n            else if (op == '-')\n            {\n                return m0 - m1;\n            }\n            else if (op == '*')\n            {\n                return m0 * m1;\n            }\n            else if (op == '/')\n            {\n                return m0 / m1;\n            }\n\n            return 0m;\n        }\n    }\n}\n</code></pre>\n<p>Any suggestions?</p>\n<p>Also, does anyone know why my Element code blocks don't have pretty colors?</p>\n"
      },
      "event_id": "$1649813479377mrbeJ:matrix.workhardpgh.com",
      "origin_server_ts": 1649813479575,
      "unsigned": {
        "age": 402249509,
        "m.relations": {
          "m.replace": {
            "event_id": "$1649857177400jOubA:matrix.workhardpgh.com",
            "origin_server_ts": 1649857177279,
            "sender": "@taslater:matrix.workhardpgh.com"
          }
        }
      },
      "user_id": "@taslater:matrix.workhardpgh.com",
      "age": 402087289
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@tobiasfunction:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "do the name of the language (in this case `csharp`) after the first set of backticks",
            "mimetype": "text/plain"
          },
          {
            "body": "do the name of the language (in this case <code>csharp</code>) after the first set of backticks",
            "mimetype": "text/html"
          }
        ],
        "body": "do the name of the language (in this case `csharp`) after the first set of backticks",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "do the name of the language (in this case <code>csharp</code>) after the first set of backticks"
      },
      "event_id": "$1649813957380JlVcX:matrix.workhardpgh.com",
      "origin_server_ts": 1649813957519,
      "unsigned": {
        "age": 401771565
      },
      "user_id": "@tobiasfunction:matrix.workhardpgh.com",
      "age": 401609345
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@taslater:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "On the same line, ie `` ```csharp``?",
            "mimetype": "text/plain"
          },
          {
            "body": "On the same line, ie <code> ```csharp</code>?",
            "mimetype": "text/html"
          }
        ],
        "body": "On the same line, ie `` ```csharp``?",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "On the same line, ie <code> ```csharp</code>?"
      },
      "event_id": "$1649814026381fjMsL:matrix.workhardpgh.com",
      "origin_server_ts": 1649814026042,
      "unsigned": {
        "age": 401703042,
        "m.relations": {
          "m.replace": {
            "event_id": "$1649814511394CEsEV:matrix.workhardpgh.com",
            "origin_server_ts": 1649814511039,
            "sender": "@taslater:matrix.workhardpgh.com"
          }
        }
      },
      "user_id": "@taslater:matrix.workhardpgh.com",
      "age": 401540822
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@tobiasfunction:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.text": "yes!",
        "body": "yes!",
        "msgtype": "m.text"
      },
      "event_id": "$1649814035382oFKLe:matrix.workhardpgh.com",
      "origin_server_ts": 1649814035043,
      "unsigned": {
        "age": 401694041
      },
      "user_id": "@tobiasfunction:matrix.workhardpgh.com",
      "age": 401531821
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@scottb:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "I do in fact learn something new every day.  No more plain codeblocks for me now"
      },
      "event_id": "$1649814061384tHKmR:matrix.workhardpgh.com",
      "origin_server_ts": 1649814061323,
      "unsigned": {
        "age": 401667761,
        "m.relations": {
          "m.annotation": {
            "chunk": [
              {
                "type": "m.reaction",
                "key": "🎉",
                "count": 2
              }
            ]
          }
        }
      },
      "user_id": "@scottb:matrix.workhardpgh.com",
      "age": 401505541
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@taslater:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.text": "So pretty!!! 😍 So this is all just markdown? Mind blown.",
        "body": "So pretty!!! 😍 So this is all just markdown? Mind blown.",
        "msgtype": "m.text"
      },
      "event_id": "$1649814073385Bxzrn:matrix.workhardpgh.com",
      "origin_server_ts": 1649814073873,
      "unsigned": {
        "age": 401655211,
        "m.relations": {
          "m.replace": {
            "event_id": "$1649814761395vYNdf:matrix.workhardpgh.com",
            "origin_server_ts": 1649814761556,
            "sender": "@taslater:matrix.workhardpgh.com"
          }
        }
      },
      "user_id": "@taslater:matrix.workhardpgh.com",
      "age": 401492991
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "Classes\n``` csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string[] names = new string[10];\n            string[] phones = new string[10];\n            string[] address = new string[10];\n\n            Person anyVariableNameIWant = new Person();\n            anyVariableNameIWant.Name = \"John\";\n            anyVariableNameIWant.Phone = \"123\";\n            anyVariableNameIWant.Address = \"820 Brookline\";\n\n            Person[] people = new Person[10];\n\n\n            for (int i = 0; i < 3; i++)\n            {\n                people[i] = new Person();\n                Console.WriteLine(\"Give me a name\");\n                people[i].Name = Console.ReadLine();\n\n                Console.WriteLine(\"Give me a phone number\");\n                people[i].Phone = Console.ReadLine();\n\n                Console.WriteLine(people[i].Address);\n            }\n\n\n        }\n    }\n\n    class Person\n    {\n        public string Name;\n        public string Phone;\n        public string Address;\n    }\n}\n",
            "mimetype": "text/plain"
          },
          {
            "body": "<p>Classes</p>\n<pre><code class=\"language-csharp\">using System;\nusing System.Collections.Generic;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string[] names = new string[10];\n            string[] phones = new string[10];\n            string[] address = new string[10];\n\n            Person anyVariableNameIWant = new Person();\n            anyVariableNameIWant.Name = &quot;John&quot;;\n            anyVariableNameIWant.Phone = &quot;123&quot;;\n            anyVariableNameIWant.Address = &quot;820 Brookline&quot;;\n\n            Person[] people = new Person[10];\n\n\n            for (int i = 0; i &lt; 3; i++)\n            {\n                people[i] = new Person();\n                Console.WriteLine(&quot;Give me a name&quot;);\n                people[i].Name = Console.ReadLine();\n\n                Console.WriteLine(&quot;Give me a phone number&quot;);\n                people[i].Phone = Console.ReadLine();\n\n                Console.WriteLine(people[i].Address);\n            }\n\n\n        }\n    }\n\n    class Person\n    {\n        public string Name;\n        public string Phone;\n        public string Address;\n    }\n}\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "Classes\n``` csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string[] names = new string[10];\n            string[] phones = new string[10];\n            string[] address = new string[10];\n\n            Person anyVariableNameIWant = new Person();\n            anyVariableNameIWant.Name = \"John\";\n            anyVariableNameIWant.Phone = \"123\";\n            anyVariableNameIWant.Address = \"820 Brookline\";\n\n            Person[] people = new Person[10];\n\n\n            for (int i = 0; i < 3; i++)\n            {\n                people[i] = new Person();\n                Console.WriteLine(\"Give me a name\");\n                people[i].Name = Console.ReadLine();\n\n                Console.WriteLine(\"Give me a phone number\");\n                people[i].Phone = Console.ReadLine();\n\n                Console.WriteLine(people[i].Address);\n            }\n\n\n        }\n    }\n\n    class Person\n    {\n        public string Name;\n        public string Phone;\n        public string Address;\n    }\n}\n",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Classes</p>\n<pre><code class=\"language-csharp\">using System;\nusing System.Collections.Generic;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string[] names = new string[10];\n            string[] phones = new string[10];\n            string[] address = new string[10];\n\n            Person anyVariableNameIWant = new Person();\n            anyVariableNameIWant.Name = &quot;John&quot;;\n            anyVariableNameIWant.Phone = &quot;123&quot;;\n            anyVariableNameIWant.Address = &quot;820 Brookline&quot;;\n\n            Person[] people = new Person[10];\n\n\n            for (int i = 0; i &lt; 3; i++)\n            {\n                people[i] = new Person();\n                Console.WriteLine(&quot;Give me a name&quot;);\n                people[i].Name = Console.ReadLine();\n\n                Console.WriteLine(&quot;Give me a phone number&quot;);\n                people[i].Phone = Console.ReadLine();\n\n                Console.WriteLine(people[i].Address);\n            }\n\n\n        }\n    }\n\n    class Person\n    {\n        public string Name;\n        public string Phone;\n        public string Address;\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$1649860534403lzCdI:matrix.workhardpgh.com",
      "origin_server_ts": 1649860534985,
      "unsigned": {
        "age": 355194099
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 355108298
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@spensermg:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "```csharp\nusing System;\n\nnamespace RomanNumeralKata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {   //Create a message storage and retrieval system\n            //Show a menu that offers the user options on what they can do\n            //Delete a message, or replace\n            //Fixed size array, if we add too many messages, write a message that says you cannot do that\n            //If someone asks for a message number that doesn't exist, have a message saying that that one does not exist\n            string[] messages = new string[4];\n            int index = 0;\n            int on = 1;\n            while (on == 1)\n            {\n                Console.WriteLine(\"Please make a choice \");\n                Console.WriteLine(\"A. Save a message \");\n                Console.WriteLine(\"B. Retrieve a message \");\n                Console.WriteLine(\"C. Delete a Message\");\n                Console.WriteLine(\"D. Exit \");\n                string reply = Console.ReadLine().ToLower();\n\n                if (reply == \"a\")\n                {\n                    if (index <= messages.Length - 1)\n                    {\n                        Console.WriteLine(\"Please leave a message \");\n                        messages[index] = Console.ReadLine();\n                        Console.WriteLine(\"Your message number is: \" + index);\n                        index = index + 1;\n                    }\n                    else\n                    {\n                        Console.WriteLine(\"Your messages are full.\");\n                    }\n                }\n                else if (reply == \"b\")\n\n                {\n                    Console.WriteLine(\"Please give a message number \");\n                    int id = Convert.ToInt32(Console.ReadLine());\n                    if (id > index)\n                    {\n                        Console.WriteLine(\"Your message doesn't exists\");\n                    }\n                    else\n                    {\n                        Console.WriteLine(messages[id]);\n                    }\n                }\n\n                else if (reply == \"c\")\n                {\n                    Console.WriteLine(\"What is the number of the message you would like to delete?\");\n                    int id = Convert.ToInt32(Console.ReadLine());\n                    messages[id] = \"This message doesn't exist, spooky\";\n                    Console.WriteLine(\"Your message has been deleted\");\n                }\n\n                else if (reply == \"d\")\n                {\n                    on = 0;\n                }\n                else\n                {\n                    Console.WriteLine(\"Option does not exist. Please enter either A, B, C, or D.\");\n                }\n            }\n        }\n    }\n}\n```\nMessaging system imaniemanuel ",
            "mimetype": "text/plain"
          },
          {
            "body": "<pre><code class=\"language-csharp\">using System;\n\nnamespace RomanNumeralKata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {   //Create a message storage and retrieval system\n            //Show a menu that offers the user options on what they can do\n            //Delete a message, or replace\n            //Fixed size array, if we add too many messages, write a message that says you cannot do that\n            //If someone asks for a message number that doesn't exist, have a message saying that that one does not exist\n            string[] messages = new string[4];\n            int index = 0;\n            int on = 1;\n            while (on == 1)\n            {\n                Console.WriteLine(&quot;Please make a choice &quot;);\n                Console.WriteLine(&quot;A. Save a message &quot;);\n                Console.WriteLine(&quot;B. Retrieve a message &quot;);\n                Console.WriteLine(&quot;C. Delete a Message&quot;);\n                Console.WriteLine(&quot;D. Exit &quot;);\n                string reply = Console.ReadLine().ToLower();\n\n                if (reply == &quot;a&quot;)\n                {\n                    if (index &lt;= messages.Length - 1)\n                    {\n                        Console.WriteLine(&quot;Please leave a message &quot;);\n                        messages[index] = Console.ReadLine();\n                        Console.WriteLine(&quot;Your message number is: &quot; + index);\n                        index = index + 1;\n                    }\n                    else\n                    {\n                        Console.WriteLine(&quot;Your messages are full.&quot;);\n                    }\n                }\n                else if (reply == &quot;b&quot;)\n\n                {\n                    Console.WriteLine(&quot;Please give a message number &quot;);\n                    int id = Convert.ToInt32(Console.ReadLine());\n                    if (id &gt; index)\n                    {\n                        Console.WriteLine(&quot;Your message doesn't exists&quot;);\n                    }\n                    else\n                    {\n                        Console.WriteLine(messages[id]);\n                    }\n                }\n\n                else if (reply == &quot;c&quot;)\n                {\n                    Console.WriteLine(&quot;What is the number of the message you would like to delete?&quot;);\n                    int id = Convert.ToInt32(Console.ReadLine());\n                    messages[id] = &quot;This message doesn't exist, spooky&quot;;\n                    Console.WriteLine(&quot;Your message has been deleted&quot;);\n                }\n\n                else if (reply == &quot;d&quot;)\n                {\n                    on = 0;\n                }\n                else\n                {\n                    Console.WriteLine(&quot;Option does not exist. Please enter either A, B, C, or D.&quot;);\n                }\n            }\n        }\n    }\n}\n</code></pre>\n<p>Messaging system <a href=\"https://matrix.to/#/@imaniemanuel:matrix.workhardpgh.com\">imaniemanuel</a></p>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "```csharp\nusing System;\n\nnamespace RomanNumeralKata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {   //Create a message storage and retrieval system\n            //Show a menu that offers the user options on what they can do\n            //Delete a message, or replace\n            //Fixed size array, if we add too many messages, write a message that says you cannot do that\n            //If someone asks for a message number that doesn't exist, have a message saying that that one does not exist\n            string[] messages = new string[4];\n            int index = 0;\n            int on = 1;\n            while (on == 1)\n            {\n                Console.WriteLine(\"Please make a choice \");\n                Console.WriteLine(\"A. Save a message \");\n                Console.WriteLine(\"B. Retrieve a message \");\n                Console.WriteLine(\"C. Delete a Message\");\n                Console.WriteLine(\"D. Exit \");\n                string reply = Console.ReadLine().ToLower();\n\n                if (reply == \"a\")\n                {\n                    if (index <= messages.Length - 1)\n                    {\n                        Console.WriteLine(\"Please leave a message \");\n                        messages[index] = Console.ReadLine();\n                        Console.WriteLine(\"Your message number is: \" + index);\n                        index = index + 1;\n                    }\n                    else\n                    {\n                        Console.WriteLine(\"Your messages are full.\");\n                    }\n                }\n                else if (reply == \"b\")\n\n                {\n                    Console.WriteLine(\"Please give a message number \");\n                    int id = Convert.ToInt32(Console.ReadLine());\n                    if (id > index)\n                    {\n                        Console.WriteLine(\"Your message doesn't exists\");\n                    }\n                    else\n                    {\n                        Console.WriteLine(messages[id]);\n                    }\n                }\n\n                else if (reply == \"c\")\n                {\n                    Console.WriteLine(\"What is the number of the message you would like to delete?\");\n                    int id = Convert.ToInt32(Console.ReadLine());\n                    messages[id] = \"This message doesn't exist, spooky\";\n                    Console.WriteLine(\"Your message has been deleted\");\n                }\n\n                else if (reply == \"d\")\n                {\n                    on = 0;\n                }\n                else\n                {\n                    Console.WriteLine(\"Option does not exist. Please enter either A, B, C, or D.\");\n                }\n            }\n        }\n    }\n}\n```\nMessaging system imaniemanuel ",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<pre><code class=\"language-csharp\">using System;\n\nnamespace RomanNumeralKata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {   //Create a message storage and retrieval system\n            //Show a menu that offers the user options on what they can do\n            //Delete a message, or replace\n            //Fixed size array, if we add too many messages, write a message that says you cannot do that\n            //If someone asks for a message number that doesn't exist, have a message saying that that one does not exist\n            string[] messages = new string[4];\n            int index = 0;\n            int on = 1;\n            while (on == 1)\n            {\n                Console.WriteLine(&quot;Please make a choice &quot;);\n                Console.WriteLine(&quot;A. Save a message &quot;);\n                Console.WriteLine(&quot;B. Retrieve a message &quot;);\n                Console.WriteLine(&quot;C. Delete a Message&quot;);\n                Console.WriteLine(&quot;D. Exit &quot;);\n                string reply = Console.ReadLine().ToLower();\n\n                if (reply == &quot;a&quot;)\n                {\n                    if (index &lt;= messages.Length - 1)\n                    {\n                        Console.WriteLine(&quot;Please leave a message &quot;);\n                        messages[index] = Console.ReadLine();\n                        Console.WriteLine(&quot;Your message number is: &quot; + index);\n                        index = index + 1;\n                    }\n                    else\n                    {\n                        Console.WriteLine(&quot;Your messages are full.&quot;);\n                    }\n                }\n                else if (reply == &quot;b&quot;)\n\n                {\n                    Console.WriteLine(&quot;Please give a message number &quot;);\n                    int id = Convert.ToInt32(Console.ReadLine());\n                    if (id &gt; index)\n                    {\n                        Console.WriteLine(&quot;Your message doesn't exists&quot;);\n                    }\n                    else\n                    {\n                        Console.WriteLine(messages[id]);\n                    }\n                }\n\n                else if (reply == &quot;c&quot;)\n                {\n                    Console.WriteLine(&quot;What is the number of the message you would like to delete?&quot;);\n                    int id = Convert.ToInt32(Console.ReadLine());\n                    messages[id] = &quot;This message doesn't exist, spooky&quot;;\n                    Console.WriteLine(&quot;Your message has been deleted&quot;);\n                }\n\n                else if (reply == &quot;d&quot;)\n                {\n                    on = 0;\n                }\n                else\n                {\n                    Console.WriteLine(&quot;Option does not exist. Please enter either A, B, C, or D.&quot;);\n                }\n            }\n        }\n    }\n}\n</code></pre>\n<p>Messaging system <a href=\"https://matrix.to/#/@imaniemanuel:matrix.workhardpgh.com\">imaniemanuel</a></p>\n"
      },
      "event_id": "$1649862300404LGToy:matrix.workhardpgh.com",
      "origin_server_ts": 1649862300545,
      "unsigned": {
        "age": 353428539
      },
      "user_id": "@spensermg:matrix.workhardpgh.com",
      "age": 353342738
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@donna.san:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "```\nusing System;\n\nnamespace Array\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Make a system that allows you to either a) save a message or b) retrieve a message​\n\n\n            string[] messages = new string[10];\n            int counter = 0;\n            while (true)\n            {\n                Console.WriteLine(\"Please choose A, B, or C:\");\n                Console.WriteLine(\"A: Save a message\");\n                Console.WriteLine(\"B: Retrieve a message\");\n                Console.WriteLine(\"C: Exit system\");\n                string response = Console.ReadLine().ToLower();\n                if (response == \"a\")\n                {\n                    Console.WriteLine(\"Type your message\");\n                    \n                    //while (counter < 10)\n                    messages[counter] = Console.ReadLine();\n                    counter = counter + 1;\n                    {\n                        Console.WriteLine(\"Your message is number \" + counter);\n                    }\n                }\n                if (response == \"b\")\n                {\n                    Console.WriteLine(\"Enter number to retrieve message\");\n                    int code = Convert.ToInt32(Console.ReadLine());\n                    //code = counter;\n                    Console.WriteLine(messages[code -1]);\n\n                }\n                if (response == \"c\")\n                {\n                    Console.WriteLine(\"Goodbye\");\n                }\n\n            }\n            //When saving, return a # that the user can use to retrieve a message​\n\n            //When retrieving, allow a user to put in a # to see the message saved\n        }\n    }\n}\n```",
            "mimetype": "text/plain"
          },
          {
            "body": "<pre><code>using System;\n\nnamespace Array\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Make a system that allows you to either a) save a message or b) retrieve a message​\n\n\n            string[] messages = new string[10];\n            int counter = 0;\n            while (true)\n            {\n                Console.WriteLine(&quot;Please choose A, B, or C:&quot;);\n                Console.WriteLine(&quot;A: Save a message&quot;);\n                Console.WriteLine(&quot;B: Retrieve a message&quot;);\n                Console.WriteLine(&quot;C: Exit system&quot;);\n                string response = Console.ReadLine().ToLower();\n                if (response == &quot;a&quot;)\n                {\n                    Console.WriteLine(&quot;Type your message&quot;);\n                    \n                    //while (counter &lt; 10)\n                    messages[counter] = Console.ReadLine();\n                    counter = counter + 1;\n                    {\n                        Console.WriteLine(&quot;Your message is number &quot; + counter);\n                    }\n                }\n                if (response == &quot;b&quot;)\n                {\n                    Console.WriteLine(&quot;Enter number to retrieve message&quot;);\n                    int code = Convert.ToInt32(Console.ReadLine());\n                    //code = counter;\n                    Console.WriteLine(messages[code -1]);\n\n                }\n                if (response == &quot;c&quot;)\n                {\n                    Console.WriteLine(&quot;Goodbye&quot;);\n                }\n\n            }\n            //When saving, return a # that the user can use to retrieve a message​\n\n            //When retrieving, allow a user to put in a # to see the message saved\n        }\n    }\n}\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "```\nusing System;\n\nnamespace Array\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Make a system that allows you to either a) save a message or b) retrieve a message​\n\n\n            string[] messages = new string[10];\n            int counter = 0;\n            while (true)\n            {\n                Console.WriteLine(\"Please choose A, B, or C:\");\n                Console.WriteLine(\"A: Save a message\");\n                Console.WriteLine(\"B: Retrieve a message\");\n                Console.WriteLine(\"C: Exit system\");\n                string response = Console.ReadLine().ToLower();\n                if (response == \"a\")\n                {\n                    Console.WriteLine(\"Type your message\");\n                    \n                    //while (counter < 10)\n                    messages[counter] = Console.ReadLine();\n                    counter = counter + 1;\n                    {\n                        Console.WriteLine(\"Your message is number \" + counter);\n                    }\n                }\n                if (response == \"b\")\n                {\n                    Console.WriteLine(\"Enter number to retrieve message\");\n                    int code = Convert.ToInt32(Console.ReadLine());\n                    //code = counter;\n                    Console.WriteLine(messages[code -1]);\n\n                }\n                if (response == \"c\")\n                {\n                    Console.WriteLine(\"Goodbye\");\n                }\n\n            }\n            //When saving, return a # that the user can use to retrieve a message​\n\n            //When retrieving, allow a user to put in a # to see the message saved\n        }\n    }\n}\n```",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<pre><code>using System;\n\nnamespace Array\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Make a system that allows you to either a) save a message or b) retrieve a message​\n\n\n            string[] messages = new string[10];\n            int counter = 0;\n            while (true)\n            {\n                Console.WriteLine(&quot;Please choose A, B, or C:&quot;);\n                Console.WriteLine(&quot;A: Save a message&quot;);\n                Console.WriteLine(&quot;B: Retrieve a message&quot;);\n                Console.WriteLine(&quot;C: Exit system&quot;);\n                string response = Console.ReadLine().ToLower();\n                if (response == &quot;a&quot;)\n                {\n                    Console.WriteLine(&quot;Type your message&quot;);\n                    \n                    //while (counter &lt; 10)\n                    messages[counter] = Console.ReadLine();\n                    counter = counter + 1;\n                    {\n                        Console.WriteLine(&quot;Your message is number &quot; + counter);\n                    }\n                }\n                if (response == &quot;b&quot;)\n                {\n                    Console.WriteLine(&quot;Enter number to retrieve message&quot;);\n                    int code = Convert.ToInt32(Console.ReadLine());\n                    //code = counter;\n                    Console.WriteLine(messages[code -1]);\n\n                }\n                if (response == &quot;c&quot;)\n                {\n                    Console.WriteLine(&quot;Goodbye&quot;);\n                }\n\n            }\n            //When saving, return a # that the user can use to retrieve a message​\n\n            //When retrieving, allow a user to put in a # to see the message saved\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$1649863887405HTTty:matrix.workhardpgh.com",
      "origin_server_ts": 1649863887139,
      "unsigned": {
        "age": 351841945
      },
      "user_id": "@donna.san:matrix.workhardpgh.com",
      "age": 351756144
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@imaniemanuel:matrix.workhardpgh.com",
      "content": {},
      "event_id": "$1649864171406YNIJG:matrix.workhardpgh.com",
      "origin_server_ts": 1649864171578,
      "unsigned": {
        "redacted_by": "$1649864605412gDjnr:matrix.workhardpgh.com",
        "redacted_because": {
          "type": "m.room.redaction",
          "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
          "sender": "@imaniemanuel:matrix.workhardpgh.com",
          "content": {
            "reason": "wrong"
          },
          "redacts": "$1649864171406YNIJG:matrix.workhardpgh.com",
          "event_id": "$1649864605412gDjnr:matrix.workhardpgh.com",
          "origin_server_ts": 1649864605892,
          "unsigned": {
            "age": 351123192
          },
          "user_id": "@imaniemanuel:matrix.workhardpgh.com",
          "age": 351123192
        },
        "age": 351557506
      },
      "user_id": "@imaniemanuel:matrix.workhardpgh.com",
      "age": 351471705,
      "redacted_because": {
        "type": "m.room.redaction",
        "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
        "sender": "@imaniemanuel:matrix.workhardpgh.com",
        "content": {
          "reason": "wrong"
        },
        "redacts": "$1649864171406YNIJG:matrix.workhardpgh.com",
        "event_id": "$1649864605412gDjnr:matrix.workhardpgh.com",
        "origin_server_ts": 1649864605892,
        "unsigned": {
          "age": 351037391
        },
        "user_id": "@imaniemanuel:matrix.workhardpgh.com",
        "age": 351037391
      }
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@imaniemanuel:matrix.workhardpgh.com",
      "content": {},
      "event_id": "$1649864554411hsneo:matrix.workhardpgh.com",
      "origin_server_ts": 1649864554922,
      "unsigned": {
        "redacted_by": "$1649864613413xdpyT:matrix.workhardpgh.com",
        "redacted_because": {
          "type": "m.room.redaction",
          "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
          "sender": "@imaniemanuel:matrix.workhardpgh.com",
          "content": {
            "reason": "wrong"
          },
          "redacts": "$1649864554411hsneo:matrix.workhardpgh.com",
          "event_id": "$1649864613413xdpyT:matrix.workhardpgh.com",
          "origin_server_ts": 1649864613062,
          "unsigned": {
            "age": 351116022
          },
          "user_id": "@imaniemanuel:matrix.workhardpgh.com",
          "age": 351116022
        },
        "age": 351174162
      },
      "user_id": "@imaniemanuel:matrix.workhardpgh.com",
      "age": 351088361,
      "redacted_because": {
        "type": "m.room.redaction",
        "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
        "sender": "@imaniemanuel:matrix.workhardpgh.com",
        "content": {
          "reason": "wrong"
        },
        "redacts": "$1649864554411hsneo:matrix.workhardpgh.com",
        "event_id": "$1649864613413xdpyT:matrix.workhardpgh.com",
        "origin_server_ts": 1649864613062,
        "unsigned": {
          "age": 351030221
        },
        "user_id": "@imaniemanuel:matrix.workhardpgh.com",
        "age": 351030221
      }
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@imaniemanuel:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "```\nusing System;\n\nnamespace RomanNumeralKata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {   //Create a message storage and retrieval system\n            //Show a menu that offers the user options on what they can do\n            //Delete a message, or replace\n            //Fixed size array, if we add too many messages, write a message that says you cannot do that\n            //If someone asks for a message number that doesn't exist, have a message saying that that one does not exist\n            string[] messages = new string[4];\n            string[] names = new string[4];\n            int index = 0;\n            int on = 1;\n            while (on == 1)\n            {\n                Console.WriteLine(\"Please make a choice \");\n                Console.WriteLine(\"A. Save a message \");\n                Console.WriteLine(\"B. Retrieve a message \");\n                Console.WriteLine(\"C. Delete a Message\");\n                Console.WriteLine(\"D. Exit \");\n                string reply = Console.ReadLine().ToLower();\n\n                if (reply == \"a\")\n                {\n                    if (index <= messages.Length - 1)\n                    {\n                        //ask for a name\n                        //read & store that name\n                        //create an array\n                        //create a class if time allows\n                        Console.WriteLine(\"Please leave your name.\");\n                        names[index] = Console.ReadLine();\n                        Console.WriteLine(\"Please leave a message \");\n                        messages[index] = Console.ReadLine();\n                        Console.WriteLine(\"Your message number is: \" + index);\n                        index = index + 1;\n                    }\n                    else\n                    {\n                        Console.WriteLine(\"Your messages are full.\");\n                    }\n                }\n                else if (reply == \"b\")\n\n                {\n                    //else statment- add console write line for name & msg being retreived\n\n                    Console.WriteLine(\"Please give a message number \");\n\n                    int id = Convert.ToInt32(Console.ReadLine());\n                    if (id > index)\n                    {\n                        Console.WriteLine(\"Your message doesn't exists\");\n                    }\n                    else\n                    {\n                        Console.WriteLine(names[id]+\" left you a message!\");\n                        Console.WriteLine(messages[id]);\n                    }\n                }\n\n                //else if (reply == \"c\")\n                //{\n                    //Console.WriteLine(\"What is the number of the message you would like to delete?\");\n                    //int id = Convert.ToInt32(Console.ReadLine());\n                    //messages[id] = \"This message doesn't exist, spooky\";\n                    //Console.WriteLine(\"Your message has been deleted\");\n                //}\n\n                else if (reply == \"d\")\n                {\n                    on = 0;\n                }\n                else\n                {\n                    Console.WriteLine(\"Option does not exist. Please enter either A, B, C, or D.\");\n                }\n            }\n        }\n    }\n}",
            "mimetype": "text/plain"
          },
          {
            "body": "<pre><code>using System;\n\nnamespace RomanNumeralKata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {   //Create a message storage and retrieval system\n            //Show a menu that offers the user options on what they can do\n            //Delete a message, or replace\n            //Fixed size array, if we add too many messages, write a message that says you cannot do that\n            //If someone asks for a message number that doesn't exist, have a message saying that that one does not exist\n            string[] messages = new string[4];\n            string[] names = new string[4];\n            int index = 0;\n            int on = 1;\n            while (on == 1)\n            {\n                Console.WriteLine(&quot;Please make a choice &quot;);\n                Console.WriteLine(&quot;A. Save a message &quot;);\n                Console.WriteLine(&quot;B. Retrieve a message &quot;);\n                Console.WriteLine(&quot;C. Delete a Message&quot;);\n                Console.WriteLine(&quot;D. Exit &quot;);\n                string reply = Console.ReadLine().ToLower();\n\n                if (reply == &quot;a&quot;)\n                {\n                    if (index &lt;= messages.Length - 1)\n                    {\n                        //ask for a name\n                        //read &amp; store that name\n                        //create an array\n                        //create a class if time allows\n                        Console.WriteLine(&quot;Please leave your name.&quot;);\n                        names[index] = Console.ReadLine();\n                        Console.WriteLine(&quot;Please leave a message &quot;);\n                        messages[index] = Console.ReadLine();\n                        Console.WriteLine(&quot;Your message number is: &quot; + index);\n                        index = index + 1;\n                    }\n                    else\n                    {\n                        Console.WriteLine(&quot;Your messages are full.&quot;);\n                    }\n                }\n                else if (reply == &quot;b&quot;)\n\n                {\n                    //else statment- add console write line for name &amp; msg being retreived\n\n                    Console.WriteLine(&quot;Please give a message number &quot;);\n\n                    int id = Convert.ToInt32(Console.ReadLine());\n                    if (id &gt; index)\n                    {\n                        Console.WriteLine(&quot;Your message doesn't exists&quot;);\n                    }\n                    else\n                    {\n                        Console.WriteLine(names[id]+&quot; left you a message!&quot;);\n                        Console.WriteLine(messages[id]);\n                    }\n                }\n\n                //else if (reply == &quot;c&quot;)\n                //{\n                    //Console.WriteLine(&quot;What is the number of the message you would like to delete?&quot;);\n                    //int id = Convert.ToInt32(Console.ReadLine());\n                    //messages[id] = &quot;This message doesn't exist, spooky&quot;;\n                    //Console.WriteLine(&quot;Your message has been deleted&quot;);\n                //}\n\n                else if (reply == &quot;d&quot;)\n                {\n                    on = 0;\n                }\n                else\n                {\n                    Console.WriteLine(&quot;Option does not exist. Please enter either A, B, C, or D.&quot;);\n                }\n            }\n        }\n    }\n}\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "```\nusing System;\n\nnamespace RomanNumeralKata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {   //Create a message storage and retrieval system\n            //Show a menu that offers the user options on what they can do\n            //Delete a message, or replace\n            //Fixed size array, if we add too many messages, write a message that says you cannot do that\n            //If someone asks for a message number that doesn't exist, have a message saying that that one does not exist\n            string[] messages = new string[4];\n            string[] names = new string[4];\n            int index = 0;\n            int on = 1;\n            while (on == 1)\n            {\n                Console.WriteLine(\"Please make a choice \");\n                Console.WriteLine(\"A. Save a message \");\n                Console.WriteLine(\"B. Retrieve a message \");\n                Console.WriteLine(\"C. Delete a Message\");\n                Console.WriteLine(\"D. Exit \");\n                string reply = Console.ReadLine().ToLower();\n\n                if (reply == \"a\")\n                {\n                    if (index <= messages.Length - 1)\n                    {\n                        //ask for a name\n                        //read & store that name\n                        //create an array\n                        //create a class if time allows\n                        Console.WriteLine(\"Please leave your name.\");\n                        names[index] = Console.ReadLine();\n                        Console.WriteLine(\"Please leave a message \");\n                        messages[index] = Console.ReadLine();\n                        Console.WriteLine(\"Your message number is: \" + index);\n                        index = index + 1;\n                    }\n                    else\n                    {\n                        Console.WriteLine(\"Your messages are full.\");\n                    }\n                }\n                else if (reply == \"b\")\n\n                {\n                    //else statment- add console write line for name & msg being retreived\n\n                    Console.WriteLine(\"Please give a message number \");\n\n                    int id = Convert.ToInt32(Console.ReadLine());\n                    if (id > index)\n                    {\n                        Console.WriteLine(\"Your message doesn't exists\");\n                    }\n                    else\n                    {\n                        Console.WriteLine(names[id]+\" left you a message!\");\n                        Console.WriteLine(messages[id]);\n                    }\n                }\n\n                //else if (reply == \"c\")\n                //{\n                    //Console.WriteLine(\"What is the number of the message you would like to delete?\");\n                    //int id = Convert.ToInt32(Console.ReadLine());\n                    //messages[id] = \"This message doesn't exist, spooky\";\n                    //Console.WriteLine(\"Your message has been deleted\");\n                //}\n\n                else if (reply == \"d\")\n                {\n                    on = 0;\n                }\n                else\n                {\n                    Console.WriteLine(\"Option does not exist. Please enter either A, B, C, or D.\");\n                }\n            }\n        }\n    }\n}",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<pre><code>using System;\n\nnamespace RomanNumeralKata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {   //Create a message storage and retrieval system\n            //Show a menu that offers the user options on what they can do\n            //Delete a message, or replace\n            //Fixed size array, if we add too many messages, write a message that says you cannot do that\n            //If someone asks for a message number that doesn't exist, have a message saying that that one does not exist\n            string[] messages = new string[4];\n            string[] names = new string[4];\n            int index = 0;\n            int on = 1;\n            while (on == 1)\n            {\n                Console.WriteLine(&quot;Please make a choice &quot;);\n                Console.WriteLine(&quot;A. Save a message &quot;);\n                Console.WriteLine(&quot;B. Retrieve a message &quot;);\n                Console.WriteLine(&quot;C. Delete a Message&quot;);\n                Console.WriteLine(&quot;D. Exit &quot;);\n                string reply = Console.ReadLine().ToLower();\n\n                if (reply == &quot;a&quot;)\n                {\n                    if (index &lt;= messages.Length - 1)\n                    {\n                        //ask for a name\n                        //read &amp; store that name\n                        //create an array\n                        //create a class if time allows\n                        Console.WriteLine(&quot;Please leave your name.&quot;);\n                        names[index] = Console.ReadLine();\n                        Console.WriteLine(&quot;Please leave a message &quot;);\n                        messages[index] = Console.ReadLine();\n                        Console.WriteLine(&quot;Your message number is: &quot; + index);\n                        index = index + 1;\n                    }\n                    else\n                    {\n                        Console.WriteLine(&quot;Your messages are full.&quot;);\n                    }\n                }\n                else if (reply == &quot;b&quot;)\n\n                {\n                    //else statment- add console write line for name &amp; msg being retreived\n\n                    Console.WriteLine(&quot;Please give a message number &quot;);\n\n                    int id = Convert.ToInt32(Console.ReadLine());\n                    if (id &gt; index)\n                    {\n                        Console.WriteLine(&quot;Your message doesn't exists&quot;);\n                    }\n                    else\n                    {\n                        Console.WriteLine(names[id]+&quot; left you a message!&quot;);\n                        Console.WriteLine(messages[id]);\n                    }\n                }\n\n                //else if (reply == &quot;c&quot;)\n                //{\n                    //Console.WriteLine(&quot;What is the number of the message you would like to delete?&quot;);\n                    //int id = Convert.ToInt32(Console.ReadLine());\n                    //messages[id] = &quot;This message doesn't exist, spooky&quot;;\n                    //Console.WriteLine(&quot;Your message has been deleted&quot;);\n                //}\n\n                else if (reply == &quot;d&quot;)\n                {\n                    on = 0;\n                }\n                else\n                {\n                    Console.WriteLine(&quot;Option does not exist. Please enter either A, B, C, or D.&quot;);\n                }\n            }\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$1649864627414mGZno:matrix.workhardpgh.com",
      "origin_server_ts": 1649864627099,
      "unsigned": {
        "age": 351101985
      },
      "user_id": "@imaniemanuel:matrix.workhardpgh.com",
      "age": 351014838
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@imaniemanuel:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "Jessica Yockey: Tobias Tobak (he/him) Spenser Greeley ^^^",
            "mimetype": "text/plain"
          },
          {
            "body": "<a href=\"https://matrix.to/#/@yockeyjessica:matrix.workhardpgh.com\">Jessica Yockey</a>: <a href=\"https://matrix.to/#/@tobiasfunction:matrix.workhardpgh.com\">Tobias Tobak (he/him)</a> <a href=\"https://matrix.to/#/@spensermg:matrix.workhardpgh.com\">Spenser Greeley</a> ^^^",
            "mimetype": "text/html"
          }
        ],
        "body": "Jessica Yockey: Tobias Tobak (he/him) Spenser Greeley ^^^",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<a href=\"https://matrix.to/#/@yockeyjessica:matrix.workhardpgh.com\">Jessica Yockey</a>: <a href=\"https://matrix.to/#/@tobiasfunction:matrix.workhardpgh.com\">Tobias Tobak (he/him)</a> <a href=\"https://matrix.to/#/@spensermg:matrix.workhardpgh.com\">Spenser Greeley</a> ^^^"
      },
      "event_id": "$1649864695415sPmGz:matrix.workhardpgh.com",
      "origin_server_ts": 1649864695909,
      "unsigned": {
        "age": 351033175
      },
      "user_id": "@imaniemanuel:matrix.workhardpgh.com",
      "age": 350946028
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@onoyemi:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "```\nusing System;\n\nnamespace MessageSystem\n{\n    class Message\n    {\n        public string Name;\n        public string Text;\n\n\n        public void Print()\n        {\n            Console.WriteLine($\"My name is {Name}. My text is {Text}.\");\n        }\n    }\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // can you store and call a message using classes instead of functions\n            // Make a system that allows you to either a) save a message or b) retrieve a message\n            // When saving, return a # that the user can use to retrieve a message\n            // When retrieving, allow a user to put in a # to see the message saved\n\n            // create a class that is person, message\n            // class = message (name and text combined)\n            // create an array of person message classes\n            // then create an instance of a class\n            // fill out instances? will have stored a text and a name attached to it\n            // ask if they want to leave or retrieve a message (text)\n            // leave: ask for text and name\n            // retrieve: ask for name\n            // run through array until we find name\n            // print name and text\n\n            Message instance = new Message();\n            Console.WriteLine(\"What name?\");\n            string input1 = Console.ReadLine();\n            Console.WriteLine(\"What Text?\");\n            string input2 = Console.ReadLine();\n            instance.Name = input1;\n            instance.Text = input2;\n            instance.Print();\n\n            //Message instance2 = new Message();\n            //instance2.Print();\n\n\n\n        }\n    }\n}\n```",
            "mimetype": "text/plain"
          },
          {
            "body": "<pre><code>using System;\n\nnamespace MessageSystem\n{\n    class Message\n    {\n        public string Name;\n        public string Text;\n\n\n        public void Print()\n        {\n            Console.WriteLine($&quot;My name is {Name}. My text is {Text}.&quot;);\n        }\n    }\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // can you store and call a message using classes instead of functions\n            // Make a system that allows you to either a) save a message or b) retrieve a message\n            // When saving, return a # that the user can use to retrieve a message\n            // When retrieving, allow a user to put in a # to see the message saved\n\n            // create a class that is person, message\n            // class = message (name and text combined)\n            // create an array of person message classes\n            // then create an instance of a class\n            // fill out instances? will have stored a text and a name attached to it\n            // ask if they want to leave or retrieve a message (text)\n            // leave: ask for text and name\n            // retrieve: ask for name\n            // run through array until we find name\n            // print name and text\n\n            Message instance = new Message();\n            Console.WriteLine(&quot;What name?&quot;);\n            string input1 = Console.ReadLine();\n            Console.WriteLine(&quot;What Text?&quot;);\n            string input2 = Console.ReadLine();\n            instance.Name = input1;\n            instance.Text = input2;\n            instance.Print();\n\n            //Message instance2 = new Message();\n            //instance2.Print();\n\n\n\n        }\n    }\n}\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "```\nusing System;\n\nnamespace MessageSystem\n{\n    class Message\n    {\n        public string Name;\n        public string Text;\n\n\n        public void Print()\n        {\n            Console.WriteLine($\"My name is {Name}. My text is {Text}.\");\n        }\n    }\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // can you store and call a message using classes instead of functions\n            // Make a system that allows you to either a) save a message or b) retrieve a message\n            // When saving, return a # that the user can use to retrieve a message\n            // When retrieving, allow a user to put in a # to see the message saved\n\n            // create a class that is person, message\n            // class = message (name and text combined)\n            // create an array of person message classes\n            // then create an instance of a class\n            // fill out instances? will have stored a text and a name attached to it\n            // ask if they want to leave or retrieve a message (text)\n            // leave: ask for text and name\n            // retrieve: ask for name\n            // run through array until we find name\n            // print name and text\n\n            Message instance = new Message();\n            Console.WriteLine(\"What name?\");\n            string input1 = Console.ReadLine();\n            Console.WriteLine(\"What Text?\");\n            string input2 = Console.ReadLine();\n            instance.Name = input1;\n            instance.Text = input2;\n            instance.Print();\n\n            //Message instance2 = new Message();\n            //instance2.Print();\n\n\n\n        }\n    }\n}\n```",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<pre><code>using System;\n\nnamespace MessageSystem\n{\n    class Message\n    {\n        public string Name;\n        public string Text;\n\n\n        public void Print()\n        {\n            Console.WriteLine($&quot;My name is {Name}. My text is {Text}.&quot;);\n        }\n    }\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // can you store and call a message using classes instead of functions\n            // Make a system that allows you to either a) save a message or b) retrieve a message\n            // When saving, return a # that the user can use to retrieve a message\n            // When retrieving, allow a user to put in a # to see the message saved\n\n            // create a class that is person, message\n            // class = message (name and text combined)\n            // create an array of person message classes\n            // then create an instance of a class\n            // fill out instances? will have stored a text and a name attached to it\n            // ask if they want to leave or retrieve a message (text)\n            // leave: ask for text and name\n            // retrieve: ask for name\n            // run through array until we find name\n            // print name and text\n\n            Message instance = new Message();\n            Console.WriteLine(&quot;What name?&quot;);\n            string input1 = Console.ReadLine();\n            Console.WriteLine(&quot;What Text?&quot;);\n            string input2 = Console.ReadLine();\n            instance.Name = input1;\n            instance.Text = input2;\n            instance.Print();\n\n            //Message instance2 = new Message();\n            //instance2.Print();\n\n\n\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$1649865871419tyqCs:matrix.workhardpgh.com",
      "origin_server_ts": 1649865871593,
      "unsigned": {
        "age": 349857491
      },
      "user_id": "@onoyemi:matrix.workhardpgh.com",
      "age": 349770344
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@harrisonthurman:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "```            \nMessageAndName[] voicemail = new MessageAndName[3];\n            string[] messages = new string[3];\n            int numberofmessage = 0;\n            bool on = true;\n            while (on)\n            {\n                Console.WriteLine(\"Please choose A, B, or C:\");\n                Console.WriteLine(\"A: Save a message\");\n                Console.WriteLine(\"B: Retrieve a message\");\n                Console.WriteLine(\"C: Exit system\");\n                string response = Console.ReadLine().ToLower();\n                {\n                    if (response == \"a\")\n                    {\n                        voicemail[numberofmessage] = new MessageAndName();\n                        Console.WriteLine(\"What is your message?\");\n                            voicemail[numberofmessage].message = Console.ReadLine();\n\n                            Console.WriteLine(\"What is your name?\");\n                            voicemail[numberofmessage].name = Console.ReadLine();\n                            numberofmessage++;        \n                    }\n                    else if (response == \"b\")\n                    {\n                        Console.WriteLine(\"Enter number to retrieve message (start with 0)\");\n                        int code = Convert.ToInt32(Console.ReadLine());\n                        Console.WriteLine(voicemail[code].message);\n                        Console.WriteLine(\"from: \" + voicemail[code].name);\n                    }\n                    else if (response == \"c\")\n                    {\n                        on = false;\n                        Console.WriteLine(\"Goodbye\");\n                        Console.ReadLine();\n                    }\n                }\n            }\n        }\n        }\n        class MessageAndName\n        {\n            public string message;\n            public string name;\n        }\n    }\n```",
            "mimetype": "text/plain"
          },
          {
            "body": "<pre><code>MessageAndName[] voicemail = new MessageAndName[3];\n            string[] messages = new string[3];\n            int numberofmessage = 0;\n            bool on = true;\n            while (on)\n            {\n                Console.WriteLine(&quot;Please choose A, B, or C:&quot;);\n                Console.WriteLine(&quot;A: Save a message&quot;);\n                Console.WriteLine(&quot;B: Retrieve a message&quot;);\n                Console.WriteLine(&quot;C: Exit system&quot;);\n                string response = Console.ReadLine().ToLower();\n                {\n                    if (response == &quot;a&quot;)\n                    {\n                        voicemail[numberofmessage] = new MessageAndName();\n                        Console.WriteLine(&quot;What is your message?&quot;);\n                            voicemail[numberofmessage].message = Console.ReadLine();\n\n                            Console.WriteLine(&quot;What is your name?&quot;);\n                            voicemail[numberofmessage].name = Console.ReadLine();\n                            numberofmessage++;        \n                    }\n                    else if (response == &quot;b&quot;)\n                    {\n                        Console.WriteLine(&quot;Enter number to retrieve message (start with 0)&quot;);\n                        int code = Convert.ToInt32(Console.ReadLine());\n                        Console.WriteLine(voicemail[code].message);\n                        Console.WriteLine(&quot;from: &quot; + voicemail[code].name);\n                    }\n                    else if (response == &quot;c&quot;)\n                    {\n                        on = false;\n                        Console.WriteLine(&quot;Goodbye&quot;);\n                        Console.ReadLine();\n                    }\n                }\n            }\n        }\n        }\n        class MessageAndName\n        {\n            public string message;\n            public string name;\n        }\n    }\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "```            \nMessageAndName[] voicemail = new MessageAndName[3];\n            string[] messages = new string[3];\n            int numberofmessage = 0;\n            bool on = true;\n            while (on)\n            {\n                Console.WriteLine(\"Please choose A, B, or C:\");\n                Console.WriteLine(\"A: Save a message\");\n                Console.WriteLine(\"B: Retrieve a message\");\n                Console.WriteLine(\"C: Exit system\");\n                string response = Console.ReadLine().ToLower();\n                {\n                    if (response == \"a\")\n                    {\n                        voicemail[numberofmessage] = new MessageAndName();\n                        Console.WriteLine(\"What is your message?\");\n                            voicemail[numberofmessage].message = Console.ReadLine();\n\n                            Console.WriteLine(\"What is your name?\");\n                            voicemail[numberofmessage].name = Console.ReadLine();\n                            numberofmessage++;        \n                    }\n                    else if (response == \"b\")\n                    {\n                        Console.WriteLine(\"Enter number to retrieve message (start with 0)\");\n                        int code = Convert.ToInt32(Console.ReadLine());\n                        Console.WriteLine(voicemail[code].message);\n                        Console.WriteLine(\"from: \" + voicemail[code].name);\n                    }\n                    else if (response == \"c\")\n                    {\n                        on = false;\n                        Console.WriteLine(\"Goodbye\");\n                        Console.ReadLine();\n                    }\n                }\n            }\n        }\n        }\n        class MessageAndName\n        {\n            public string message;\n            public string name;\n        }\n    }\n```",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<pre><code>MessageAndName[] voicemail = new MessageAndName[3];\n            string[] messages = new string[3];\n            int numberofmessage = 0;\n            bool on = true;\n            while (on)\n            {\n                Console.WriteLine(&quot;Please choose A, B, or C:&quot;);\n                Console.WriteLine(&quot;A: Save a message&quot;);\n                Console.WriteLine(&quot;B: Retrieve a message&quot;);\n                Console.WriteLine(&quot;C: Exit system&quot;);\n                string response = Console.ReadLine().ToLower();\n                {\n                    if (response == &quot;a&quot;)\n                    {\n                        voicemail[numberofmessage] = new MessageAndName();\n                        Console.WriteLine(&quot;What is your message?&quot;);\n                            voicemail[numberofmessage].message = Console.ReadLine();\n\n                            Console.WriteLine(&quot;What is your name?&quot;);\n                            voicemail[numberofmessage].name = Console.ReadLine();\n                            numberofmessage++;        \n                    }\n                    else if (response == &quot;b&quot;)\n                    {\n                        Console.WriteLine(&quot;Enter number to retrieve message (start with 0)&quot;);\n                        int code = Convert.ToInt32(Console.ReadLine());\n                        Console.WriteLine(voicemail[code].message);\n                        Console.WriteLine(&quot;from: &quot; + voicemail[code].name);\n                    }\n                    else if (response == &quot;c&quot;)\n                    {\n                        on = false;\n                        Console.WriteLine(&quot;Goodbye&quot;);\n                        Console.ReadLine();\n                    }\n                }\n            }\n        }\n        }\n        class MessageAndName\n        {\n            public string message;\n            public string name;\n        }\n    }\n</code></pre>\n"
      },
      "event_id": "$1649870955436XMnQZ:matrix.workhardpgh.com",
      "origin_server_ts": 1649870955593,
      "unsigned": {
        "age": 344773491
      },
      "user_id": "@harrisonthurman:matrix.workhardpgh.com",
      "age": 344686344
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@shaunapage:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "andrew James Helt Joe W (he/him) ",
            "mimetype": "text/plain"
          },
          {
            "body": "<a href=\"https://matrix.to/#/@andrew:matrix.workhardpgh.com\">andrew</a> <a href=\"https://matrix.to/#/@jim_code:matrix.workhardpgh.com\">James Helt</a> <a href=\"https://matrix.to/#/@joewalker147:matrix.workhardpgh.com\">Joe W (he/him)</a>",
            "mimetype": "text/html"
          }
        ],
        "body": "andrew James Helt Joe W (he/him) ",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<a href=\"https://matrix.to/#/@andrew:matrix.workhardpgh.com\">andrew</a> <a href=\"https://matrix.to/#/@jim_code:matrix.workhardpgh.com\">James Helt</a> <a href=\"https://matrix.to/#/@joewalker147:matrix.workhardpgh.com\">Joe W (he/him)</a>"
      },
      "event_id": "$1649871332437DUjAK:matrix.workhardpgh.com",
      "origin_server_ts": 1649871332199,
      "unsigned": {
        "age": 344396885,
        "m.relations": {
          "m.replace": {
            "event_id": "$1649872950444fBLgE:matrix.workhardpgh.com",
            "origin_server_ts": 1649872950928,
            "sender": "@shaunapage:matrix.workhardpgh.com"
          }
        }
      },
      "user_id": "@shaunapage:matrix.workhardpgh.com",
      "age": 344309738
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@shaunapage:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "```csharp\nusing System;\n\nnamespace allo\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int totalmessages = 0;\n            bool keepgoing = true;\n            while(keepgoing)\n            {\n\n            \n            Console.WriteLine(\"Welcome to the messaging system\");\n\n            Console.WriteLine(\"select from the following:\");\n            Console.WriteLine(\"a) input a message\");\n            Console.WriteLine(\"b) retrieve a message\");\n            Console.WriteLine(\"c) exit\");\n            string option = Console.ReadLine();\n\n            \n            MessageIndex[] messages = new MessageIndex[10];\n            messages[totalmessages] = new MessageIndex();\n                if (option == \"a\")\n            {\n                Console.WriteLine(\"May I ask who's calling? \");\n                messages[totalmessages].name = Console.ReadLine();\n\n                Console.WriteLine(\"What is your message?\");\n                messages[totalmessages].message = Console.ReadLine();\n                Console.WriteLine(\"Thank you; Your message ID is: \" + totalmessages);\n                totalmessages++;\n            }\n            if (option == \"b\")\n            {\n                Console.WriteLine(\"What is your message ID?\");\n                int request = Convert.ToInt32(Console.ReadLine());\n                Console.WriteLine(messages[0].name);\n                Console.WriteLine(messages[0].message);\n            }\n            if (option == \"c\")\n            {\n                keepgoing = false;\n            }\n                \n          \n            \n        }\n\n    }\n\n    }\n    class MessageIndex\n\n    {\n        public string name;\n        public string message;\n    }\n}\n",
            "mimetype": "text/plain"
          },
          {
            "body": "<pre><code class=\"language-csharp\">using System;\n\nnamespace allo\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int totalmessages = 0;\n            bool keepgoing = true;\n            while(keepgoing)\n            {\n\n            \n            Console.WriteLine(&quot;Welcome to the messaging system&quot;);\n\n            Console.WriteLine(&quot;select from the following:&quot;);\n            Console.WriteLine(&quot;a) input a message&quot;);\n            Console.WriteLine(&quot;b) retrieve a message&quot;);\n            Console.WriteLine(&quot;c) exit&quot;);\n            string option = Console.ReadLine();\n\n            \n            MessageIndex[] messages = new MessageIndex[10];\n            messages[totalmessages] = new MessageIndex();\n                if (option == &quot;a&quot;)\n            {\n                Console.WriteLine(&quot;May I ask who's calling? &quot;);\n                messages[totalmessages].name = Console.ReadLine();\n\n                Console.WriteLine(&quot;What is your message?&quot;);\n                messages[totalmessages].message = Console.ReadLine();\n                Console.WriteLine(&quot;Thank you; Your message ID is: &quot; + totalmessages);\n                totalmessages++;\n            }\n            if (option == &quot;b&quot;)\n            {\n                Console.WriteLine(&quot;What is your message ID?&quot;);\n                int request = Convert.ToInt32(Console.ReadLine());\n                Console.WriteLine(messages[0].name);\n                Console.WriteLine(messages[0].message);\n            }\n            if (option == &quot;c&quot;)\n            {\n                keepgoing = false;\n            }\n                \n          \n            \n        }\n\n    }\n\n    }\n    class MessageIndex\n\n    {\n        public string name;\n        public string message;\n    }\n}\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "```csharp\nusing System;\n\nnamespace allo\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int totalmessages = 0;\n            bool keepgoing = true;\n            while(keepgoing)\n            {\n\n            \n            Console.WriteLine(\"Welcome to the messaging system\");\n\n            Console.WriteLine(\"select from the following:\");\n            Console.WriteLine(\"a) input a message\");\n            Console.WriteLine(\"b) retrieve a message\");\n            Console.WriteLine(\"c) exit\");\n            string option = Console.ReadLine();\n\n            \n            MessageIndex[] messages = new MessageIndex[10];\n            messages[totalmessages] = new MessageIndex();\n                if (option == \"a\")\n            {\n                Console.WriteLine(\"May I ask who's calling? \");\n                messages[totalmessages].name = Console.ReadLine();\n\n                Console.WriteLine(\"What is your message?\");\n                messages[totalmessages].message = Console.ReadLine();\n                Console.WriteLine(\"Thank you; Your message ID is: \" + totalmessages);\n                totalmessages++;\n            }\n            if (option == \"b\")\n            {\n                Console.WriteLine(\"What is your message ID?\");\n                int request = Convert.ToInt32(Console.ReadLine());\n                Console.WriteLine(messages[0].name);\n                Console.WriteLine(messages[0].message);\n            }\n            if (option == \"c\")\n            {\n                keepgoing = false;\n            }\n                \n          \n            \n        }\n\n    }\n\n    }\n    class MessageIndex\n\n    {\n        public string name;\n        public string message;\n    }\n}\n",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<pre><code class=\"language-csharp\">using System;\n\nnamespace allo\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            int totalmessages = 0;\n            bool keepgoing = true;\n            while(keepgoing)\n            {\n\n            \n            Console.WriteLine(&quot;Welcome to the messaging system&quot;);\n\n            Console.WriteLine(&quot;select from the following:&quot;);\n            Console.WriteLine(&quot;a) input a message&quot;);\n            Console.WriteLine(&quot;b) retrieve a message&quot;);\n            Console.WriteLine(&quot;c) exit&quot;);\n            string option = Console.ReadLine();\n\n            \n            MessageIndex[] messages = new MessageIndex[10];\n            messages[totalmessages] = new MessageIndex();\n                if (option == &quot;a&quot;)\n            {\n                Console.WriteLine(&quot;May I ask who's calling? &quot;);\n                messages[totalmessages].name = Console.ReadLine();\n\n                Console.WriteLine(&quot;What is your message?&quot;);\n                messages[totalmessages].message = Console.ReadLine();\n                Console.WriteLine(&quot;Thank you; Your message ID is: &quot; + totalmessages);\n                totalmessages++;\n            }\n            if (option == &quot;b&quot;)\n            {\n                Console.WriteLine(&quot;What is your message ID?&quot;);\n                int request = Convert.ToInt32(Console.ReadLine());\n                Console.WriteLine(messages[0].name);\n                Console.WriteLine(messages[0].message);\n            }\n            if (option == &quot;c&quot;)\n            {\n                keepgoing = false;\n            }\n                \n          \n            \n        }\n\n    }\n\n    }\n    class MessageIndex\n\n    {\n        public string name;\n        public string message;\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$1649871488438qKGvf:matrix.workhardpgh.com",
      "origin_server_ts": 1649871488623,
      "unsigned": {
        "age": 344240461,
        "m.relations": {
          "m.annotation": {
            "chunk": [
              {
                "type": "m.reaction",
                "key": "👍️",
                "count": 1
              }
            ]
          }
        }
      },
      "user_id": "@shaunapage:matrix.workhardpgh.com",
      "age": 344153314
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@imaniemanuel:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "```\nusing System;\n\nnamespace RomanNumeralKata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {   //Create a message storage and retrieval system\n            //Show a menu that offers the user options on what they can do\n            //Delete a message, or replace\n            //Fixed size array, if we add too many messages, write a message that says you cannot do that\n            //If someone asks for a message number that doesn't exist, have a message saying that that one does not exist\n            Person[] allMessages = new Person[10];\n            int index = 0;\n            int on = 1;\n            // create a person array to store our variables\n            //replace the individual arrays with class array in for loop\n            while (on == 1)\n            {\n                Console.WriteLine(\"Please make a choice \");\n                Console.WriteLine(\"A. Save a message \");\n                Console.WriteLine(\"B. Retrieve a message \");\n                Console.WriteLine(\"C. Delete a Message\");\n                Console.WriteLine(\"D. Exit \");\n                string reply = Console.ReadLine().ToLower();\n\n                if (reply == \"a\")\n                {\n                    if (index <= allMessages.Length - 1)\n                    {\n                        //ask for a name\n                        //read & store that name\n                        //create an array\n                        //create a class if time allows\n                        Console.WriteLine(\"Please leave your name.\");\n                        allMessages[index].name = Console.ReadLine();\n                        Console.WriteLine(\"Please leave a message \");\n                        allMessages[index].message = Console.ReadLine();\n                        Console.WriteLine(\"Your message number is: \" + index);\n                        index = index + 1;\n                    }\n                    else\n                    {\n                        Console.WriteLine(\"Your messages are full.\");\n                    }\n                }\n                else if (reply == \"b\")\n\n                {\n                    //else statment- add console write line for name & msg being retreived\n\n                    Console.WriteLine(\"Please give a message number \");\n\n                    int id = Convert.ToInt32(Console.ReadLine());\n                    if (id > index)\n                    {\n                        Console.WriteLine(\"Your message doesn't exists\");\n                    }\n                    else\n                    {\n                        Console.WriteLine(allMessages[id].name + \" left you a message!\");\n                        Console.WriteLine(allMessages[id].message);\n                    }\n                }\n\n                //else if (reply == \"c\")\n                //{\n                //Console.WriteLine(\"What is the number of the message you would like to delete?\");\n                //int id = Convert.ToInt32(Console.ReadLine());\n                //messages[id] = \"This message doesn't exist, spooky\";\n                //Console.WriteLine(\"Your message has been deleted\");\n                //}\n\n                else if (reply == \"d\")\n                {\n                    on = 0;\n                }\n                else\n                {\n                    Console.WriteLine(\"Option does not exist. Please enter either A, B, C, or D.\");\n\n                }\n            }\n        }\n        class Person\n        {\n            public string name;\n            public string message;\n\n        }\n    }\n}\n       ",
            "mimetype": "text/plain"
          },
          {
            "body": "<pre><code>using System;\n\nnamespace RomanNumeralKata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {   //Create a message storage and retrieval system\n            //Show a menu that offers the user options on what they can do\n            //Delete a message, or replace\n            //Fixed size array, if we add too many messages, write a message that says you cannot do that\n            //If someone asks for a message number that doesn't exist, have a message saying that that one does not exist\n            Person[] allMessages = new Person[10];\n            int index = 0;\n            int on = 1;\n            // create a person array to store our variables\n            //replace the individual arrays with class array in for loop\n            while (on == 1)\n            {\n                Console.WriteLine(&quot;Please make a choice &quot;);\n                Console.WriteLine(&quot;A. Save a message &quot;);\n                Console.WriteLine(&quot;B. Retrieve a message &quot;);\n                Console.WriteLine(&quot;C. Delete a Message&quot;);\n                Console.WriteLine(&quot;D. Exit &quot;);\n                string reply = Console.ReadLine().ToLower();\n\n                if (reply == &quot;a&quot;)\n                {\n                    if (index &lt;= allMessages.Length - 1)\n                    {\n                        //ask for a name\n                        //read &amp; store that name\n                        //create an array\n                        //create a class if time allows\n                        Console.WriteLine(&quot;Please leave your name.&quot;);\n                        allMessages[index].name = Console.ReadLine();\n                        Console.WriteLine(&quot;Please leave a message &quot;);\n                        allMessages[index].message = Console.ReadLine();\n                        Console.WriteLine(&quot;Your message number is: &quot; + index);\n                        index = index + 1;\n                    }\n                    else\n                    {\n                        Console.WriteLine(&quot;Your messages are full.&quot;);\n                    }\n                }\n                else if (reply == &quot;b&quot;)\n\n                {\n                    //else statment- add console write line for name &amp; msg being retreived\n\n                    Console.WriteLine(&quot;Please give a message number &quot;);\n\n                    int id = Convert.ToInt32(Console.ReadLine());\n                    if (id &gt; index)\n                    {\n                        Console.WriteLine(&quot;Your message doesn't exists&quot;);\n                    }\n                    else\n                    {\n                        Console.WriteLine(allMessages[id].name + &quot; left you a message!&quot;);\n                        Console.WriteLine(allMessages[id].message);\n                    }\n                }\n\n                //else if (reply == &quot;c&quot;)\n                //{\n                //Console.WriteLine(&quot;What is the number of the message you would like to delete?&quot;);\n                //int id = Convert.ToInt32(Console.ReadLine());\n                //messages[id] = &quot;This message doesn't exist, spooky&quot;;\n                //Console.WriteLine(&quot;Your message has been deleted&quot;);\n                //}\n\n                else if (reply == &quot;d&quot;)\n                {\n                    on = 0;\n                }\n                else\n                {\n                    Console.WriteLine(&quot;Option does not exist. Please enter either A, B, C, or D.&quot;);\n\n                }\n            }\n        }\n        class Person\n        {\n            public string name;\n            public string message;\n\n        }\n    }\n}\n       \n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "```\nusing System;\n\nnamespace RomanNumeralKata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {   //Create a message storage and retrieval system\n            //Show a menu that offers the user options on what they can do\n            //Delete a message, or replace\n            //Fixed size array, if we add too many messages, write a message that says you cannot do that\n            //If someone asks for a message number that doesn't exist, have a message saying that that one does not exist\n            Person[] allMessages = new Person[10];\n            int index = 0;\n            int on = 1;\n            // create a person array to store our variables\n            //replace the individual arrays with class array in for loop\n            while (on == 1)\n            {\n                Console.WriteLine(\"Please make a choice \");\n                Console.WriteLine(\"A. Save a message \");\n                Console.WriteLine(\"B. Retrieve a message \");\n                Console.WriteLine(\"C. Delete a Message\");\n                Console.WriteLine(\"D. Exit \");\n                string reply = Console.ReadLine().ToLower();\n\n                if (reply == \"a\")\n                {\n                    if (index <= allMessages.Length - 1)\n                    {\n                        //ask for a name\n                        //read & store that name\n                        //create an array\n                        //create a class if time allows\n                        Console.WriteLine(\"Please leave your name.\");\n                        allMessages[index].name = Console.ReadLine();\n                        Console.WriteLine(\"Please leave a message \");\n                        allMessages[index].message = Console.ReadLine();\n                        Console.WriteLine(\"Your message number is: \" + index);\n                        index = index + 1;\n                    }\n                    else\n                    {\n                        Console.WriteLine(\"Your messages are full.\");\n                    }\n                }\n                else if (reply == \"b\")\n\n                {\n                    //else statment- add console write line for name & msg being retreived\n\n                    Console.WriteLine(\"Please give a message number \");\n\n                    int id = Convert.ToInt32(Console.ReadLine());\n                    if (id > index)\n                    {\n                        Console.WriteLine(\"Your message doesn't exists\");\n                    }\n                    else\n                    {\n                        Console.WriteLine(allMessages[id].name + \" left you a message!\");\n                        Console.WriteLine(allMessages[id].message);\n                    }\n                }\n\n                //else if (reply == \"c\")\n                //{\n                //Console.WriteLine(\"What is the number of the message you would like to delete?\");\n                //int id = Convert.ToInt32(Console.ReadLine());\n                //messages[id] = \"This message doesn't exist, spooky\";\n                //Console.WriteLine(\"Your message has been deleted\");\n                //}\n\n                else if (reply == \"d\")\n                {\n                    on = 0;\n                }\n                else\n                {\n                    Console.WriteLine(\"Option does not exist. Please enter either A, B, C, or D.\");\n\n                }\n            }\n        }\n        class Person\n        {\n            public string name;\n            public string message;\n\n        }\n    }\n}\n       ",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<pre><code>using System;\n\nnamespace RomanNumeralKata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {   //Create a message storage and retrieval system\n            //Show a menu that offers the user options on what they can do\n            //Delete a message, or replace\n            //Fixed size array, if we add too many messages, write a message that says you cannot do that\n            //If someone asks for a message number that doesn't exist, have a message saying that that one does not exist\n            Person[] allMessages = new Person[10];\n            int index = 0;\n            int on = 1;\n            // create a person array to store our variables\n            //replace the individual arrays with class array in for loop\n            while (on == 1)\n            {\n                Console.WriteLine(&quot;Please make a choice &quot;);\n                Console.WriteLine(&quot;A. Save a message &quot;);\n                Console.WriteLine(&quot;B. Retrieve a message &quot;);\n                Console.WriteLine(&quot;C. Delete a Message&quot;);\n                Console.WriteLine(&quot;D. Exit &quot;);\n                string reply = Console.ReadLine().ToLower();\n\n                if (reply == &quot;a&quot;)\n                {\n                    if (index &lt;= allMessages.Length - 1)\n                    {\n                        //ask for a name\n                        //read &amp; store that name\n                        //create an array\n                        //create a class if time allows\n                        Console.WriteLine(&quot;Please leave your name.&quot;);\n                        allMessages[index].name = Console.ReadLine();\n                        Console.WriteLine(&quot;Please leave a message &quot;);\n                        allMessages[index].message = Console.ReadLine();\n                        Console.WriteLine(&quot;Your message number is: &quot; + index);\n                        index = index + 1;\n                    }\n                    else\n                    {\n                        Console.WriteLine(&quot;Your messages are full.&quot;);\n                    }\n                }\n                else if (reply == &quot;b&quot;)\n\n                {\n                    //else statment- add console write line for name &amp; msg being retreived\n\n                    Console.WriteLine(&quot;Please give a message number &quot;);\n\n                    int id = Convert.ToInt32(Console.ReadLine());\n                    if (id &gt; index)\n                    {\n                        Console.WriteLine(&quot;Your message doesn't exists&quot;);\n                    }\n                    else\n                    {\n                        Console.WriteLine(allMessages[id].name + &quot; left you a message!&quot;);\n                        Console.WriteLine(allMessages[id].message);\n                    }\n                }\n\n                //else if (reply == &quot;c&quot;)\n                //{\n                //Console.WriteLine(&quot;What is the number of the message you would like to delete?&quot;);\n                //int id = Convert.ToInt32(Console.ReadLine());\n                //messages[id] = &quot;This message doesn't exist, spooky&quot;;\n                //Console.WriteLine(&quot;Your message has been deleted&quot;);\n                //}\n\n                else if (reply == &quot;d&quot;)\n                {\n                    on = 0;\n                }\n                else\n                {\n                    Console.WriteLine(&quot;Option does not exist. Please enter either A, B, C, or D.&quot;);\n\n                }\n            }\n        }\n        class Person\n        {\n            public string name;\n            public string message;\n\n        }\n    }\n}\n       \n</code></pre>\n"
      },
      "event_id": "$1649871704439eDxYO:matrix.workhardpgh.com",
      "origin_server_ts": 1649871704655,
      "unsigned": {
        "age": 344024429
      },
      "user_id": "@imaniemanuel:matrix.workhardpgh.com",
      "age": 343937282
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@davidlasky:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "\n```\nusing System;\n\nnamespace MessageSystem\n{\n    class Message\n    {\n        public string Name;\n        public string Text;\n\n\n        public void Print()\n        {\n            Console.WriteLine($\"My name is {Name}. My text is {Text}.\");\n        }\n    }\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            \n            Message[] messageBank = new Message[10];\n            int messageBankIndex = 0;\n\n            //begin interface, ask what they wanna do\n            while (true)\n            {\n\n\n                Console.WriteLine(\"Do you want to leave or receive a message?(L/R)\");\n                string request = Console.ReadLine().ToUpper();\n                //they wanna leave a message\n                if (request == \"L\")\n                {\n                    Console.WriteLine(\"What's your name?\");\n                    string NameInput = Console.ReadLine();\n                    Console.WriteLine(\"Enter your message\");\n                    string TextInput = Console.ReadLine();\n                    Message instance = new Message();\n                    instance.Name = NameInput;\n                    instance.Text = TextInput;\n                    messageBank[messageBankIndex] = instance;\n                    Console.WriteLine($\"Your message is stored in {messageBankIndex}\");\n\n                    messageBankIndex++;\n                }\n                //they wanna read a message\n                else if (request == \"R\")\n                {\n                    Console.WriteLine(\"What's the name of the jerk that left the message?\");\n                    string requestedName = Console.ReadLine();\n                    foreach(Message message in messageBank)\n                    //for(int 1=0; i< messageBank.Length; i++ )\n                    {\n                        if (message.Name == requestedName)\n                        {\n                            message.Print();\n                        }\n                    }\n                }\n                else\n                {\n                    Console.WriteLine(\"try again, buddy\");\n                }\n            }\n            // can you store and call a message using classes instead of functions\n            // Make a system that allows you to either a) save a message or b) retrieve a message\n            // When saving, return a # that the user can use to retrieve a message\n            // When retrieving, allow a user to put in a # to see the message saved\n\n            // create a class that is person, message\n            // class = message (name and text combined)\n            // create an array of person message classes\n            // then create an instance of a class\n            // fill out instances? will have stored a text and a name attached to it\n            // ask if they want to leave or retrieve a message (text)\n            // leave: ask for text and name\n            // retrieve: ask for name\n            // run through array until we find name\n            // print name and text\n\n            //Message instance = new Message();\n            //Console.WriteLine(\"What name?\");\n            //string input1 = Console.ReadLine();\n            //Console.WriteLine(\"What Text?\");\n            //string input2 = Console.ReadLine();\n            //instance.Name = input;\n            //instance.Text = input2;\n            //instance.Print();\n\n            //Message instance2 = new Message();\n            //instance2.Print();\n\n\n\n        }\n    }\n}\n```",
            "mimetype": "text/plain"
          },
          {
            "body": "<pre><code>using System;\n\nnamespace MessageSystem\n{\n    class Message\n    {\n        public string Name;\n        public string Text;\n\n\n        public void Print()\n        {\n            Console.WriteLine($&quot;My name is {Name}. My text is {Text}.&quot;);\n        }\n    }\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            \n            Message[] messageBank = new Message[10];\n            int messageBankIndex = 0;\n\n            //begin interface, ask what they wanna do\n            while (true)\n            {\n\n\n                Console.WriteLine(&quot;Do you want to leave or receive a message?(L/R)&quot;);\n                string request = Console.ReadLine().ToUpper();\n                //they wanna leave a message\n                if (request == &quot;L&quot;)\n                {\n                    Console.WriteLine(&quot;What's your name?&quot;);\n                    string NameInput = Console.ReadLine();\n                    Console.WriteLine(&quot;Enter your message&quot;);\n                    string TextInput = Console.ReadLine();\n                    Message instance = new Message();\n                    instance.Name = NameInput;\n                    instance.Text = TextInput;\n                    messageBank[messageBankIndex] = instance;\n                    Console.WriteLine($&quot;Your message is stored in {messageBankIndex}&quot;);\n\n                    messageBankIndex++;\n                }\n                //they wanna read a message\n                else if (request == &quot;R&quot;)\n                {\n                    Console.WriteLine(&quot;What's the name of the jerk that left the message?&quot;);\n                    string requestedName = Console.ReadLine();\n                    foreach(Message message in messageBank)\n                    //for(int 1=0; i&lt; messageBank.Length; i++ )\n                    {\n                        if (message.Name == requestedName)\n                        {\n                            message.Print();\n                        }\n                    }\n                }\n                else\n                {\n                    Console.WriteLine(&quot;try again, buddy&quot;);\n                }\n            }\n            // can you store and call a message using classes instead of functions\n            // Make a system that allows you to either a) save a message or b) retrieve a message\n            // When saving, return a # that the user can use to retrieve a message\n            // When retrieving, allow a user to put in a # to see the message saved\n\n            // create a class that is person, message\n            // class = message (name and text combined)\n            // create an array of person message classes\n            // then create an instance of a class\n            // fill out instances? will have stored a text and a name attached to it\n            // ask if they want to leave or retrieve a message (text)\n            // leave: ask for text and name\n            // retrieve: ask for name\n            // run through array until we find name\n            // print name and text\n\n            //Message instance = new Message();\n            //Console.WriteLine(&quot;What name?&quot;);\n            //string input1 = Console.ReadLine();\n            //Console.WriteLine(&quot;What Text?&quot;);\n            //string input2 = Console.ReadLine();\n            //instance.Name = input;\n            //instance.Text = input2;\n            //instance.Print();\n\n            //Message instance2 = new Message();\n            //instance2.Print();\n\n\n\n        }\n    }\n}\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "\n```\nusing System;\n\nnamespace MessageSystem\n{\n    class Message\n    {\n        public string Name;\n        public string Text;\n\n\n        public void Print()\n        {\n            Console.WriteLine($\"My name is {Name}. My text is {Text}.\");\n        }\n    }\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            \n            Message[] messageBank = new Message[10];\n            int messageBankIndex = 0;\n\n            //begin interface, ask what they wanna do\n            while (true)\n            {\n\n\n                Console.WriteLine(\"Do you want to leave or receive a message?(L/R)\");\n                string request = Console.ReadLine().ToUpper();\n                //they wanna leave a message\n                if (request == \"L\")\n                {\n                    Console.WriteLine(\"What's your name?\");\n                    string NameInput = Console.ReadLine();\n                    Console.WriteLine(\"Enter your message\");\n                    string TextInput = Console.ReadLine();\n                    Message instance = new Message();\n                    instance.Name = NameInput;\n                    instance.Text = TextInput;\n                    messageBank[messageBankIndex] = instance;\n                    Console.WriteLine($\"Your message is stored in {messageBankIndex}\");\n\n                    messageBankIndex++;\n                }\n                //they wanna read a message\n                else if (request == \"R\")\n                {\n                    Console.WriteLine(\"What's the name of the jerk that left the message?\");\n                    string requestedName = Console.ReadLine();\n                    foreach(Message message in messageBank)\n                    //for(int 1=0; i< messageBank.Length; i++ )\n                    {\n                        if (message.Name == requestedName)\n                        {\n                            message.Print();\n                        }\n                    }\n                }\n                else\n                {\n                    Console.WriteLine(\"try again, buddy\");\n                }\n            }\n            // can you store and call a message using classes instead of functions\n            // Make a system that allows you to either a) save a message or b) retrieve a message\n            // When saving, return a # that the user can use to retrieve a message\n            // When retrieving, allow a user to put in a # to see the message saved\n\n            // create a class that is person, message\n            // class = message (name and text combined)\n            // create an array of person message classes\n            // then create an instance of a class\n            // fill out instances? will have stored a text and a name attached to it\n            // ask if they want to leave or retrieve a message (text)\n            // leave: ask for text and name\n            // retrieve: ask for name\n            // run through array until we find name\n            // print name and text\n\n            //Message instance = new Message();\n            //Console.WriteLine(\"What name?\");\n            //string input1 = Console.ReadLine();\n            //Console.WriteLine(\"What Text?\");\n            //string input2 = Console.ReadLine();\n            //instance.Name = input;\n            //instance.Text = input2;\n            //instance.Print();\n\n            //Message instance2 = new Message();\n            //instance2.Print();\n\n\n\n        }\n    }\n}\n```",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<pre><code>using System;\n\nnamespace MessageSystem\n{\n    class Message\n    {\n        public string Name;\n        public string Text;\n\n\n        public void Print()\n        {\n            Console.WriteLine($&quot;My name is {Name}. My text is {Text}.&quot;);\n        }\n    }\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            \n            Message[] messageBank = new Message[10];\n            int messageBankIndex = 0;\n\n            //begin interface, ask what they wanna do\n            while (true)\n            {\n\n\n                Console.WriteLine(&quot;Do you want to leave or receive a message?(L/R)&quot;);\n                string request = Console.ReadLine().ToUpper();\n                //they wanna leave a message\n                if (request == &quot;L&quot;)\n                {\n                    Console.WriteLine(&quot;What's your name?&quot;);\n                    string NameInput = Console.ReadLine();\n                    Console.WriteLine(&quot;Enter your message&quot;);\n                    string TextInput = Console.ReadLine();\n                    Message instance = new Message();\n                    instance.Name = NameInput;\n                    instance.Text = TextInput;\n                    messageBank[messageBankIndex] = instance;\n                    Console.WriteLine($&quot;Your message is stored in {messageBankIndex}&quot;);\n\n                    messageBankIndex++;\n                }\n                //they wanna read a message\n                else if (request == &quot;R&quot;)\n                {\n                    Console.WriteLine(&quot;What's the name of the jerk that left the message?&quot;);\n                    string requestedName = Console.ReadLine();\n                    foreach(Message message in messageBank)\n                    //for(int 1=0; i&lt; messageBank.Length; i++ )\n                    {\n                        if (message.Name == requestedName)\n                        {\n                            message.Print();\n                        }\n                    }\n                }\n                else\n                {\n                    Console.WriteLine(&quot;try again, buddy&quot;);\n                }\n            }\n            // can you store and call a message using classes instead of functions\n            // Make a system that allows you to either a) save a message or b) retrieve a message\n            // When saving, return a # that the user can use to retrieve a message\n            // When retrieving, allow a user to put in a # to see the message saved\n\n            // create a class that is person, message\n            // class = message (name and text combined)\n            // create an array of person message classes\n            // then create an instance of a class\n            // fill out instances? will have stored a text and a name attached to it\n            // ask if they want to leave or retrieve a message (text)\n            // leave: ask for text and name\n            // retrieve: ask for name\n            // run through array until we find name\n            // print name and text\n\n            //Message instance = new Message();\n            //Console.WriteLine(&quot;What name?&quot;);\n            //string input1 = Console.ReadLine();\n            //Console.WriteLine(&quot;What Text?&quot;);\n            //string input2 = Console.ReadLine();\n            //instance.Name = input;\n            //instance.Text = input2;\n            //instance.Print();\n\n            //Message instance2 = new Message();\n            //instance2.Print();\n\n\n\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$1649871830440tRDjt:matrix.workhardpgh.com",
      "origin_server_ts": 1649871830772,
      "unsigned": {
        "age": 343898312
      },
      "user_id": "@davidlasky:matrix.workhardpgh.com",
      "age": 343811165
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@imaniemanuel:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "Jessica Yockey: Spenser Greeley Tobias Tobak (he/him) ",
            "mimetype": "text/plain"
          },
          {
            "body": "<a href=\"https://matrix.to/#/@yockeyjessica:matrix.workhardpgh.com\">Jessica Yockey</a>: <a href=\"https://matrix.to/#/@spensermg:matrix.workhardpgh.com\">Spenser Greeley</a> <a href=\"https://matrix.to/#/@tobiasfunction:matrix.workhardpgh.com\">Tobias Tobak (he/him)</a>",
            "mimetype": "text/html"
          }
        ],
        "body": "Jessica Yockey: Spenser Greeley Tobias Tobak (he/him) ",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<a href=\"https://matrix.to/#/@yockeyjessica:matrix.workhardpgh.com\">Jessica Yockey</a>: <a href=\"https://matrix.to/#/@spensermg:matrix.workhardpgh.com\">Spenser Greeley</a> <a href=\"https://matrix.to/#/@tobiasfunction:matrix.workhardpgh.com\">Tobias Tobak (he/him)</a>"
      },
      "event_id": "$1649872444441FvnNA:matrix.workhardpgh.com",
      "origin_server_ts": 1649872444778,
      "unsigned": {
        "age": 343284306
      },
      "user_id": "@imaniemanuel:matrix.workhardpgh.com",
      "age": 343197159
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@imaniemanuel:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "```\nusing System;\n\nnamespace RomanNumeralKata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {   //Create a message storage and retrieval system\n            //Show a menu that offers the user options on what they can do\n            //Delete a message, or replace\n            //Fixed size array, if we add too many messages, write a message that says you cannot do that\n            //If someone asks for a message number that doesn't exist, have a message saying that that one does not exist\n            Person[] allMessages = new Person[10];\n            int index = 0;\n            int on = 1;\n            // create a person array to store our variables\n            //replace the individual arrays with class array in for loop\n            while (on == 1)\n            {\n                Console.WriteLine(\"Please make a choice \");\n                Console.WriteLine(\"A. Save a message \");\n                Console.WriteLine(\"B. Retrieve a message \");\n                Console.WriteLine(\"C. Delete a Message\");\n                Console.WriteLine(\"D. Exit \");\n                string reply = Console.ReadLine().ToLower();\n\n                if (reply == \"a\")\n                {\n                    if (index <= allMessages.Length - 1)\n                    {\n                        //ask for a name\n                        //read & store that name\n                        //create an array\n                        //create a class if time allows\n\n                        allMessages[index] = new Person();\n                        Console.WriteLine(\"Please leave your name.\");\n                        allMessages[index].name = Console.ReadLine();\n                        Console.WriteLine(\"Please leave a message \");\n                        allMessages[index].message = Console.ReadLine();\n                        Console.WriteLine(\"Your message number is: \" + index);\n                        index = index + 1;\n                    }\n                    else\n                    {\n                        Console.WriteLine(\"Your messages are full.\");\n                    }\n                }\n                else if (reply == \"b\")\n\n                {\n                    //else statment- add console write line for name & msg being retreived\n\n                    Console.WriteLine(\"Please give a message number \");\n\n                    int id = Convert.ToInt32(Console.ReadLine());\n                    if (id > index)\n                    {\n                        Console.WriteLine(\"Your message doesn't exists\");\n                    }\n                    else\n                    {\n                        Console.WriteLine(allMessages[id].name + \" left you a message!\");\n                        Console.WriteLine(allMessages[id].message);\n                    }\n                }\n\n                //else if (reply == \"c\")\n                //{\n                //Console.WriteLine(\"What is the number of the message you would like to delete?\");\n                //int id = Convert.ToInt32(Console.ReadLine());\n                //messages[id] = \"This message doesn't exist, spooky\";\n                //Console.WriteLine(\"Your message has been deleted\");\n                //}\n\n                else if (reply == \"d\")\n                {\n                    on = 0;\n                }\n                else\n                {\n                    Console.WriteLine(\"Option does not exist. Please enter either A, B, C, or D.\");\n\n                }\n            }\n        }\n        class Person\n        {\n            public string name;\n            public string message;\n\n        }\n    }\n}",
            "mimetype": "text/plain"
          },
          {
            "body": "<pre><code>using System;\n\nnamespace RomanNumeralKata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {   //Create a message storage and retrieval system\n            //Show a menu that offers the user options on what they can do\n            //Delete a message, or replace\n            //Fixed size array, if we add too many messages, write a message that says you cannot do that\n            //If someone asks for a message number that doesn't exist, have a message saying that that one does not exist\n            Person[] allMessages = new Person[10];\n            int index = 0;\n            int on = 1;\n            // create a person array to store our variables\n            //replace the individual arrays with class array in for loop\n            while (on == 1)\n            {\n                Console.WriteLine(&quot;Please make a choice &quot;);\n                Console.WriteLine(&quot;A. Save a message &quot;);\n                Console.WriteLine(&quot;B. Retrieve a message &quot;);\n                Console.WriteLine(&quot;C. Delete a Message&quot;);\n                Console.WriteLine(&quot;D. Exit &quot;);\n                string reply = Console.ReadLine().ToLower();\n\n                if (reply == &quot;a&quot;)\n                {\n                    if (index &lt;= allMessages.Length - 1)\n                    {\n                        //ask for a name\n                        //read &amp; store that name\n                        //create an array\n                        //create a class if time allows\n\n                        allMessages[index] = new Person();\n                        Console.WriteLine(&quot;Please leave your name.&quot;);\n                        allMessages[index].name = Console.ReadLine();\n                        Console.WriteLine(&quot;Please leave a message &quot;);\n                        allMessages[index].message = Console.ReadLine();\n                        Console.WriteLine(&quot;Your message number is: &quot; + index);\n                        index = index + 1;\n                    }\n                    else\n                    {\n                        Console.WriteLine(&quot;Your messages are full.&quot;);\n                    }\n                }\n                else if (reply == &quot;b&quot;)\n\n                {\n                    //else statment- add console write line for name &amp; msg being retreived\n\n                    Console.WriteLine(&quot;Please give a message number &quot;);\n\n                    int id = Convert.ToInt32(Console.ReadLine());\n                    if (id &gt; index)\n                    {\n                        Console.WriteLine(&quot;Your message doesn't exists&quot;);\n                    }\n                    else\n                    {\n                        Console.WriteLine(allMessages[id].name + &quot; left you a message!&quot;);\n                        Console.WriteLine(allMessages[id].message);\n                    }\n                }\n\n                //else if (reply == &quot;c&quot;)\n                //{\n                //Console.WriteLine(&quot;What is the number of the message you would like to delete?&quot;);\n                //int id = Convert.ToInt32(Console.ReadLine());\n                //messages[id] = &quot;This message doesn't exist, spooky&quot;;\n                //Console.WriteLine(&quot;Your message has been deleted&quot;);\n                //}\n\n                else if (reply == &quot;d&quot;)\n                {\n                    on = 0;\n                }\n                else\n                {\n                    Console.WriteLine(&quot;Option does not exist. Please enter either A, B, C, or D.&quot;);\n\n                }\n            }\n        }\n        class Person\n        {\n            public string name;\n            public string message;\n\n        }\n    }\n}\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "```\nusing System;\n\nnamespace RomanNumeralKata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {   //Create a message storage and retrieval system\n            //Show a menu that offers the user options on what they can do\n            //Delete a message, or replace\n            //Fixed size array, if we add too many messages, write a message that says you cannot do that\n            //If someone asks for a message number that doesn't exist, have a message saying that that one does not exist\n            Person[] allMessages = new Person[10];\n            int index = 0;\n            int on = 1;\n            // create a person array to store our variables\n            //replace the individual arrays with class array in for loop\n            while (on == 1)\n            {\n                Console.WriteLine(\"Please make a choice \");\n                Console.WriteLine(\"A. Save a message \");\n                Console.WriteLine(\"B. Retrieve a message \");\n                Console.WriteLine(\"C. Delete a Message\");\n                Console.WriteLine(\"D. Exit \");\n                string reply = Console.ReadLine().ToLower();\n\n                if (reply == \"a\")\n                {\n                    if (index <= allMessages.Length - 1)\n                    {\n                        //ask for a name\n                        //read & store that name\n                        //create an array\n                        //create a class if time allows\n\n                        allMessages[index] = new Person();\n                        Console.WriteLine(\"Please leave your name.\");\n                        allMessages[index].name = Console.ReadLine();\n                        Console.WriteLine(\"Please leave a message \");\n                        allMessages[index].message = Console.ReadLine();\n                        Console.WriteLine(\"Your message number is: \" + index);\n                        index = index + 1;\n                    }\n                    else\n                    {\n                        Console.WriteLine(\"Your messages are full.\");\n                    }\n                }\n                else if (reply == \"b\")\n\n                {\n                    //else statment- add console write line for name & msg being retreived\n\n                    Console.WriteLine(\"Please give a message number \");\n\n                    int id = Convert.ToInt32(Console.ReadLine());\n                    if (id > index)\n                    {\n                        Console.WriteLine(\"Your message doesn't exists\");\n                    }\n                    else\n                    {\n                        Console.WriteLine(allMessages[id].name + \" left you a message!\");\n                        Console.WriteLine(allMessages[id].message);\n                    }\n                }\n\n                //else if (reply == \"c\")\n                //{\n                //Console.WriteLine(\"What is the number of the message you would like to delete?\");\n                //int id = Convert.ToInt32(Console.ReadLine());\n                //messages[id] = \"This message doesn't exist, spooky\";\n                //Console.WriteLine(\"Your message has been deleted\");\n                //}\n\n                else if (reply == \"d\")\n                {\n                    on = 0;\n                }\n                else\n                {\n                    Console.WriteLine(\"Option does not exist. Please enter either A, B, C, or D.\");\n\n                }\n            }\n        }\n        class Person\n        {\n            public string name;\n            public string message;\n\n        }\n    }\n}",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<pre><code>using System;\n\nnamespace RomanNumeralKata01\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {   //Create a message storage and retrieval system\n            //Show a menu that offers the user options on what they can do\n            //Delete a message, or replace\n            //Fixed size array, if we add too many messages, write a message that says you cannot do that\n            //If someone asks for a message number that doesn't exist, have a message saying that that one does not exist\n            Person[] allMessages = new Person[10];\n            int index = 0;\n            int on = 1;\n            // create a person array to store our variables\n            //replace the individual arrays with class array in for loop\n            while (on == 1)\n            {\n                Console.WriteLine(&quot;Please make a choice &quot;);\n                Console.WriteLine(&quot;A. Save a message &quot;);\n                Console.WriteLine(&quot;B. Retrieve a message &quot;);\n                Console.WriteLine(&quot;C. Delete a Message&quot;);\n                Console.WriteLine(&quot;D. Exit &quot;);\n                string reply = Console.ReadLine().ToLower();\n\n                if (reply == &quot;a&quot;)\n                {\n                    if (index &lt;= allMessages.Length - 1)\n                    {\n                        //ask for a name\n                        //read &amp; store that name\n                        //create an array\n                        //create a class if time allows\n\n                        allMessages[index] = new Person();\n                        Console.WriteLine(&quot;Please leave your name.&quot;);\n                        allMessages[index].name = Console.ReadLine();\n                        Console.WriteLine(&quot;Please leave a message &quot;);\n                        allMessages[index].message = Console.ReadLine();\n                        Console.WriteLine(&quot;Your message number is: &quot; + index);\n                        index = index + 1;\n                    }\n                    else\n                    {\n                        Console.WriteLine(&quot;Your messages are full.&quot;);\n                    }\n                }\n                else if (reply == &quot;b&quot;)\n\n                {\n                    //else statment- add console write line for name &amp; msg being retreived\n\n                    Console.WriteLine(&quot;Please give a message number &quot;);\n\n                    int id = Convert.ToInt32(Console.ReadLine());\n                    if (id &gt; index)\n                    {\n                        Console.WriteLine(&quot;Your message doesn't exists&quot;);\n                    }\n                    else\n                    {\n                        Console.WriteLine(allMessages[id].name + &quot; left you a message!&quot;);\n                        Console.WriteLine(allMessages[id].message);\n                    }\n                }\n\n                //else if (reply == &quot;c&quot;)\n                //{\n                //Console.WriteLine(&quot;What is the number of the message you would like to delete?&quot;);\n                //int id = Convert.ToInt32(Console.ReadLine());\n                //messages[id] = &quot;This message doesn't exist, spooky&quot;;\n                //Console.WriteLine(&quot;Your message has been deleted&quot;);\n                //}\n\n                else if (reply == &quot;d&quot;)\n                {\n                    on = 0;\n                }\n                else\n                {\n                    Console.WriteLine(&quot;Option does not exist. Please enter either A, B, C, or D.&quot;);\n\n                }\n            }\n        }\n        class Person\n        {\n            public string name;\n            public string message;\n\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$1649872453442lEXmh:matrix.workhardpgh.com",
      "origin_server_ts": 1649872453942,
      "unsigned": {
        "age": 343275142
      },
      "user_id": "@imaniemanuel:matrix.workhardpgh.com",
      "age": 343187995
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@shaunapage:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "\\n",
            "mimetype": "text/plain"
          },
          {
            "body": "\\n",
            "mimetype": "text/html"
          }
        ],
        "body": "\\n",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "\\n"
      },
      "event_id": "$1649872666443VABSc:matrix.workhardpgh.com",
      "origin_server_ts": 1649872666357,
      "unsigned": {
        "age": 343062727
      },
      "user_id": "@shaunapage:matrix.workhardpgh.com",
      "age": 342975580
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "Classes Example no Array\n``` csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // message system\n            // but also save a name\n\n            Message myMessage = new Message();\n\n            bool keepLooping = true;\n            while (keepLooping == true)\n            {\n                // show the menu\n                Console.WriteLine(\"What would you like to do? \\na) leave a message \\nb) retrieve a message \\nq) quit\");\n                string menuChoice = Console.ReadLine().ToLower();\n\n                if(menuChoice == \"a\")\n                {\n                    // save\n                    Console.WriteLine(\"What is your message?\");\n                    myMessage.Text = Console.ReadLine();\n                    Console.WriteLine(\"What is your name?\");\n                    myMessage.PostedBy = Console.ReadLine();\n                    myMessage.PostedOn = DateTime.Now;\n\n                }\n                else if(menuChoice == \"b\")\n                {\n                    // retrieve\n                    myMessage.PrintMe();\n                }\n                else if (menuChoice == \"q\")\n                {\n                    // quit\n                    keepLooping = false;\n                }\n                else\n                {\n                    // uhh typo?\n                }\n            }\n\n        }\n    }\n\n    class Message\n    {\n        public string Text;\n        public string PostedBy;\n        public DateTime PostedOn;\n\n        public void PrintMe()\n        {\n            Console.WriteLine(\"Your message from \" + PostedBy + \" is:\");\n            Console.WriteLine(Text);\n            Console.WriteLine(\"It was posted on \" + PostedOn);\n        }\n    }\n\n}\n",
            "mimetype": "text/plain"
          },
          {
            "body": "<p>Classes Example no Array</p>\n<pre><code class=\"language-csharp\">using System;\nusing System.Collections.Generic;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // message system\n            // but also save a name\n\n            Message myMessage = new Message();\n\n            bool keepLooping = true;\n            while (keepLooping == true)\n            {\n                // show the menu\n                Console.WriteLine(&quot;What would you like to do? \\na) leave a message \\nb) retrieve a message \\nq) quit&quot;);\n                string menuChoice = Console.ReadLine().ToLower();\n\n                if(menuChoice == &quot;a&quot;)\n                {\n                    // save\n                    Console.WriteLine(&quot;What is your message?&quot;);\n                    myMessage.Text = Console.ReadLine();\n                    Console.WriteLine(&quot;What is your name?&quot;);\n                    myMessage.PostedBy = Console.ReadLine();\n                    myMessage.PostedOn = DateTime.Now;\n\n                }\n                else if(menuChoice == &quot;b&quot;)\n                {\n                    // retrieve\n                    myMessage.PrintMe();\n                }\n                else if (menuChoice == &quot;q&quot;)\n                {\n                    // quit\n                    keepLooping = false;\n                }\n                else\n                {\n                    // uhh typo?\n                }\n            }\n\n        }\n    }\n\n    class Message\n    {\n        public string Text;\n        public string PostedBy;\n        public DateTime PostedOn;\n\n        public void PrintMe()\n        {\n            Console.WriteLine(&quot;Your message from &quot; + PostedBy + &quot; is:&quot;);\n            Console.WriteLine(Text);\n            Console.WriteLine(&quot;It was posted on &quot; + PostedOn);\n        }\n    }\n\n}\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "Classes Example no Array\n``` csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // message system\n            // but also save a name\n\n            Message myMessage = new Message();\n\n            bool keepLooping = true;\n            while (keepLooping == true)\n            {\n                // show the menu\n                Console.WriteLine(\"What would you like to do? \\na) leave a message \\nb) retrieve a message \\nq) quit\");\n                string menuChoice = Console.ReadLine().ToLower();\n\n                if(menuChoice == \"a\")\n                {\n                    // save\n                    Console.WriteLine(\"What is your message?\");\n                    myMessage.Text = Console.ReadLine();\n                    Console.WriteLine(\"What is your name?\");\n                    myMessage.PostedBy = Console.ReadLine();\n                    myMessage.PostedOn = DateTime.Now;\n\n                }\n                else if(menuChoice == \"b\")\n                {\n                    // retrieve\n                    myMessage.PrintMe();\n                }\n                else if (menuChoice == \"q\")\n                {\n                    // quit\n                    keepLooping = false;\n                }\n                else\n                {\n                    // uhh typo?\n                }\n            }\n\n        }\n    }\n\n    class Message\n    {\n        public string Text;\n        public string PostedBy;\n        public DateTime PostedOn;\n\n        public void PrintMe()\n        {\n            Console.WriteLine(\"Your message from \" + PostedBy + \" is:\");\n            Console.WriteLine(Text);\n            Console.WriteLine(\"It was posted on \" + PostedOn);\n        }\n    }\n\n}\n",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Classes Example no Array</p>\n<pre><code class=\"language-csharp\">using System;\nusing System.Collections.Generic;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // message system\n            // but also save a name\n\n            Message myMessage = new Message();\n\n            bool keepLooping = true;\n            while (keepLooping == true)\n            {\n                // show the menu\n                Console.WriteLine(&quot;What would you like to do? \\na) leave a message \\nb) retrieve a message \\nq) quit&quot;);\n                string menuChoice = Console.ReadLine().ToLower();\n\n                if(menuChoice == &quot;a&quot;)\n                {\n                    // save\n                    Console.WriteLine(&quot;What is your message?&quot;);\n                    myMessage.Text = Console.ReadLine();\n                    Console.WriteLine(&quot;What is your name?&quot;);\n                    myMessage.PostedBy = Console.ReadLine();\n                    myMessage.PostedOn = DateTime.Now;\n\n                }\n                else if(menuChoice == &quot;b&quot;)\n                {\n                    // retrieve\n                    myMessage.PrintMe();\n                }\n                else if (menuChoice == &quot;q&quot;)\n                {\n                    // quit\n                    keepLooping = false;\n                }\n                else\n                {\n                    // uhh typo?\n                }\n            }\n\n        }\n    }\n\n    class Message\n    {\n        public string Text;\n        public string PostedBy;\n        public DateTime PostedOn;\n\n        public void PrintMe()\n        {\n            Console.WriteLine(&quot;Your message from &quot; + PostedBy + &quot; is:&quot;);\n            Console.WriteLine(Text);\n            Console.WriteLine(&quot;It was posted on &quot; + PostedOn);\n        }\n    }\n\n}\n</code></pre>\n"
      },
      "event_id": "$1649874977446ndSqz:matrix.workhardpgh.com",
      "origin_server_ts": 1649874977333,
      "unsigned": {
        "age": 340751751
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 340664604
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "Classes Example with Array\n``` csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // message system\n            // but also save a name\n\n            Message[] myMessages = new Message[10];\n\n\n            int address = 0;\n\n            bool keepLooping = true;\n            while (keepLooping == true)\n            {\n                // show the menu\n                Console.WriteLine(\"What would you like to do? \\na) leave a message \\nb) retrieve a message \\nq) quit\");\n                string menuChoice = Console.ReadLine().ToLower();\n\n                if(menuChoice == \"a\")\n                {\n                    // save\n\n                    myMessages[address] = new Message();\n                    Console.WriteLine(\"What is your message?\");\n                    myMessages[address].Text = Console.ReadLine();\n                    Console.WriteLine(\"What is your name?\");\n                    myMessages[address].PostedBy = Console.ReadLine();\n                    myMessages[address].PostedOn = DateTime.Now;\n\n                    Console.WriteLine(\"Thank you for leaving a message in box \" + address);\n                    address = address + 1;\n                }\n                else if(menuChoice == \"b\")\n                {\n                    // retrieve\n                    // ask which ID to show\n                    Console.WriteLine(\"Which message would you like to see?\");\n                    int messageId = Convert.ToInt32(Console.ReadLine());\n                    // show it\n                    myMessages[messageId].PrintMe();\n                }\n                else if (menuChoice == \"q\")\n                {\n                    // quit\n                    keepLooping = false;\n                }\n                else\n                {\n                    // uhh typo?\n                }\n            }\n\n        }\n    }\n\n    class Message\n    {\n        public string Text;\n        public string PostedBy;\n        public DateTime PostedOn;\n\n        public void PrintMe()\n        {\n            Console.WriteLine(\"Your message from \" + PostedBy + \" is:\");\n            Console.WriteLine(Text);\n            Console.WriteLine(\"It was posted on \" + PostedOn);\n        }\n    }\n\n}\n",
            "mimetype": "text/plain"
          },
          {
            "body": "<p>Classes Example with Array</p>\n<pre><code class=\"language-csharp\">using System;\nusing System.Collections.Generic;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // message system\n            // but also save a name\n\n            Message[] myMessages = new Message[10];\n\n\n            int address = 0;\n\n            bool keepLooping = true;\n            while (keepLooping == true)\n            {\n                // show the menu\n                Console.WriteLine(&quot;What would you like to do? \\na) leave a message \\nb) retrieve a message \\nq) quit&quot;);\n                string menuChoice = Console.ReadLine().ToLower();\n\n                if(menuChoice == &quot;a&quot;)\n                {\n                    // save\n\n                    myMessages[address] = new Message();\n                    Console.WriteLine(&quot;What is your message?&quot;);\n                    myMessages[address].Text = Console.ReadLine();\n                    Console.WriteLine(&quot;What is your name?&quot;);\n                    myMessages[address].PostedBy = Console.ReadLine();\n                    myMessages[address].PostedOn = DateTime.Now;\n\n                    Console.WriteLine(&quot;Thank you for leaving a message in box &quot; + address);\n                    address = address + 1;\n                }\n                else if(menuChoice == &quot;b&quot;)\n                {\n                    // retrieve\n                    // ask which ID to show\n                    Console.WriteLine(&quot;Which message would you like to see?&quot;);\n                    int messageId = Convert.ToInt32(Console.ReadLine());\n                    // show it\n                    myMessages[messageId].PrintMe();\n                }\n                else if (menuChoice == &quot;q&quot;)\n                {\n                    // quit\n                    keepLooping = false;\n                }\n                else\n                {\n                    // uhh typo?\n                }\n            }\n\n        }\n    }\n\n    class Message\n    {\n        public string Text;\n        public string PostedBy;\n        public DateTime PostedOn;\n\n        public void PrintMe()\n        {\n            Console.WriteLine(&quot;Your message from &quot; + PostedBy + &quot; is:&quot;);\n            Console.WriteLine(Text);\n            Console.WriteLine(&quot;It was posted on &quot; + PostedOn);\n        }\n    }\n\n}\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "Classes Example with Array\n``` csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // message system\n            // but also save a name\n\n            Message[] myMessages = new Message[10];\n\n\n            int address = 0;\n\n            bool keepLooping = true;\n            while (keepLooping == true)\n            {\n                // show the menu\n                Console.WriteLine(\"What would you like to do? \\na) leave a message \\nb) retrieve a message \\nq) quit\");\n                string menuChoice = Console.ReadLine().ToLower();\n\n                if(menuChoice == \"a\")\n                {\n                    // save\n\n                    myMessages[address] = new Message();\n                    Console.WriteLine(\"What is your message?\");\n                    myMessages[address].Text = Console.ReadLine();\n                    Console.WriteLine(\"What is your name?\");\n                    myMessages[address].PostedBy = Console.ReadLine();\n                    myMessages[address].PostedOn = DateTime.Now;\n\n                    Console.WriteLine(\"Thank you for leaving a message in box \" + address);\n                    address = address + 1;\n                }\n                else if(menuChoice == \"b\")\n                {\n                    // retrieve\n                    // ask which ID to show\n                    Console.WriteLine(\"Which message would you like to see?\");\n                    int messageId = Convert.ToInt32(Console.ReadLine());\n                    // show it\n                    myMessages[messageId].PrintMe();\n                }\n                else if (menuChoice == \"q\")\n                {\n                    // quit\n                    keepLooping = false;\n                }\n                else\n                {\n                    // uhh typo?\n                }\n            }\n\n        }\n    }\n\n    class Message\n    {\n        public string Text;\n        public string PostedBy;\n        public DateTime PostedOn;\n\n        public void PrintMe()\n        {\n            Console.WriteLine(\"Your message from \" + PostedBy + \" is:\");\n            Console.WriteLine(Text);\n            Console.WriteLine(\"It was posted on \" + PostedOn);\n        }\n    }\n\n}\n",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Classes Example with Array</p>\n<pre><code class=\"language-csharp\">using System;\nusing System.Collections.Generic;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // message system\n            // but also save a name\n\n            Message[] myMessages = new Message[10];\n\n\n            int address = 0;\n\n            bool keepLooping = true;\n            while (keepLooping == true)\n            {\n                // show the menu\n                Console.WriteLine(&quot;What would you like to do? \\na) leave a message \\nb) retrieve a message \\nq) quit&quot;);\n                string menuChoice = Console.ReadLine().ToLower();\n\n                if(menuChoice == &quot;a&quot;)\n                {\n                    // save\n\n                    myMessages[address] = new Message();\n                    Console.WriteLine(&quot;What is your message?&quot;);\n                    myMessages[address].Text = Console.ReadLine();\n                    Console.WriteLine(&quot;What is your name?&quot;);\n                    myMessages[address].PostedBy = Console.ReadLine();\n                    myMessages[address].PostedOn = DateTime.Now;\n\n                    Console.WriteLine(&quot;Thank you for leaving a message in box &quot; + address);\n                    address = address + 1;\n                }\n                else if(menuChoice == &quot;b&quot;)\n                {\n                    // retrieve\n                    // ask which ID to show\n                    Console.WriteLine(&quot;Which message would you like to see?&quot;);\n                    int messageId = Convert.ToInt32(Console.ReadLine());\n                    // show it\n                    myMessages[messageId].PrintMe();\n                }\n                else if (menuChoice == &quot;q&quot;)\n                {\n                    // quit\n                    keepLooping = false;\n                }\n                else\n                {\n                    // uhh typo?\n                }\n            }\n\n        }\n    }\n\n    class Message\n    {\n        public string Text;\n        public string PostedBy;\n        public DateTime PostedOn;\n\n        public void PrintMe()\n        {\n            Console.WriteLine(&quot;Your message from &quot; + PostedBy + &quot; is:&quot;);\n            Console.WriteLine(Text);\n            Console.WriteLine(&quot;It was posted on &quot; + PostedOn);\n        }\n    }\n\n}\n</code></pre>\n"
      },
      "event_id": "$1649875599447qcBkh:matrix.workhardpgh.com",
      "origin_server_ts": 1649875599714,
      "unsigned": {
        "age": 340129370
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 340042223
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "Twitter Example with Array\n``` csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // message system\n            // but also save a name\n\n            Message[] myMessages = new Message[10];\n            int address = 0;\n\n            bool running = true;\n            while (running)\n            {\n                Console.WriteLine(\"What would you like to do?  a) login  b) quit\");\n                string firstChoice = Console.ReadLine().ToLower();\n                if (firstChoice == \"a\")\n                {\n                    Console.WriteLine(\"What is your username?\");\n                    string username = Console.ReadLine();\n\n                    bool loggedIn = true;\n                    while (loggedIn == true)\n                    {\n                        // show the menu\n                        Console.WriteLine(\"What would you like to do? \\na) leave a message \\nb) retrieve a message \\nc) see all messages \\nq) quit\");\n                        string menuChoice = Console.ReadLine().ToLower();\n\n                        if (menuChoice == \"a\")\n                        {\n                            // save\n\n                            myMessages[address] = new Message();\n                            Console.WriteLine(\"What is your message?\");\n                            myMessages[address].Text = Console.ReadLine();\n                            myMessages[address].PostedBy = username;\n                            myMessages[address].PostedOn = DateTime.Now;\n\n                            Console.WriteLine(\"Thank you for leaving a message in box \" + address);\n                            address = address + 1;\n                        }\n                        else if (menuChoice == \"b\")\n                        {\n                            // retrieve\n                            // ask which ID to show\n                            Console.WriteLine(\"Which message would you like to see?\");\n                            int messageId = Convert.ToInt32(Console.ReadLine());\n                            // show it\n                            myMessages[messageId].PrintMe();\n                        }\n                        else if (menuChoice == \"c\")\n                        {\n                            for (int i = 0; i < address; i++)\n                            {\n                                myMessages[i].PrintMe();\n                            }\n                        }\n                        else if (menuChoice == \"q\")\n                        {\n                            // quit\n                            loggedIn = false;\n                        }\n                        else\n                        {\n                            // uhh typo?\n                        }\n                    }\n                }\n                else if (firstChoice == \"b\")\n                {\n                    running = false;\n                }\n                else\n                {\n                    Console.WriteLine(\"Please try again.\");\n                }\n                        \n            }\n        }\n    }\n\n    class Message\n    {\n        public string Text;\n        public string PostedBy;\n        public DateTime PostedOn;\n\n        public void PrintMe()\n        {\n            Console.WriteLine(\"Your message from \" + PostedBy + \" is:\");\n            Console.WriteLine(Text);\n            Console.WriteLine(\"It was posted on \" + PostedOn);\n        }\n    }\n\n}\n",
            "mimetype": "text/plain"
          },
          {
            "body": "<p>Twitter Example with Array</p>\n<pre><code class=\"language-csharp\">using System;\nusing System.Collections.Generic;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // message system\n            // but also save a name\n\n            Message[] myMessages = new Message[10];\n            int address = 0;\n\n            bool running = true;\n            while (running)\n            {\n                Console.WriteLine(&quot;What would you like to do?  a) login  b) quit&quot;);\n                string firstChoice = Console.ReadLine().ToLower();\n                if (firstChoice == &quot;a&quot;)\n                {\n                    Console.WriteLine(&quot;What is your username?&quot;);\n                    string username = Console.ReadLine();\n\n                    bool loggedIn = true;\n                    while (loggedIn == true)\n                    {\n                        // show the menu\n                        Console.WriteLine(&quot;What would you like to do? \\na) leave a message \\nb) retrieve a message \\nc) see all messages \\nq) quit&quot;);\n                        string menuChoice = Console.ReadLine().ToLower();\n\n                        if (menuChoice == &quot;a&quot;)\n                        {\n                            // save\n\n                            myMessages[address] = new Message();\n                            Console.WriteLine(&quot;What is your message?&quot;);\n                            myMessages[address].Text = Console.ReadLine();\n                            myMessages[address].PostedBy = username;\n                            myMessages[address].PostedOn = DateTime.Now;\n\n                            Console.WriteLine(&quot;Thank you for leaving a message in box &quot; + address);\n                            address = address + 1;\n                        }\n                        else if (menuChoice == &quot;b&quot;)\n                        {\n                            // retrieve\n                            // ask which ID to show\n                            Console.WriteLine(&quot;Which message would you like to see?&quot;);\n                            int messageId = Convert.ToInt32(Console.ReadLine());\n                            // show it\n                            myMessages[messageId].PrintMe();\n                        }\n                        else if (menuChoice == &quot;c&quot;)\n                        {\n                            for (int i = 0; i &lt; address; i++)\n                            {\n                                myMessages[i].PrintMe();\n                            }\n                        }\n                        else if (menuChoice == &quot;q&quot;)\n                        {\n                            // quit\n                            loggedIn = false;\n                        }\n                        else\n                        {\n                            // uhh typo?\n                        }\n                    }\n                }\n                else if (firstChoice == &quot;b&quot;)\n                {\n                    running = false;\n                }\n                else\n                {\n                    Console.WriteLine(&quot;Please try again.&quot;);\n                }\n                        \n            }\n        }\n    }\n\n    class Message\n    {\n        public string Text;\n        public string PostedBy;\n        public DateTime PostedOn;\n\n        public void PrintMe()\n        {\n            Console.WriteLine(&quot;Your message from &quot; + PostedBy + &quot; is:&quot;);\n            Console.WriteLine(Text);\n            Console.WriteLine(&quot;It was posted on &quot; + PostedOn);\n        }\n    }\n\n}\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "Twitter Example with Array\n``` csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // message system\n            // but also save a name\n\n            Message[] myMessages = new Message[10];\n            int address = 0;\n\n            bool running = true;\n            while (running)\n            {\n                Console.WriteLine(\"What would you like to do?  a) login  b) quit\");\n                string firstChoice = Console.ReadLine().ToLower();\n                if (firstChoice == \"a\")\n                {\n                    Console.WriteLine(\"What is your username?\");\n                    string username = Console.ReadLine();\n\n                    bool loggedIn = true;\n                    while (loggedIn == true)\n                    {\n                        // show the menu\n                        Console.WriteLine(\"What would you like to do? \\na) leave a message \\nb) retrieve a message \\nc) see all messages \\nq) quit\");\n                        string menuChoice = Console.ReadLine().ToLower();\n\n                        if (menuChoice == \"a\")\n                        {\n                            // save\n\n                            myMessages[address] = new Message();\n                            Console.WriteLine(\"What is your message?\");\n                            myMessages[address].Text = Console.ReadLine();\n                            myMessages[address].PostedBy = username;\n                            myMessages[address].PostedOn = DateTime.Now;\n\n                            Console.WriteLine(\"Thank you for leaving a message in box \" + address);\n                            address = address + 1;\n                        }\n                        else if (menuChoice == \"b\")\n                        {\n                            // retrieve\n                            // ask which ID to show\n                            Console.WriteLine(\"Which message would you like to see?\");\n                            int messageId = Convert.ToInt32(Console.ReadLine());\n                            // show it\n                            myMessages[messageId].PrintMe();\n                        }\n                        else if (menuChoice == \"c\")\n                        {\n                            for (int i = 0; i < address; i++)\n                            {\n                                myMessages[i].PrintMe();\n                            }\n                        }\n                        else if (menuChoice == \"q\")\n                        {\n                            // quit\n                            loggedIn = false;\n                        }\n                        else\n                        {\n                            // uhh typo?\n                        }\n                    }\n                }\n                else if (firstChoice == \"b\")\n                {\n                    running = false;\n                }\n                else\n                {\n                    Console.WriteLine(\"Please try again.\");\n                }\n                        \n            }\n        }\n    }\n\n    class Message\n    {\n        public string Text;\n        public string PostedBy;\n        public DateTime PostedOn;\n\n        public void PrintMe()\n        {\n            Console.WriteLine(\"Your message from \" + PostedBy + \" is:\");\n            Console.WriteLine(Text);\n            Console.WriteLine(\"It was posted on \" + PostedOn);\n        }\n    }\n\n}\n",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Twitter Example with Array</p>\n<pre><code class=\"language-csharp\">using System;\nusing System.Collections.Generic;\n\nnamespace Session14Week2\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // message system\n            // but also save a name\n\n            Message[] myMessages = new Message[10];\n            int address = 0;\n\n            bool running = true;\n            while (running)\n            {\n                Console.WriteLine(&quot;What would you like to do?  a) login  b) quit&quot;);\n                string firstChoice = Console.ReadLine().ToLower();\n                if (firstChoice == &quot;a&quot;)\n                {\n                    Console.WriteLine(&quot;What is your username?&quot;);\n                    string username = Console.ReadLine();\n\n                    bool loggedIn = true;\n                    while (loggedIn == true)\n                    {\n                        // show the menu\n                        Console.WriteLine(&quot;What would you like to do? \\na) leave a message \\nb) retrieve a message \\nc) see all messages \\nq) quit&quot;);\n                        string menuChoice = Console.ReadLine().ToLower();\n\n                        if (menuChoice == &quot;a&quot;)\n                        {\n                            // save\n\n                            myMessages[address] = new Message();\n                            Console.WriteLine(&quot;What is your message?&quot;);\n                            myMessages[address].Text = Console.ReadLine();\n                            myMessages[address].PostedBy = username;\n                            myMessages[address].PostedOn = DateTime.Now;\n\n                            Console.WriteLine(&quot;Thank you for leaving a message in box &quot; + address);\n                            address = address + 1;\n                        }\n                        else if (menuChoice == &quot;b&quot;)\n                        {\n                            // retrieve\n                            // ask which ID to show\n                            Console.WriteLine(&quot;Which message would you like to see?&quot;);\n                            int messageId = Convert.ToInt32(Console.ReadLine());\n                            // show it\n                            myMessages[messageId].PrintMe();\n                        }\n                        else if (menuChoice == &quot;c&quot;)\n                        {\n                            for (int i = 0; i &lt; address; i++)\n                            {\n                                myMessages[i].PrintMe();\n                            }\n                        }\n                        else if (menuChoice == &quot;q&quot;)\n                        {\n                            // quit\n                            loggedIn = false;\n                        }\n                        else\n                        {\n                            // uhh typo?\n                        }\n                    }\n                }\n                else if (firstChoice == &quot;b&quot;)\n                {\n                    running = false;\n                }\n                else\n                {\n                    Console.WriteLine(&quot;Please try again.&quot;);\n                }\n                        \n            }\n        }\n    }\n\n    class Message\n    {\n        public string Text;\n        public string PostedBy;\n        public DateTime PostedOn;\n\n        public void PrintMe()\n        {\n            Console.WriteLine(&quot;Your message from &quot; + PostedBy + &quot; is:&quot;);\n            Console.WriteLine(Text);\n            Console.WriteLine(&quot;It was posted on &quot; + PostedOn);\n        }\n    }\n\n}\n</code></pre>\n"
      },
      "event_id": "$1649876429448IgFTI:matrix.workhardpgh.com",
      "origin_server_ts": 1649876429990,
      "unsigned": {
        "age": 339299094
      },
      "user_id": "@uugengiven:matrix.workhardpgh.com",
      "age": 339211947
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@donna.san:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "Rich Stanley: Harrison (They / Them) jallison ",
            "mimetype": "text/plain"
          },
          {
            "body": "<a href=\"https://matrix.to/#/@richcstan:matrix.workhardpgh.com\">Rich Stanley</a>: <a href=\"https://matrix.to/#/@harrisonthurman:matrix.workhardpgh.com\">Harrison (They / Them)</a> <a href=\"https://matrix.to/#/@jallison:matrix.workhardpgh.com\">jallison</a>",
            "mimetype": "text/html"
          }
        ],
        "body": "Rich Stanley: Harrison (They / Them) jallison ",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<a href=\"https://matrix.to/#/@richcstan:matrix.workhardpgh.com\">Rich Stanley</a>: <a href=\"https://matrix.to/#/@harrisonthurman:matrix.workhardpgh.com\">Harrison (They / Them)</a> <a href=\"https://matrix.to/#/@jallison:matrix.workhardpgh.com\">jallison</a>"
      },
      "event_id": "$1649883505452ZExbG:matrix.workhardpgh.com",
      "origin_server_ts": 1649883505332,
      "unsigned": {
        "age": 332223752
      },
      "user_id": "@donna.san:matrix.workhardpgh.com",
      "age": 332136605
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@donna.san:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "```\nusing System;\n\nnamespace Caesar_Cipher\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Encoder\n            // Ask for the message\n            // Ask for the rotation\n            // show the encoded version\n\n            // Decoder\n            // ask for the encoded message\n            // ask for the rotation\n            // show the decoded version\n            \n            \n            bool on = true;\n            while (on)\n            {\n            Console.WriteLine(\"\\nDo you want to encrypt or decrypt a message?\");\n            Console.WriteLine(\"a)encrypt message \\nb)decrypt message \\nc)quit\");\n            string response = Console.ReadLine().ToLower();\n                if (response == \"a\")\n                {\n                    Console.WriteLine(\"\\nType a message to encrypt.\");\n                    string input = Console.ReadLine().ToLower();\n                    Console.WriteLine(\"What is the rotation?\");\n                    int rotation = Convert.ToInt32(Console.ReadLine());\n                    for(int i = 0; i <input.Length; i++)\n                    {\n                        Console.Write(cipher(input[i], rotation));\n                    }\n                }\n                else if (response == \"b\")\n                {\n                    Console.WriteLine(\"\\nType encrypted message.\");\n                    string input = Console.ReadLine().ToLower();\n                    Console.WriteLine(\"What is the rotation?\");\n                    int rotation = Convert.ToInt32(Console.ReadLine());\n                    for(int i = 0; i <input.Length; i++)\n                    {\n                        Console.Write(decipher(input[i], rotation));\n                    }\n                }\n                else if (response == \"c\")\n                {\n                    Console.WriteLine(\"Goodbye\");\n                    on = false;\n                }\n\n\n            }\n        }\n            public static char cipher(char input, int rotation)\n            {\n            return (char)(input + rotation);\n            \n            }\n            public static char decipher(char input, int rotation)\n            {\n            return (char)(input - rotation);\n            }\n        }\n\n    }\n\n```",
            "mimetype": "text/plain"
          },
          {
            "body": "<pre><code>using System;\n\nnamespace Caesar_Cipher\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Encoder\n            // Ask for the message\n            // Ask for the rotation\n            // show the encoded version\n\n            // Decoder\n            // ask for the encoded message\n            // ask for the rotation\n            // show the decoded version\n            \n            \n            bool on = true;\n            while (on)\n            {\n            Console.WriteLine(&quot;\\nDo you want to encrypt or decrypt a message?&quot;);\n            Console.WriteLine(&quot;a)encrypt message \\nb)decrypt message \\nc)quit&quot;);\n            string response = Console.ReadLine().ToLower();\n                if (response == &quot;a&quot;)\n                {\n                    Console.WriteLine(&quot;\\nType a message to encrypt.&quot;);\n                    string input = Console.ReadLine().ToLower();\n                    Console.WriteLine(&quot;What is the rotation?&quot;);\n                    int rotation = Convert.ToInt32(Console.ReadLine());\n                    for(int i = 0; i &lt;input.Length; i++)\n                    {\n                        Console.Write(cipher(input[i], rotation));\n                    }\n                }\n                else if (response == &quot;b&quot;)\n                {\n                    Console.WriteLine(&quot;\\nType encrypted message.&quot;);\n                    string input = Console.ReadLine().ToLower();\n                    Console.WriteLine(&quot;What is the rotation?&quot;);\n                    int rotation = Convert.ToInt32(Console.ReadLine());\n                    for(int i = 0; i &lt;input.Length; i++)\n                    {\n                        Console.Write(decipher(input[i], rotation));\n                    }\n                }\n                else if (response == &quot;c&quot;)\n                {\n                    Console.WriteLine(&quot;Goodbye&quot;);\n                    on = false;\n                }\n\n\n            }\n        }\n            public static char cipher(char input, int rotation)\n            {\n            return (char)(input + rotation);\n            \n            }\n            public static char decipher(char input, int rotation)\n            {\n            return (char)(input - rotation);\n            }\n        }\n\n    }\n\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "```\nusing System;\n\nnamespace Caesar_Cipher\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Encoder\n            // Ask for the message\n            // Ask for the rotation\n            // show the encoded version\n\n            // Decoder\n            // ask for the encoded message\n            // ask for the rotation\n            // show the decoded version\n            \n            \n            bool on = true;\n            while (on)\n            {\n            Console.WriteLine(\"\\nDo you want to encrypt or decrypt a message?\");\n            Console.WriteLine(\"a)encrypt message \\nb)decrypt message \\nc)quit\");\n            string response = Console.ReadLine().ToLower();\n                if (response == \"a\")\n                {\n                    Console.WriteLine(\"\\nType a message to encrypt.\");\n                    string input = Console.ReadLine().ToLower();\n                    Console.WriteLine(\"What is the rotation?\");\n                    int rotation = Convert.ToInt32(Console.ReadLine());\n                    for(int i = 0; i <input.Length; i++)\n                    {\n                        Console.Write(cipher(input[i], rotation));\n                    }\n                }\n                else if (response == \"b\")\n                {\n                    Console.WriteLine(\"\\nType encrypted message.\");\n                    string input = Console.ReadLine().ToLower();\n                    Console.WriteLine(\"What is the rotation?\");\n                    int rotation = Convert.ToInt32(Console.ReadLine());\n                    for(int i = 0; i <input.Length; i++)\n                    {\n                        Console.Write(decipher(input[i], rotation));\n                    }\n                }\n                else if (response == \"c\")\n                {\n                    Console.WriteLine(\"Goodbye\");\n                    on = false;\n                }\n\n\n            }\n        }\n            public static char cipher(char input, int rotation)\n            {\n            return (char)(input + rotation);\n            \n            }\n            public static char decipher(char input, int rotation)\n            {\n            return (char)(input - rotation);\n            }\n        }\n\n    }\n\n```",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<pre><code>using System;\n\nnamespace Caesar_Cipher\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Encoder\n            // Ask for the message\n            // Ask for the rotation\n            // show the encoded version\n\n            // Decoder\n            // ask for the encoded message\n            // ask for the rotation\n            // show the decoded version\n            \n            \n            bool on = true;\n            while (on)\n            {\n            Console.WriteLine(&quot;\\nDo you want to encrypt or decrypt a message?&quot;);\n            Console.WriteLine(&quot;a)encrypt message \\nb)decrypt message \\nc)quit&quot;);\n            string response = Console.ReadLine().ToLower();\n                if (response == &quot;a&quot;)\n                {\n                    Console.WriteLine(&quot;\\nType a message to encrypt.&quot;);\n                    string input = Console.ReadLine().ToLower();\n                    Console.WriteLine(&quot;What is the rotation?&quot;);\n                    int rotation = Convert.ToInt32(Console.ReadLine());\n                    for(int i = 0; i &lt;input.Length; i++)\n                    {\n                        Console.Write(cipher(input[i], rotation));\n                    }\n                }\n                else if (response == &quot;b&quot;)\n                {\n                    Console.WriteLine(&quot;\\nType encrypted message.&quot;);\n                    string input = Console.ReadLine().ToLower();\n                    Console.WriteLine(&quot;What is the rotation?&quot;);\n                    int rotation = Convert.ToInt32(Console.ReadLine());\n                    for(int i = 0; i &lt;input.Length; i++)\n                    {\n                        Console.Write(decipher(input[i], rotation));\n                    }\n                }\n                else if (response == &quot;c&quot;)\n                {\n                    Console.WriteLine(&quot;Goodbye&quot;);\n                    on = false;\n                }\n\n\n            }\n        }\n            public static char cipher(char input, int rotation)\n            {\n            return (char)(input + rotation);\n            \n            }\n            public static char decipher(char input, int rotation)\n            {\n            return (char)(input - rotation);\n            }\n        }\n\n    }\n\n</code></pre>\n"
      },
      "event_id": "$1649883518453WNxsl:matrix.workhardpgh.com",
      "origin_server_ts": 1649883518380,
      "unsigned": {
        "age": 332210704
      },
      "user_id": "@donna.san:matrix.workhardpgh.com",
      "age": 332123557
    },
    {
      "type": "m.room.message",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@jim_code:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "Team 3 current working code for encryption: andrew Joe W (he/him) shaunapage \n\n```csharp\nusing System;\n\nnamespace DecoderRing01\n{\n    class Program\n    {\n        static void Main(string[] args)\n\n        {\n            // Ovaltine\n            // JGNNQ BQQ\n            // 2\n            // HELLO ZOO\n\n            // Encoder\n            // Ask for the message\n            // Ask for the rotation\n            // show the encoded version\n\n            // Decoder\n            // ask for the encoded message\n            // ask for the rotation\n            // show the decoded version\n\n            \n\n            Console.WriteLine(\"What would you like to do? \\na:encode \\nb:decode\");\n            string option = Console.ReadLine();\n\n            if(option == \"a\")\n            {\n                Console.WriteLine(\"What is your message?\");\n                string messageEncode = (Console.ReadLine().ToLower());\n                Console.WriteLine(\"How many rotations?\");\n                int rotation = Convert.ToInt32(Console.ReadLine());\n                string encoded = encrypt(messageEncode, rotation);\n                Console.WriteLine(\"Your encoded message is: \");\n                Console.WriteLine(encoded);\n\n            }\n            \n        }\n        static string encrypt(string inputMessage, int rotation)\n        {\n            char[] alphabet = new char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };\n            char[] messageAsChar = inputMessage.ToCharArray();\n            char[] encryption = new char[inputMessage.Length];\n\n            for (int i = 0; i < inputMessage.Length; i++)\n            {\n                for (int j = 0; j < alphabet.Length; j++)\n                {\n                    if (messageAsChar[i] == alphabet[j])\n                    {\n                        encryption[i] = alphabet[j + rotation];\n                    }\n                }\n            }\n            //char[] chars = { 'a', ' ', 's', 't', 'r', 'i', 'n', 'g' };\n            //string s = new string(chars);\n            string finalMessage = new string(encryption);\n            return finalMessage;\n        }\n    }\n}```",
            "mimetype": "text/plain"
          },
          {
            "body": "<p>Team 3 current working code for encryption: <a href=\"https://matrix.to/#/@andrew:matrix.workhardpgh.com\">andrew</a> <a href=\"https://matrix.to/#/@joewalker147:matrix.workhardpgh.com\">Joe W (he/him)</a> <a href=\"https://matrix.to/#/@shaunapage:matrix.workhardpgh.com\">shaunapage</a></p>\n<pre><code class=\"language-csharp\">using System;\n\nnamespace DecoderRing01\n{\n    class Program\n    {\n        static void Main(string[] args)\n\n        {\n            // Ovaltine\n            // JGNNQ BQQ\n            // 2\n            // HELLO ZOO\n\n            // Encoder\n            // Ask for the message\n            // Ask for the rotation\n            // show the encoded version\n\n            // Decoder\n            // ask for the encoded message\n            // ask for the rotation\n            // show the decoded version\n\n            \n\n            Console.WriteLine(&quot;What would you like to do? \\na:encode \\nb:decode&quot;);\n            string option = Console.ReadLine();\n\n            if(option == &quot;a&quot;)\n            {\n                Console.WriteLine(&quot;What is your message?&quot;);\n                string messageEncode = (Console.ReadLine().ToLower());\n                Console.WriteLine(&quot;How many rotations?&quot;);\n                int rotation = Convert.ToInt32(Console.ReadLine());\n                string encoded = encrypt(messageEncode, rotation);\n                Console.WriteLine(&quot;Your encoded message is: &quot;);\n                Console.WriteLine(encoded);\n\n            }\n            \n        }\n        static string encrypt(string inputMessage, int rotation)\n        {\n            char[] alphabet = new char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };\n            char[] messageAsChar = inputMessage.ToCharArray();\n            char[] encryption = new char[inputMessage.Length];\n\n            for (int i = 0; i &lt; inputMessage.Length; i++)\n            {\n                for (int j = 0; j &lt; alphabet.Length; j++)\n                {\n                    if (messageAsChar[i] == alphabet[j])\n                    {\n                        encryption[i] = alphabet[j + rotation];\n                    }\n                }\n            }\n            //char[] chars = { 'a', ' ', 's', 't', 'r', 'i', 'n', 'g' };\n            //string s = new string(chars);\n            string finalMessage = new string(encryption);\n            return finalMessage;\n        }\n    }\n}```\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "Team 3 current working code for encryption: andrew Joe W (he/him) shaunapage \n\n```csharp\nusing System;\n\nnamespace DecoderRing01\n{\n    class Program\n    {\n        static void Main(string[] args)\n\n        {\n            // Ovaltine\n            // JGNNQ BQQ\n            // 2\n            // HELLO ZOO\n\n            // Encoder\n            // Ask for the message\n            // Ask for the rotation\n            // show the encoded version\n\n            // Decoder\n            // ask for the encoded message\n            // ask for the rotation\n            // show the decoded version\n\n            \n\n            Console.WriteLine(\"What would you like to do? \\na:encode \\nb:decode\");\n            string option = Console.ReadLine();\n\n            if(option == \"a\")\n            {\n                Console.WriteLine(\"What is your message?\");\n                string messageEncode = (Console.ReadLine().ToLower());\n                Console.WriteLine(\"How many rotations?\");\n                int rotation = Convert.ToInt32(Console.ReadLine());\n                string encoded = encrypt(messageEncode, rotation);\n                Console.WriteLine(\"Your encoded message is: \");\n                Console.WriteLine(encoded);\n\n            }\n            \n        }\n        static string encrypt(string inputMessage, int rotation)\n        {\n            char[] alphabet = new char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };\n            char[] messageAsChar = inputMessage.ToCharArray();\n            char[] encryption = new char[inputMessage.Length];\n\n            for (int i = 0; i < inputMessage.Length; i++)\n            {\n                for (int j = 0; j < alphabet.Length; j++)\n                {\n                    if (messageAsChar[i] == alphabet[j])\n                    {\n                        encryption[i] = alphabet[j + rotation];\n                    }\n                }\n            }\n            //char[] chars = { 'a', ' ', 's', 't', 'r', 'i', 'n', 'g' };\n            //string s = new string(chars);\n            string finalMessage = new string(encryption);\n            return finalMessage;\n        }\n    }\n}```",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Team 3 current working code for encryption: <a href=\"https://matrix.to/#/@andrew:matrix.workhardpgh.com\">andrew</a> <a href=\"https://matrix.to/#/@joewalker147:matrix.workhardpgh.com\">Joe W (he/him)</a> <a href=\"https://matrix.to/#/@shaunapage:matrix.workhardpgh.com\">shaunapage</a></p>\n<pre><code class=\"language-csharp\">using System;\n\nnamespace DecoderRing01\n{\n    class Program\n    {\n        static void Main(string[] args)\n\n        {\n            // Ovaltine\n            // JGNNQ BQQ\n            // 2\n            // HELLO ZOO\n\n            // Encoder\n            // Ask for the message\n            // Ask for the rotation\n            // show the encoded version\n\n            // Decoder\n            // ask for the encoded message\n            // ask for the rotation\n            // show the decoded version\n\n            \n\n            Console.WriteLine(&quot;What would you like to do? \\na:encode \\nb:decode&quot;);\n            string option = Console.ReadLine();\n\n            if(option == &quot;a&quot;)\n            {\n                Console.WriteLine(&quot;What is your message?&quot;);\n                string messageEncode = (Console.ReadLine().ToLower());\n                Console.WriteLine(&quot;How many rotations?&quot;);\n                int rotation = Convert.ToInt32(Console.ReadLine());\n                string encoded = encrypt(messageEncode, rotation);\n                Console.WriteLine(&quot;Your encoded message is: &quot;);\n                Console.WriteLine(encoded);\n\n            }\n            \n        }\n        static string encrypt(string inputMessage, int rotation)\n        {\n            char[] alphabet = new char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };\n            char[] messageAsChar = inputMessage.ToCharArray();\n            char[] encryption = new char[inputMessage.Length];\n\n            for (int i = 0; i &lt; inputMessage.Length; i++)\n            {\n                for (int j = 0; j &lt; alphabet.Length; j++)\n                {\n                    if (messageAsChar[i] == alphabet[j])\n                    {\n                        encryption[i] = alphabet[j + rotation];\n                    }\n                }\n            }\n            //char[] chars = { 'a', ' ', 's', 't', 'r', 'i', 'n', 'g' };\n            //string s = new string(chars);\n            string finalMessage = new string(encryption);\n            return finalMessage;\n        }\n    }\n}```\n</code></pre>\n"
      },
      "event_id": "$1649883636454pdaKB:matrix.workhardpgh.com",
      "origin_server_ts": 1649883636549,
      "unsigned": {
        "age": 332092535
      },
      "user_id": "@jim_code:matrix.workhardpgh.com",
      "age": 332005388
    },
    {
      "type": "m.room.message",
      "sender": "@taslater:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "davidlasky Yemi Truechild (she/her) Renat  samsnowdon\n\nCaesar salad encryption/decryption project:\n\n```csharp\nusing System;\n\nnamespace decoder\n{\n    class Program\n    {\n        static string Decode(string message, int rotation)\n        {\n            char[] alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".ToCharArray();\n            string outmessage = \"\";\n\n            //loop through message we're given\n            foreach (char c in message)\n            {\n                //\n                int currentIndex = Array.IndexOf(alphabet, c);\n                //spaces remain spaces, should not be translated\n                if (currentIndex == -1)\n                {\n                    //Console.WriteLine(c);\n                    outmessage = outmessage + c;\n                    continue;\n                }\n\n                //for each character in the string we're gonna add or subtract the rotation from it\n                int newIndex = (currentIndex + rotation) % alphabet.Length;\n                //compensate for the ends of the arrays\n                if (newIndex < 0)\n                {\n                    newIndex = newIndex + alphabet.Length;\n                }\n\n                //assemble all resulting characters into empty string\n                outmessage = outmessage + alphabet[newIndex];\n            }\n\n            return outmessage;\n        }\n        static void Main(string[] args)\n        {\n\n            // Decoder\n            // ask for the encoded message\n            // ask for the rotation\n            // show the decoded version\n\n            // JGNNQ BQQ\n            // 2\n            // HELLO ZOO\n            // Encoder\n            // Ask for the message\n            // Ask for the rotation\n            // ask to encrypt/decrypt\n            Console.WriteLine(\"Would you like to encrypt or decrypt a message? (e/d)\");\n            bool encrypt = Console.ReadLine().ToLower() == \"e\";\n            // show the encoded version\n            string prefix = encrypt ? \"en\" : \"de\";\n            Console.WriteLine($\"Enter a message to {prefix}crypt\");\n            string message = Console.ReadLine().ToUpper();\n            //\n            //ask if they need something encoded or decoded\n            //ask for message\n            //capture message\n            //ask for rotation (specify direction)\n            //capture rotation\n            Console.WriteLine($\"Enter a rotation for {prefix}cryption: (integer)\");\n            int rotation = Convert.ToInt32(Console.ReadLine());\n            // rotation direction is reversed for en/decryption\n            rotation *= encrypt ? 1 : -1;\n            //enter alphabet into an array (come back here, Tom and Yemi have some ABC solves)\n\n            string converted = Decode(message, rotation);\n\n            string antiprefix = !encrypt ? \"en\" : \"de\";\n\n            Console.WriteLine($\"\\nYour original ({antiprefix}crypted) message:\");\n            Console.WriteLine(message);\n            //print answer\n            Console.WriteLine($\"Your {prefix}crypted message:\");\n            Console.WriteLine(converted);\n        }\n    }\n} \n```\n\n(Repost from Academy Session 14 chat w/ minor modifications)",
            "mimetype": "text/plain"
          },
          {
            "body": "<p><a href=\"https://matrix.to/#/@davidlasky:matrix.workhardpgh.com\">davidlasky</a> <a href=\"https://matrix.to/#/@onoyemi:matrix.workhardpgh.com\">Yemi Truechild (she/her)</a> <a href=\"https://matrix.to/#/@renata42:matrix.workhardpgh.com\">Renat </a> <a href=\"https://matrix.to/#/@samsnowdon:matrix.workhardpgh.com\">samsnowdon</a></p>\n<p>Caesar salad encryption/decryption project:</p>\n<pre><code class=\"language-csharp\">using System;\n\nnamespace decoder\n{\n    class Program\n    {\n        static string Decode(string message, int rotation)\n        {\n            char[] alphabet = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;.ToCharArray();\n            string outmessage = &quot;&quot;;\n\n            //loop through message we're given\n            foreach (char c in message)\n            {\n                //\n                int currentIndex = Array.IndexOf(alphabet, c);\n                //spaces remain spaces, should not be translated\n                if (currentIndex == -1)\n                {\n                    //Console.WriteLine(c);\n                    outmessage = outmessage + c;\n                    continue;\n                }\n\n                //for each character in the string we're gonna add or subtract the rotation from it\n                int newIndex = (currentIndex + rotation) % alphabet.Length;\n                //compensate for the ends of the arrays\n                if (newIndex &lt; 0)\n                {\n                    newIndex = newIndex + alphabet.Length;\n                }\n\n                //assemble all resulting characters into empty string\n                outmessage = outmessage + alphabet[newIndex];\n            }\n\n            return outmessage;\n        }\n        static void Main(string[] args)\n        {\n\n            // Decoder\n            // ask for the encoded message\n            // ask for the rotation\n            // show the decoded version\n\n            // JGNNQ BQQ\n            // 2\n            // HELLO ZOO\n            // Encoder\n            // Ask for the message\n            // Ask for the rotation\n            // ask to encrypt/decrypt\n            Console.WriteLine(&quot;Would you like to encrypt or decrypt a message? (e/d)&quot;);\n            bool encrypt = Console.ReadLine().ToLower() == &quot;e&quot;;\n            // show the encoded version\n            string prefix = encrypt ? &quot;en&quot; : &quot;de&quot;;\n            Console.WriteLine($&quot;Enter a message to {prefix}crypt&quot;);\n            string message = Console.ReadLine().ToUpper();\n            //\n            //ask if they need something encoded or decoded\n            //ask for message\n            //capture message\n            //ask for rotation (specify direction)\n            //capture rotation\n            Console.WriteLine($&quot;Enter a rotation for {prefix}cryption: (integer)&quot;);\n            int rotation = Convert.ToInt32(Console.ReadLine());\n            // rotation direction is reversed for en/decryption\n            rotation *= encrypt ? 1 : -1;\n            //enter alphabet into an array (come back here, Tom and Yemi have some ABC solves)\n\n            string converted = Decode(message, rotation);\n\n            string antiprefix = !encrypt ? &quot;en&quot; : &quot;de&quot;;\n\n            Console.WriteLine($&quot;\\nYour original ({antiprefix}crypted) message:&quot;);\n            Console.WriteLine(message);\n            //print answer\n            Console.WriteLine($&quot;Your {prefix}crypted message:&quot;);\n            Console.WriteLine(converted);\n        }\n    }\n} \n</code></pre>\n<p>(Repost from Academy Session 14 chat w/ minor modifications)</p>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "davidlasky Yemi Truechild (she/her) Renat  samsnowdon\n\nCaesar salad encryption/decryption project:\n\n```csharp\nusing System;\n\nnamespace decoder\n{\n    class Program\n    {\n        static string Decode(string message, int rotation)\n        {\n            char[] alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\".ToCharArray();\n            string outmessage = \"\";\n\n            //loop through message we're given\n            foreach (char c in message)\n            {\n                //\n                int currentIndex = Array.IndexOf(alphabet, c);\n                //spaces remain spaces, should not be translated\n                if (currentIndex == -1)\n                {\n                    //Console.WriteLine(c);\n                    outmessage = outmessage + c;\n                    continue;\n                }\n\n                //for each character in the string we're gonna add or subtract the rotation from it\n                int newIndex = (currentIndex + rotation) % alphabet.Length;\n                //compensate for the ends of the arrays\n                if (newIndex < 0)\n                {\n                    newIndex = newIndex + alphabet.Length;\n                }\n\n                //assemble all resulting characters into empty string\n                outmessage = outmessage + alphabet[newIndex];\n            }\n\n            return outmessage;\n        }\n        static void Main(string[] args)\n        {\n\n            // Decoder\n            // ask for the encoded message\n            // ask for the rotation\n            // show the decoded version\n\n            // JGNNQ BQQ\n            // 2\n            // HELLO ZOO\n            // Encoder\n            // Ask for the message\n            // Ask for the rotation\n            // ask to encrypt/decrypt\n            Console.WriteLine(\"Would you like to encrypt or decrypt a message? (e/d)\");\n            bool encrypt = Console.ReadLine().ToLower() == \"e\";\n            // show the encoded version\n            string prefix = encrypt ? \"en\" : \"de\";\n            Console.WriteLine($\"Enter a message to {prefix}crypt\");\n            string message = Console.ReadLine().ToUpper();\n            //\n            //ask if they need something encoded or decoded\n            //ask for message\n            //capture message\n            //ask for rotation (specify direction)\n            //capture rotation\n            Console.WriteLine($\"Enter a rotation for {prefix}cryption: (integer)\");\n            int rotation = Convert.ToInt32(Console.ReadLine());\n            // rotation direction is reversed for en/decryption\n            rotation *= encrypt ? 1 : -1;\n            //enter alphabet into an array (come back here, Tom and Yemi have some ABC solves)\n\n            string converted = Decode(message, rotation);\n\n            string antiprefix = !encrypt ? \"en\" : \"de\";\n\n            Console.WriteLine($\"\\nYour original ({antiprefix}crypted) message:\");\n            Console.WriteLine(message);\n            //print answer\n            Console.WriteLine($\"Your {prefix}crypted message:\");\n            Console.WriteLine(converted);\n        }\n    }\n} \n```\n\n(Repost from Academy Session 14 chat w/ minor modifications)",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p><a href=\"https://matrix.to/#/@davidlasky:matrix.workhardpgh.com\">davidlasky</a> <a href=\"https://matrix.to/#/@onoyemi:matrix.workhardpgh.com\">Yemi Truechild (she/her)</a> <a href=\"https://matrix.to/#/@renata42:matrix.workhardpgh.com\">Renat </a> <a href=\"https://matrix.to/#/@samsnowdon:matrix.workhardpgh.com\">samsnowdon</a></p>\n<p>Caesar salad encryption/decryption project:</p>\n<pre><code class=\"language-csharp\">using System;\n\nnamespace decoder\n{\n    class Program\n    {\n        static string Decode(string message, int rotation)\n        {\n            char[] alphabet = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;.ToCharArray();\n            string outmessage = &quot;&quot;;\n\n            //loop through message we're given\n            foreach (char c in message)\n            {\n                //\n                int currentIndex = Array.IndexOf(alphabet, c);\n                //spaces remain spaces, should not be translated\n                if (currentIndex == -1)\n                {\n                    //Console.WriteLine(c);\n                    outmessage = outmessage + c;\n                    continue;\n                }\n\n                //for each character in the string we're gonna add or subtract the rotation from it\n                int newIndex = (currentIndex + rotation) % alphabet.Length;\n                //compensate for the ends of the arrays\n                if (newIndex &lt; 0)\n                {\n                    newIndex = newIndex + alphabet.Length;\n                }\n\n                //assemble all resulting characters into empty string\n                outmessage = outmessage + alphabet[newIndex];\n            }\n\n            return outmessage;\n        }\n        static void Main(string[] args)\n        {\n\n            // Decoder\n            // ask for the encoded message\n            // ask for the rotation\n            // show the decoded version\n\n            // JGNNQ BQQ\n            // 2\n            // HELLO ZOO\n            // Encoder\n            // Ask for the message\n            // Ask for the rotation\n            // ask to encrypt/decrypt\n            Console.WriteLine(&quot;Would you like to encrypt or decrypt a message? (e/d)&quot;);\n            bool encrypt = Console.ReadLine().ToLower() == &quot;e&quot;;\n            // show the encoded version\n            string prefix = encrypt ? &quot;en&quot; : &quot;de&quot;;\n            Console.WriteLine($&quot;Enter a message to {prefix}crypt&quot;);\n            string message = Console.ReadLine().ToUpper();\n            //\n            //ask if they need something encoded or decoded\n            //ask for message\n            //capture message\n            //ask for rotation (specify direction)\n            //capture rotation\n            Console.WriteLine($&quot;Enter a rotation for {prefix}cryption: (integer)&quot;);\n            int rotation = Convert.ToInt32(Console.ReadLine());\n            // rotation direction is reversed for en/decryption\n            rotation *= encrypt ? 1 : -1;\n            //enter alphabet into an array (come back here, Tom and Yemi have some ABC solves)\n\n            string converted = Decode(message, rotation);\n\n            string antiprefix = !encrypt ? &quot;en&quot; : &quot;de&quot;;\n\n            Console.WriteLine($&quot;\\nYour original ({antiprefix}crypted) message:&quot;);\n            Console.WriteLine(message);\n            //print answer\n            Console.WriteLine($&quot;Your {prefix}crypted message:&quot;);\n            Console.WriteLine(converted);\n        }\n    }\n} \n</code></pre>\n<p>(Repost from Academy Session 14 chat w/ minor modifications)</p>\n"
      },
      "event_id": "$1649898794455Lhdrc:matrix.workhardpgh.com",
      "origin_server_ts": 1649898794612,
      "unsigned": {
        "age": 316934472,
        "transaction_id": "m1649898794553.1",
        "m.relations": {
          "m.replace": {
            "event_id": "$1649898879457mkUYt:matrix.workhardpgh.com",
            "origin_server_ts": 1649898879486,
            "sender": "@taslater:matrix.workhardpgh.com"
          }
        }
      },
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com"
    },
    {
      "type": "m.room.message",
      "sender": "@donna.san:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "Rich Stanley: Harrison (They / Them) jallison ",
            "mimetype": "text/plain"
          },
          {
            "body": "<a href=\"https://matrix.to/#/@richcstan:matrix.workhardpgh.com\">Rich Stanley</a>: <a href=\"https://matrix.to/#/@harrisonthurman:matrix.workhardpgh.com\">Harrison (They / Them)</a> <a href=\"https://matrix.to/#/@jallison:matrix.workhardpgh.com\">jallison</a>",
            "mimetype": "text/html"
          }
        ],
        "body": "Rich Stanley: Harrison (They / Them) jallison ",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<a href=\"https://matrix.to/#/@richcstan:matrix.workhardpgh.com\">Rich Stanley</a>: <a href=\"https://matrix.to/#/@harrisonthurman:matrix.workhardpgh.com\">Harrison (They / Them)</a> <a href=\"https://matrix.to/#/@jallison:matrix.workhardpgh.com\">jallison</a>"
      },
      "event_id": "$1649944967471UUyby:matrix.workhardpgh.com",
      "origin_server_ts": 1649944967880,
      "unsigned": {
        "age": 270761204
      },
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com"
    },
    {
      "type": "m.room.message",
      "sender": "@donna.san:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "```\nusing System;\n\nnamespace Caesar_Cipher\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Encoder\n            // Ask for the message\n            // Ask for the rotation\n            // show the encoded version\n\n            // Decoder\n            // ask for the encoded message\n            // ask for the rotation\n            // show the decoded version\n\n\n            bool on = true;\n            while (on)\n            {\n                Console.WriteLine(\"\\nDo you want to encrypt or decrypt a message?\");\n                Console.WriteLine(\"a)encrypt message \\nb)decrypt message \\nc)quit\");\n                string response = Console.ReadLine().ToLower();\n                if (response == \"a\")\n                {\n                    Console.WriteLine(\"\\nType a message to encrypt.\");\n                    string input = Console.ReadLine().ToLower();\n                    Console.WriteLine(\"What is the rotation?\");\n                    int rotation = Convert.ToInt32(Console.ReadLine());\n                    for (int i = 0; i < input.Length; i++)\n                    {\n                        Console.Write(cipher(input[i], rotation));\n                    }\n                }\n\n                else if (response == \"b\")\n                {\n                    Console.WriteLine(\"\\nType encrypted message.\");\n                    string input = Console.ReadLine().ToLower();\n                    Console.WriteLine(\"What is the rotation?\");\n                    int rotation = Convert.ToInt32(Console.ReadLine());\n                    for (int i = 0; i < input.Length; i++)\n                    {\n                        Console.Write(decipher(input[i], rotation));\n                    }\n                }\n                else if (response == \"c\")\n                {\n                    Console.WriteLine(\"Goodbye\");\n                    on = false;\n                }\n\n\n            }\n        }\n        public static char cipher(char input, int rotation)\n        {\n            char currentletter = (char)(input + rotation);\n            if((int) currentletter > 122)\n            {\n                currentletter = (char)(input - 24);\n            }\n            return currentletter;\n        }\n        public static char decipher(char input, int rotation)\n        {\n            char currentletter = (char)(input - rotation);\n            if((int) currentletter < 97)\n            {\n                currentletter = (char)(input + 24);\n            }\n            return currentletter;\n\n        }\n    }\n\n}\n\n\n```",
            "mimetype": "text/plain"
          },
          {
            "body": "<pre><code>using System;\n\nnamespace Caesar_Cipher\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Encoder\n            // Ask for the message\n            // Ask for the rotation\n            // show the encoded version\n\n            // Decoder\n            // ask for the encoded message\n            // ask for the rotation\n            // show the decoded version\n\n\n            bool on = true;\n            while (on)\n            {\n                Console.WriteLine(&quot;\\nDo you want to encrypt or decrypt a message?&quot;);\n                Console.WriteLine(&quot;a)encrypt message \\nb)decrypt message \\nc)quit&quot;);\n                string response = Console.ReadLine().ToLower();\n                if (response == &quot;a&quot;)\n                {\n                    Console.WriteLine(&quot;\\nType a message to encrypt.&quot;);\n                    string input = Console.ReadLine().ToLower();\n                    Console.WriteLine(&quot;What is the rotation?&quot;);\n                    int rotation = Convert.ToInt32(Console.ReadLine());\n                    for (int i = 0; i &lt; input.Length; i++)\n                    {\n                        Console.Write(cipher(input[i], rotation));\n                    }\n                }\n\n                else if (response == &quot;b&quot;)\n                {\n                    Console.WriteLine(&quot;\\nType encrypted message.&quot;);\n                    string input = Console.ReadLine().ToLower();\n                    Console.WriteLine(&quot;What is the rotation?&quot;);\n                    int rotation = Convert.ToInt32(Console.ReadLine());\n                    for (int i = 0; i &lt; input.Length; i++)\n                    {\n                        Console.Write(decipher(input[i], rotation));\n                    }\n                }\n                else if (response == &quot;c&quot;)\n                {\n                    Console.WriteLine(&quot;Goodbye&quot;);\n                    on = false;\n                }\n\n\n            }\n        }\n        public static char cipher(char input, int rotation)\n        {\n            char currentletter = (char)(input + rotation);\n            if((int) currentletter &gt; 122)\n            {\n                currentletter = (char)(input - 24);\n            }\n            return currentletter;\n        }\n        public static char decipher(char input, int rotation)\n        {\n            char currentletter = (char)(input - rotation);\n            if((int) currentletter &lt; 97)\n            {\n                currentletter = (char)(input + 24);\n            }\n            return currentletter;\n\n        }\n    }\n\n}\n\n\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "```\nusing System;\n\nnamespace Caesar_Cipher\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Encoder\n            // Ask for the message\n            // Ask for the rotation\n            // show the encoded version\n\n            // Decoder\n            // ask for the encoded message\n            // ask for the rotation\n            // show the decoded version\n\n\n            bool on = true;\n            while (on)\n            {\n                Console.WriteLine(\"\\nDo you want to encrypt or decrypt a message?\");\n                Console.WriteLine(\"a)encrypt message \\nb)decrypt message \\nc)quit\");\n                string response = Console.ReadLine().ToLower();\n                if (response == \"a\")\n                {\n                    Console.WriteLine(\"\\nType a message to encrypt.\");\n                    string input = Console.ReadLine().ToLower();\n                    Console.WriteLine(\"What is the rotation?\");\n                    int rotation = Convert.ToInt32(Console.ReadLine());\n                    for (int i = 0; i < input.Length; i++)\n                    {\n                        Console.Write(cipher(input[i], rotation));\n                    }\n                }\n\n                else if (response == \"b\")\n                {\n                    Console.WriteLine(\"\\nType encrypted message.\");\n                    string input = Console.ReadLine().ToLower();\n                    Console.WriteLine(\"What is the rotation?\");\n                    int rotation = Convert.ToInt32(Console.ReadLine());\n                    for (int i = 0; i < input.Length; i++)\n                    {\n                        Console.Write(decipher(input[i], rotation));\n                    }\n                }\n                else if (response == \"c\")\n                {\n                    Console.WriteLine(\"Goodbye\");\n                    on = false;\n                }\n\n\n            }\n        }\n        public static char cipher(char input, int rotation)\n        {\n            char currentletter = (char)(input + rotation);\n            if((int) currentletter > 122)\n            {\n                currentletter = (char)(input - 24);\n            }\n            return currentletter;\n        }\n        public static char decipher(char input, int rotation)\n        {\n            char currentletter = (char)(input - rotation);\n            if((int) currentletter < 97)\n            {\n                currentletter = (char)(input + 24);\n            }\n            return currentletter;\n\n        }\n    }\n\n}\n\n\n```",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<pre><code>using System;\n\nnamespace Caesar_Cipher\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Encoder\n            // Ask for the message\n            // Ask for the rotation\n            // show the encoded version\n\n            // Decoder\n            // ask for the encoded message\n            // ask for the rotation\n            // show the decoded version\n\n\n            bool on = true;\n            while (on)\n            {\n                Console.WriteLine(&quot;\\nDo you want to encrypt or decrypt a message?&quot;);\n                Console.WriteLine(&quot;a)encrypt message \\nb)decrypt message \\nc)quit&quot;);\n                string response = Console.ReadLine().ToLower();\n                if (response == &quot;a&quot;)\n                {\n                    Console.WriteLine(&quot;\\nType a message to encrypt.&quot;);\n                    string input = Console.ReadLine().ToLower();\n                    Console.WriteLine(&quot;What is the rotation?&quot;);\n                    int rotation = Convert.ToInt32(Console.ReadLine());\n                    for (int i = 0; i &lt; input.Length; i++)\n                    {\n                        Console.Write(cipher(input[i], rotation));\n                    }\n                }\n\n                else if (response == &quot;b&quot;)\n                {\n                    Console.WriteLine(&quot;\\nType encrypted message.&quot;);\n                    string input = Console.ReadLine().ToLower();\n                    Console.WriteLine(&quot;What is the rotation?&quot;);\n                    int rotation = Convert.ToInt32(Console.ReadLine());\n                    for (int i = 0; i &lt; input.Length; i++)\n                    {\n                        Console.Write(decipher(input[i], rotation));\n                    }\n                }\n                else if (response == &quot;c&quot;)\n                {\n                    Console.WriteLine(&quot;Goodbye&quot;);\n                    on = false;\n                }\n\n\n            }\n        }\n        public static char cipher(char input, int rotation)\n        {\n            char currentletter = (char)(input + rotation);\n            if((int) currentletter &gt; 122)\n            {\n                currentletter = (char)(input - 24);\n            }\n            return currentletter;\n        }\n        public static char decipher(char input, int rotation)\n        {\n            char currentletter = (char)(input - rotation);\n            if((int) currentletter &lt; 97)\n            {\n                currentletter = (char)(input + 24);\n            }\n            return currentletter;\n\n        }\n    }\n\n}\n\n\n</code></pre>\n"
      },
      "event_id": "$1649944976472xSTFM:matrix.workhardpgh.com",
      "origin_server_ts": 1649944976400,
      "unsigned": {
        "age": 270752684
      },
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com"
    },
    {
      "type": "m.room.message",
      "sender": "@jim_code:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "andrew: Joe W (he/him) shaunapage \nTeam 3 functioning code:\n```csharp\nusing System;\n\nnamespace DecoderRing01\n{\n    class Program\n    {\n        static void Main(string[] args)\n\n        {\n            // Ovaltine\n            // JGNNQ BQQ\n            // 2\n            // HELLO ZOO\n\n            // Encoder\n            // Ask for the message\n            // Ask for the rotation\n            // show the encoded version\n\n            // Decoder\n            // ask for the encoded message\n            // ask for the rotation\n            // show the decoded version\n\n\n            bool keepGoing = true;\n            while (keepGoing)\n            {\n                Console.WriteLine(\"What would you like to do? \\na:encode \\nb:decode \\nc:quit\");\n                string option = Console.ReadLine();\n\n                if (option == \"a\")\n                {\n                    Console.WriteLine(\"What is your message?\");\n                    string messageEncode = (Console.ReadLine().ToLower());\n                    Console.WriteLine(\"How many rotations? (1 to 26)\");\n                    int rotation = Convert.ToInt32(Console.ReadLine());\n                    string encoded = encrypt(messageEncode, rotation);\n                    Console.WriteLine(\"Your encoded message is: \");\n                    Console.WriteLine(encoded);\n\n                }\n                else if (option == \"b\")\n                {\n                    Console.WriteLine(\"Enter your encrypted message.\");\n                    string messageDecode = (Console.ReadLine().ToLower());\n                    Console.WriteLine(\"How many rotations? (1 to 26)\");\n                    int rotation = Convert.ToInt32(Console.ReadLine());\n                    string decoded = decrypt(messageDecode, rotation);\n                    Console.WriteLine(\"Your decoded message is: \");\n                    Console.WriteLine(decoded);\n                }\n                else if (option == \"c\")\n                {\n                    Console.WriteLine(\"Thank you for encoding with Caesar Bot!\");\n                    keepGoing = false;\n                }\n                else\n                {\n                    Console.WriteLine(\"Did not understand input.\");\n                }\n            }\n        }\n        static string encrypt(string inputMessage, int rotation)\n        {\n            char[] alphabet = new char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };\n            char[] messageAsChar = inputMessage.ToCharArray();\n            char[] encryption = new char[inputMessage.Length];\n\n            for (int messagePosition = 0; messagePosition < inputMessage.Length; messagePosition++)\n            {\n                for (int key = 0; key < alphabet.Length; key++)\n                {\n                    if (messageAsChar[messagePosition] == alphabet[key])\n                    {\n                        if (key + rotation < alphabet.Length)\n                        {\n                            encryption[messagePosition] = alphabet[key + rotation];\n                        }\n                        else if (key+rotation >= alphabet.Length)\n                        {\n                            encryption[messagePosition] = alphabet[key + rotation - 26];\n                        }\n                    }\n                }\n            }\n            \n            string finalMessage = new string(encryption);\n            return finalMessage;\n\n\n        }\n        static string decrypt(string inputMessage, int rotation)\n        {\n            char[] alphabet = new char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };\n            char[] messageAsChar = inputMessage.ToCharArray();\n            char[] decryption = new char[inputMessage.Length];\n\n            for (int messagePosition = 0; messagePosition < inputMessage.Length; messagePosition++)\n            {\n                for (int key = 0; key < alphabet.Length; key++)\n                {\n                    if (messageAsChar[messagePosition] == alphabet[key])\n                    {\n                        if (key - rotation >= 0)\n                        {\n                            decryption[messagePosition] = alphabet[key - rotation];\n                        }\n                        else if (key - rotation < 0)\n                        {\n                            decryption[messagePosition] = alphabet[key - rotation + 26];\n                        }\n                    }\n                }\n            }\n\n            string finalMessage = new string(decryption);\n            return finalMessage;\n        }\n     }\n}\n```",
            "mimetype": "text/plain"
          },
          {
            "body": "<p><a href=\"https://matrix.to/#/@andrew:matrix.workhardpgh.com\">andrew</a>: <a href=\"https://matrix.to/#/@joewalker147:matrix.workhardpgh.com\">Joe W (he/him)</a> <a href=\"https://matrix.to/#/@shaunapage:matrix.workhardpgh.com\">shaunapage</a><br>Team 3 functioning code:</p>\n<pre><code class=\"language-csharp\">using System;\n\nnamespace DecoderRing01\n{\n    class Program\n    {\n        static void Main(string[] args)\n\n        {\n            // Ovaltine\n            // JGNNQ BQQ\n            // 2\n            // HELLO ZOO\n\n            // Encoder\n            // Ask for the message\n            // Ask for the rotation\n            // show the encoded version\n\n            // Decoder\n            // ask for the encoded message\n            // ask for the rotation\n            // show the decoded version\n\n\n            bool keepGoing = true;\n            while (keepGoing)\n            {\n                Console.WriteLine(&quot;What would you like to do? \\na:encode \\nb:decode \\nc:quit&quot;);\n                string option = Console.ReadLine();\n\n                if (option == &quot;a&quot;)\n                {\n                    Console.WriteLine(&quot;What is your message?&quot;);\n                    string messageEncode = (Console.ReadLine().ToLower());\n                    Console.WriteLine(&quot;How many rotations? (1 to 26)&quot;);\n                    int rotation = Convert.ToInt32(Console.ReadLine());\n                    string encoded = encrypt(messageEncode, rotation);\n                    Console.WriteLine(&quot;Your encoded message is: &quot;);\n                    Console.WriteLine(encoded);\n\n                }\n                else if (option == &quot;b&quot;)\n                {\n                    Console.WriteLine(&quot;Enter your encrypted message.&quot;);\n                    string messageDecode = (Console.ReadLine().ToLower());\n                    Console.WriteLine(&quot;How many rotations? (1 to 26)&quot;);\n                    int rotation = Convert.ToInt32(Console.ReadLine());\n                    string decoded = decrypt(messageDecode, rotation);\n                    Console.WriteLine(&quot;Your decoded message is: &quot;);\n                    Console.WriteLine(decoded);\n                }\n                else if (option == &quot;c&quot;)\n                {\n                    Console.WriteLine(&quot;Thank you for encoding with Caesar Bot!&quot;);\n                    keepGoing = false;\n                }\n                else\n                {\n                    Console.WriteLine(&quot;Did not understand input.&quot;);\n                }\n            }\n        }\n        static string encrypt(string inputMessage, int rotation)\n        {\n            char[] alphabet = new char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };\n            char[] messageAsChar = inputMessage.ToCharArray();\n            char[] encryption = new char[inputMessage.Length];\n\n            for (int messagePosition = 0; messagePosition &lt; inputMessage.Length; messagePosition++)\n            {\n                for (int key = 0; key &lt; alphabet.Length; key++)\n                {\n                    if (messageAsChar[messagePosition] == alphabet[key])\n                    {\n                        if (key + rotation &lt; alphabet.Length)\n                        {\n                            encryption[messagePosition] = alphabet[key + rotation];\n                        }\n                        else if (key+rotation &gt;= alphabet.Length)\n                        {\n                            encryption[messagePosition] = alphabet[key + rotation - 26];\n                        }\n                    }\n                }\n            }\n            \n            string finalMessage = new string(encryption);\n            return finalMessage;\n\n\n        }\n        static string decrypt(string inputMessage, int rotation)\n        {\n            char[] alphabet = new char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };\n            char[] messageAsChar = inputMessage.ToCharArray();\n            char[] decryption = new char[inputMessage.Length];\n\n            for (int messagePosition = 0; messagePosition &lt; inputMessage.Length; messagePosition++)\n            {\n                for (int key = 0; key &lt; alphabet.Length; key++)\n                {\n                    if (messageAsChar[messagePosition] == alphabet[key])\n                    {\n                        if (key - rotation &gt;= 0)\n                        {\n                            decryption[messagePosition] = alphabet[key - rotation];\n                        }\n                        else if (key - rotation &lt; 0)\n                        {\n                            decryption[messagePosition] = alphabet[key - rotation + 26];\n                        }\n                    }\n                }\n            }\n\n            string finalMessage = new string(decryption);\n            return finalMessage;\n        }\n     }\n}\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "andrew: Joe W (he/him) shaunapage \nTeam 3 functioning code:\n```csharp\nusing System;\n\nnamespace DecoderRing01\n{\n    class Program\n    {\n        static void Main(string[] args)\n\n        {\n            // Ovaltine\n            // JGNNQ BQQ\n            // 2\n            // HELLO ZOO\n\n            // Encoder\n            // Ask for the message\n            // Ask for the rotation\n            // show the encoded version\n\n            // Decoder\n            // ask for the encoded message\n            // ask for the rotation\n            // show the decoded version\n\n\n            bool keepGoing = true;\n            while (keepGoing)\n            {\n                Console.WriteLine(\"What would you like to do? \\na:encode \\nb:decode \\nc:quit\");\n                string option = Console.ReadLine();\n\n                if (option == \"a\")\n                {\n                    Console.WriteLine(\"What is your message?\");\n                    string messageEncode = (Console.ReadLine().ToLower());\n                    Console.WriteLine(\"How many rotations? (1 to 26)\");\n                    int rotation = Convert.ToInt32(Console.ReadLine());\n                    string encoded = encrypt(messageEncode, rotation);\n                    Console.WriteLine(\"Your encoded message is: \");\n                    Console.WriteLine(encoded);\n\n                }\n                else if (option == \"b\")\n                {\n                    Console.WriteLine(\"Enter your encrypted message.\");\n                    string messageDecode = (Console.ReadLine().ToLower());\n                    Console.WriteLine(\"How many rotations? (1 to 26)\");\n                    int rotation = Convert.ToInt32(Console.ReadLine());\n                    string decoded = decrypt(messageDecode, rotation);\n                    Console.WriteLine(\"Your decoded message is: \");\n                    Console.WriteLine(decoded);\n                }\n                else if (option == \"c\")\n                {\n                    Console.WriteLine(\"Thank you for encoding with Caesar Bot!\");\n                    keepGoing = false;\n                }\n                else\n                {\n                    Console.WriteLine(\"Did not understand input.\");\n                }\n            }\n        }\n        static string encrypt(string inputMessage, int rotation)\n        {\n            char[] alphabet = new char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };\n            char[] messageAsChar = inputMessage.ToCharArray();\n            char[] encryption = new char[inputMessage.Length];\n\n            for (int messagePosition = 0; messagePosition < inputMessage.Length; messagePosition++)\n            {\n                for (int key = 0; key < alphabet.Length; key++)\n                {\n                    if (messageAsChar[messagePosition] == alphabet[key])\n                    {\n                        if (key + rotation < alphabet.Length)\n                        {\n                            encryption[messagePosition] = alphabet[key + rotation];\n                        }\n                        else if (key+rotation >= alphabet.Length)\n                        {\n                            encryption[messagePosition] = alphabet[key + rotation - 26];\n                        }\n                    }\n                }\n            }\n            \n            string finalMessage = new string(encryption);\n            return finalMessage;\n\n\n        }\n        static string decrypt(string inputMessage, int rotation)\n        {\n            char[] alphabet = new char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };\n            char[] messageAsChar = inputMessage.ToCharArray();\n            char[] decryption = new char[inputMessage.Length];\n\n            for (int messagePosition = 0; messagePosition < inputMessage.Length; messagePosition++)\n            {\n                for (int key = 0; key < alphabet.Length; key++)\n                {\n                    if (messageAsChar[messagePosition] == alphabet[key])\n                    {\n                        if (key - rotation >= 0)\n                        {\n                            decryption[messagePosition] = alphabet[key - rotation];\n                        }\n                        else if (key - rotation < 0)\n                        {\n                            decryption[messagePosition] = alphabet[key - rotation + 26];\n                        }\n                    }\n                }\n            }\n\n            string finalMessage = new string(decryption);\n            return finalMessage;\n        }\n     }\n}\n```",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p><a href=\"https://matrix.to/#/@andrew:matrix.workhardpgh.com\">andrew</a>: <a href=\"https://matrix.to/#/@joewalker147:matrix.workhardpgh.com\">Joe W (he/him)</a> <a href=\"https://matrix.to/#/@shaunapage:matrix.workhardpgh.com\">shaunapage</a><br>Team 3 functioning code:</p>\n<pre><code class=\"language-csharp\">using System;\n\nnamespace DecoderRing01\n{\n    class Program\n    {\n        static void Main(string[] args)\n\n        {\n            // Ovaltine\n            // JGNNQ BQQ\n            // 2\n            // HELLO ZOO\n\n            // Encoder\n            // Ask for the message\n            // Ask for the rotation\n            // show the encoded version\n\n            // Decoder\n            // ask for the encoded message\n            // ask for the rotation\n            // show the decoded version\n\n\n            bool keepGoing = true;\n            while (keepGoing)\n            {\n                Console.WriteLine(&quot;What would you like to do? \\na:encode \\nb:decode \\nc:quit&quot;);\n                string option = Console.ReadLine();\n\n                if (option == &quot;a&quot;)\n                {\n                    Console.WriteLine(&quot;What is your message?&quot;);\n                    string messageEncode = (Console.ReadLine().ToLower());\n                    Console.WriteLine(&quot;How many rotations? (1 to 26)&quot;);\n                    int rotation = Convert.ToInt32(Console.ReadLine());\n                    string encoded = encrypt(messageEncode, rotation);\n                    Console.WriteLine(&quot;Your encoded message is: &quot;);\n                    Console.WriteLine(encoded);\n\n                }\n                else if (option == &quot;b&quot;)\n                {\n                    Console.WriteLine(&quot;Enter your encrypted message.&quot;);\n                    string messageDecode = (Console.ReadLine().ToLower());\n                    Console.WriteLine(&quot;How many rotations? (1 to 26)&quot;);\n                    int rotation = Convert.ToInt32(Console.ReadLine());\n                    string decoded = decrypt(messageDecode, rotation);\n                    Console.WriteLine(&quot;Your decoded message is: &quot;);\n                    Console.WriteLine(decoded);\n                }\n                else if (option == &quot;c&quot;)\n                {\n                    Console.WriteLine(&quot;Thank you for encoding with Caesar Bot!&quot;);\n                    keepGoing = false;\n                }\n                else\n                {\n                    Console.WriteLine(&quot;Did not understand input.&quot;);\n                }\n            }\n        }\n        static string encrypt(string inputMessage, int rotation)\n        {\n            char[] alphabet = new char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };\n            char[] messageAsChar = inputMessage.ToCharArray();\n            char[] encryption = new char[inputMessage.Length];\n\n            for (int messagePosition = 0; messagePosition &lt; inputMessage.Length; messagePosition++)\n            {\n                for (int key = 0; key &lt; alphabet.Length; key++)\n                {\n                    if (messageAsChar[messagePosition] == alphabet[key])\n                    {\n                        if (key + rotation &lt; alphabet.Length)\n                        {\n                            encryption[messagePosition] = alphabet[key + rotation];\n                        }\n                        else if (key+rotation &gt;= alphabet.Length)\n                        {\n                            encryption[messagePosition] = alphabet[key + rotation - 26];\n                        }\n                    }\n                }\n            }\n            \n            string finalMessage = new string(encryption);\n            return finalMessage;\n\n\n        }\n        static string decrypt(string inputMessage, int rotation)\n        {\n            char[] alphabet = new char[] { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };\n            char[] messageAsChar = inputMessage.ToCharArray();\n            char[] decryption = new char[inputMessage.Length];\n\n            for (int messagePosition = 0; messagePosition &lt; inputMessage.Length; messagePosition++)\n            {\n                for (int key = 0; key &lt; alphabet.Length; key++)\n                {\n                    if (messageAsChar[messagePosition] == alphabet[key])\n                    {\n                        if (key - rotation &gt;= 0)\n                        {\n                            decryption[messagePosition] = alphabet[key - rotation];\n                        }\n                        else if (key - rotation &lt; 0)\n                        {\n                            decryption[messagePosition] = alphabet[key - rotation + 26];\n                        }\n                    }\n                }\n            }\n\n            string finalMessage = new string(decryption);\n            return finalMessage;\n        }\n     }\n}\n</code></pre>\n"
      },
      "event_id": "$1649945607476YjaIy:matrix.workhardpgh.com",
      "origin_server_ts": 1649945607798,
      "unsigned": {
        "age": 270121286,
        "m.relations": {
          "m.replace": {
            "event_id": "$1649946788488AGdec:matrix.workhardpgh.com",
            "origin_server_ts": 1649946788865,
            "sender": "@jim_code:matrix.workhardpgh.com"
          }
        }
      },
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com"
    },
    {
      "type": "m.room.message",
      "sender": "@donna.san:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "Team 2:fixed encryption\nRich Stanley jallison Harrison (They / Them) \n```\nusing System;\n\nnamespace Caesar_Cipher\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Encoder\n            // Ask for the message\n            // Ask for the rotation\n            // show the encoded version\n\n            // Decoder\n            // ask for the encoded message\n            // ask for the rotation\n            // show the decoded version\n\n\n            bool on = true;\n            while (on)\n            {\n                Console.WriteLine(\"\\nDo you want to encrypt or decrypt a message?\");\n                Console.WriteLine(\"a)encrypt message \\nb)decrypt message \\nc)quit\");\n                string response = Console.ReadLine().ToLower();\n                if (response == \"a\")\n                {\n                    Console.WriteLine(\"\\nType a message to encrypt.\");\n                    string input = Console.ReadLine().ToLower();\n                    Console.WriteLine(\"What is the rotation?\");\n                    int rotation = Convert.ToInt32(Console.ReadLine());\n                    for (int i = 0; i < input.Length; i++)\n                    {\n                        Console.Write(cipher(input[i], rotation));\n                    }\n                }\n\n                else if (response == \"b\")\n                {\n                    Console.WriteLine(\"\\nType encrypted message.\");\n                    string input = Console.ReadLine().ToLower();\n                    Console.WriteLine(\"What is the rotation?\");\n                    int rotation = Convert.ToInt32(Console.ReadLine());\n                    for (int i = 0; i < input.Length; i++)\n                    {\n                        Console.Write(decipher(input[i], rotation));\n                    }\n                }\n                else if (response == \"c\")\n                {\n                    Console.WriteLine(\"Goodbye\");\n                    on = false;\n                }\n\n\n            }\n        }\n        public static char cipher(char input, int rotation)\n        {\n\n            char currentletter = 'a';\n            if (input == ' ')\n            {\n                currentletter = ' ';\n            }\n            else if ((int)input >= 123 - rotation)\n            {\n                currentletter = (char)(input - (26 - rotation));\n            }\n            else if ((int)input >= 97)\n            {\n                currentletter = (char)(input + rotation);\n            }\n            \n            return currentletter;\n        }\n        public static char decipher(char input, int rotation)\n        {\n            char currentletter = (char)(input - rotation);\n            if((int) currentletter < 97)\n            {\n                currentletter = (char)(input + 24);\n            }\n            return currentletter;\n\n        }\n    }\n\n}\n\n\n\n```",
            "mimetype": "text/plain"
          },
          {
            "body": "<p>Team 2:fixed encryption<br><a href=\"https://matrix.to/#/@richcstan:matrix.workhardpgh.com\">Rich Stanley</a> <a href=\"https://matrix.to/#/@jallison:matrix.workhardpgh.com\">jallison</a> <a href=\"https://matrix.to/#/@harrisonthurman:matrix.workhardpgh.com\">Harrison (They / Them)</a></p>\n<pre><code>using System;\n\nnamespace Caesar_Cipher\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Encoder\n            // Ask for the message\n            // Ask for the rotation\n            // show the encoded version\n\n            // Decoder\n            // ask for the encoded message\n            // ask for the rotation\n            // show the decoded version\n\n\n            bool on = true;\n            while (on)\n            {\n                Console.WriteLine(&quot;\\nDo you want to encrypt or decrypt a message?&quot;);\n                Console.WriteLine(&quot;a)encrypt message \\nb)decrypt message \\nc)quit&quot;);\n                string response = Console.ReadLine().ToLower();\n                if (response == &quot;a&quot;)\n                {\n                    Console.WriteLine(&quot;\\nType a message to encrypt.&quot;);\n                    string input = Console.ReadLine().ToLower();\n                    Console.WriteLine(&quot;What is the rotation?&quot;);\n                    int rotation = Convert.ToInt32(Console.ReadLine());\n                    for (int i = 0; i &lt; input.Length; i++)\n                    {\n                        Console.Write(cipher(input[i], rotation));\n                    }\n                }\n\n                else if (response == &quot;b&quot;)\n                {\n                    Console.WriteLine(&quot;\\nType encrypted message.&quot;);\n                    string input = Console.ReadLine().ToLower();\n                    Console.WriteLine(&quot;What is the rotation?&quot;);\n                    int rotation = Convert.ToInt32(Console.ReadLine());\n                    for (int i = 0; i &lt; input.Length; i++)\n                    {\n                        Console.Write(decipher(input[i], rotation));\n                    }\n                }\n                else if (response == &quot;c&quot;)\n                {\n                    Console.WriteLine(&quot;Goodbye&quot;);\n                    on = false;\n                }\n\n\n            }\n        }\n        public static char cipher(char input, int rotation)\n        {\n\n            char currentletter = 'a';\n            if (input == ' ')\n            {\n                currentletter = ' ';\n            }\n            else if ((int)input &gt;= 123 - rotation)\n            {\n                currentletter = (char)(input - (26 - rotation));\n            }\n            else if ((int)input &gt;= 97)\n            {\n                currentletter = (char)(input + rotation);\n            }\n            \n            return currentletter;\n        }\n        public static char decipher(char input, int rotation)\n        {\n            char currentletter = (char)(input - rotation);\n            if((int) currentletter &lt; 97)\n            {\n                currentletter = (char)(input + 24);\n            }\n            return currentletter;\n\n        }\n    }\n\n}\n\n\n\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "Team 2:fixed encryption\nRich Stanley jallison Harrison (They / Them) \n```\nusing System;\n\nnamespace Caesar_Cipher\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Encoder\n            // Ask for the message\n            // Ask for the rotation\n            // show the encoded version\n\n            // Decoder\n            // ask for the encoded message\n            // ask for the rotation\n            // show the decoded version\n\n\n            bool on = true;\n            while (on)\n            {\n                Console.WriteLine(\"\\nDo you want to encrypt or decrypt a message?\");\n                Console.WriteLine(\"a)encrypt message \\nb)decrypt message \\nc)quit\");\n                string response = Console.ReadLine().ToLower();\n                if (response == \"a\")\n                {\n                    Console.WriteLine(\"\\nType a message to encrypt.\");\n                    string input = Console.ReadLine().ToLower();\n                    Console.WriteLine(\"What is the rotation?\");\n                    int rotation = Convert.ToInt32(Console.ReadLine());\n                    for (int i = 0; i < input.Length; i++)\n                    {\n                        Console.Write(cipher(input[i], rotation));\n                    }\n                }\n\n                else if (response == \"b\")\n                {\n                    Console.WriteLine(\"\\nType encrypted message.\");\n                    string input = Console.ReadLine().ToLower();\n                    Console.WriteLine(\"What is the rotation?\");\n                    int rotation = Convert.ToInt32(Console.ReadLine());\n                    for (int i = 0; i < input.Length; i++)\n                    {\n                        Console.Write(decipher(input[i], rotation));\n                    }\n                }\n                else if (response == \"c\")\n                {\n                    Console.WriteLine(\"Goodbye\");\n                    on = false;\n                }\n\n\n            }\n        }\n        public static char cipher(char input, int rotation)\n        {\n\n            char currentletter = 'a';\n            if (input == ' ')\n            {\n                currentletter = ' ';\n            }\n            else if ((int)input >= 123 - rotation)\n            {\n                currentletter = (char)(input - (26 - rotation));\n            }\n            else if ((int)input >= 97)\n            {\n                currentletter = (char)(input + rotation);\n            }\n            \n            return currentletter;\n        }\n        public static char decipher(char input, int rotation)\n        {\n            char currentletter = (char)(input - rotation);\n            if((int) currentletter < 97)\n            {\n                currentletter = (char)(input + 24);\n            }\n            return currentletter;\n\n        }\n    }\n\n}\n\n\n\n```",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Team 2:fixed encryption<br><a href=\"https://matrix.to/#/@richcstan:matrix.workhardpgh.com\">Rich Stanley</a> <a href=\"https://matrix.to/#/@jallison:matrix.workhardpgh.com\">jallison</a> <a href=\"https://matrix.to/#/@harrisonthurman:matrix.workhardpgh.com\">Harrison (They / Them)</a></p>\n<pre><code>using System;\n\nnamespace Caesar_Cipher\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Encoder\n            // Ask for the message\n            // Ask for the rotation\n            // show the encoded version\n\n            // Decoder\n            // ask for the encoded message\n            // ask for the rotation\n            // show the decoded version\n\n\n            bool on = true;\n            while (on)\n            {\n                Console.WriteLine(&quot;\\nDo you want to encrypt or decrypt a message?&quot;);\n                Console.WriteLine(&quot;a)encrypt message \\nb)decrypt message \\nc)quit&quot;);\n                string response = Console.ReadLine().ToLower();\n                if (response == &quot;a&quot;)\n                {\n                    Console.WriteLine(&quot;\\nType a message to encrypt.&quot;);\n                    string input = Console.ReadLine().ToLower();\n                    Console.WriteLine(&quot;What is the rotation?&quot;);\n                    int rotation = Convert.ToInt32(Console.ReadLine());\n                    for (int i = 0; i &lt; input.Length; i++)\n                    {\n                        Console.Write(cipher(input[i], rotation));\n                    }\n                }\n\n                else if (response == &quot;b&quot;)\n                {\n                    Console.WriteLine(&quot;\\nType encrypted message.&quot;);\n                    string input = Console.ReadLine().ToLower();\n                    Console.WriteLine(&quot;What is the rotation?&quot;);\n                    int rotation = Convert.ToInt32(Console.ReadLine());\n                    for (int i = 0; i &lt; input.Length; i++)\n                    {\n                        Console.Write(decipher(input[i], rotation));\n                    }\n                }\n                else if (response == &quot;c&quot;)\n                {\n                    Console.WriteLine(&quot;Goodbye&quot;);\n                    on = false;\n                }\n\n\n            }\n        }\n        public static char cipher(char input, int rotation)\n        {\n\n            char currentletter = 'a';\n            if (input == ' ')\n            {\n                currentletter = ' ';\n            }\n            else if ((int)input &gt;= 123 - rotation)\n            {\n                currentletter = (char)(input - (26 - rotation));\n            }\n            else if ((int)input &gt;= 97)\n            {\n                currentletter = (char)(input + rotation);\n            }\n            \n            return currentletter;\n        }\n        public static char decipher(char input, int rotation)\n        {\n            char currentletter = (char)(input - rotation);\n            if((int) currentletter &lt; 97)\n            {\n                currentletter = (char)(input + 24);\n            }\n            return currentletter;\n\n        }\n    }\n\n}\n\n\n\n</code></pre>\n"
      },
      "event_id": "$1649946317483jaZZX:matrix.workhardpgh.com",
      "origin_server_ts": 1649946317119,
      "unsigned": {
        "age": 269411965
      },
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com"
    },
    {
      "type": "m.room.message",
      "sender": "@spensermg:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "imaniemanuel: Tobias Tobak (he/him) Jessica Yockey \n```csharp\nusing System;\n\nnamespace Decoder_Rings\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n\n            // Ovaltine\n            // JGNNQ BQQ\n            // 2\n            // HELLO ZOO\n\n            // ASCII or array storing the letters of the alphabet\n            // If array: breakdown each character into a corresponding number 'a=1' 'b=2' 'c=3'\n            // Apply the shift to the number, and then switch back to the letter\n            // If ASCII: apply the change to the ASCII number. no need to have several arrays\n            // How to change to ASCII = (int)'a'\n\n            // either: solve one character at a time\n            // or make an array of every single letter's ASCII number\n            // Ask for encoding or decoding, put the if statements for encode or decode within the loop\n            // Encoder\n            // Ask for the message\n\n            // have the loop end once it reaches the end of the message. for loop?\n            // show the encoded message to the user\n            // Decoder\n            // ask for the encoded message\n            // ask for the rotation\n            // show the decoded version\n            string response = \"\";\n            while (response != \"q\")\n            {\n            \n            Console.WriteLine(\"Welcome to the encoder ring, would you like to encode or decode? \\n Type E to encode, D to decode, or Q to quit.\");\n            response = Console.ReadLine().ToLower();\n                //if (response != \"e\" || response != \"d\" || response != \"q\")\n                //{\n                //    Console.WriteLine(\"Please try again.\");\n                //}\n\n            Console.WriteLine(\"Drink more ovaltine. \\n What is the message you would like to encode or decode?\");\n            string message = Console.ReadLine().ToLower();\n\n            // Ask for the rotation (or how many spaces the letter will change by)\n            Console.WriteLine(\"How many characters are you shifting by?\");\n            int rotation = Convert.ToInt32(Console.ReadLine());\n           \n            // create a loop that will change each letter by the number of spaces (rotation)\n            for(int i = 0; i < message.Length; i = i + 1)\n            {\n                char thisletter = message[i];\n                int letterNum = (int)thisletter;\n\n                string encodedLetter = \"\";\n                int encodedNum = 0;\n\n                    if (thisletter == ' ')\n                    {\n                        encodedLetter = \" \";\n                    }\n                    else\n                    {\n                        if (response == \"e\")\n                        {\n                            encodedNum = letterNum + rotation;\n                            if (encodedNum > 122)\n                            {\n                                encodedNum = encodedNum - 26;\n                            }\n                        }\n                        if (response == \"d\")\n                        {\n                            encodedNum = letterNum - rotation;\n                            if (encodedNum < 97)\n                            {\n                                encodedNum = encodedNum + 26;\n                            }\n                        }\n                        encodedLetter = Convert.ToString((char)encodedNum);\n                        Console.Write(encodedLetter);\n                    }\n                }               \n            }\n        }\n    }\n}\n```",
            "mimetype": "text/plain"
          },
          {
            "body": "<p><a href=\"https://matrix.to/#/@imaniemanuel:matrix.workhardpgh.com\">imaniemanuel</a>: <a href=\"https://matrix.to/#/@tobiasfunction:matrix.workhardpgh.com\">Tobias Tobak (he/him)</a> <a href=\"https://matrix.to/#/@yockeyjessica:matrix.workhardpgh.com\">Jessica Yockey</a></p>\n<pre><code class=\"language-csharp\">using System;\n\nnamespace Decoder_Rings\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n\n            // Ovaltine\n            // JGNNQ BQQ\n            // 2\n            // HELLO ZOO\n\n            // ASCII or array storing the letters of the alphabet\n            // If array: breakdown each character into a corresponding number 'a=1' 'b=2' 'c=3'\n            // Apply the shift to the number, and then switch back to the letter\n            // If ASCII: apply the change to the ASCII number. no need to have several arrays\n            // How to change to ASCII = (int)'a'\n\n            // either: solve one character at a time\n            // or make an array of every single letter's ASCII number\n            // Ask for encoding or decoding, put the if statements for encode or decode within the loop\n            // Encoder\n            // Ask for the message\n\n            // have the loop end once it reaches the end of the message. for loop?\n            // show the encoded message to the user\n            // Decoder\n            // ask for the encoded message\n            // ask for the rotation\n            // show the decoded version\n            string response = &quot;&quot;;\n            while (response != &quot;q&quot;)\n            {\n            \n            Console.WriteLine(&quot;Welcome to the encoder ring, would you like to encode or decode? \\n Type E to encode, D to decode, or Q to quit.&quot;);\n            response = Console.ReadLine().ToLower();\n                //if (response != &quot;e&quot; || response != &quot;d&quot; || response != &quot;q&quot;)\n                //{\n                //    Console.WriteLine(&quot;Please try again.&quot;);\n                //}\n\n            Console.WriteLine(&quot;Drink more ovaltine. \\n What is the message you would like to encode or decode?&quot;);\n            string message = Console.ReadLine().ToLower();\n\n            // Ask for the rotation (or how many spaces the letter will change by)\n            Console.WriteLine(&quot;How many characters are you shifting by?&quot;);\n            int rotation = Convert.ToInt32(Console.ReadLine());\n           \n            // create a loop that will change each letter by the number of spaces (rotation)\n            for(int i = 0; i &lt; message.Length; i = i + 1)\n            {\n                char thisletter = message[i];\n                int letterNum = (int)thisletter;\n\n                string encodedLetter = &quot;&quot;;\n                int encodedNum = 0;\n\n                    if (thisletter == ' ')\n                    {\n                        encodedLetter = &quot; &quot;;\n                    }\n                    else\n                    {\n                        if (response == &quot;e&quot;)\n                        {\n                            encodedNum = letterNum + rotation;\n                            if (encodedNum &gt; 122)\n                            {\n                                encodedNum = encodedNum - 26;\n                            }\n                        }\n                        if (response == &quot;d&quot;)\n                        {\n                            encodedNum = letterNum - rotation;\n                            if (encodedNum &lt; 97)\n                            {\n                                encodedNum = encodedNum + 26;\n                            }\n                        }\n                        encodedLetter = Convert.ToString((char)encodedNum);\n                        Console.Write(encodedLetter);\n                    }\n                }               \n            }\n        }\n    }\n}\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "imaniemanuel: Tobias Tobak (he/him) Jessica Yockey \n```csharp\nusing System;\n\nnamespace Decoder_Rings\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n\n            // Ovaltine\n            // JGNNQ BQQ\n            // 2\n            // HELLO ZOO\n\n            // ASCII or array storing the letters of the alphabet\n            // If array: breakdown each character into a corresponding number 'a=1' 'b=2' 'c=3'\n            // Apply the shift to the number, and then switch back to the letter\n            // If ASCII: apply the change to the ASCII number. no need to have several arrays\n            // How to change to ASCII = (int)'a'\n\n            // either: solve one character at a time\n            // or make an array of every single letter's ASCII number\n            // Ask for encoding or decoding, put the if statements for encode or decode within the loop\n            // Encoder\n            // Ask for the message\n\n            // have the loop end once it reaches the end of the message. for loop?\n            // show the encoded message to the user\n            // Decoder\n            // ask for the encoded message\n            // ask for the rotation\n            // show the decoded version\n            string response = \"\";\n            while (response != \"q\")\n            {\n            \n            Console.WriteLine(\"Welcome to the encoder ring, would you like to encode or decode? \\n Type E to encode, D to decode, or Q to quit.\");\n            response = Console.ReadLine().ToLower();\n                //if (response != \"e\" || response != \"d\" || response != \"q\")\n                //{\n                //    Console.WriteLine(\"Please try again.\");\n                //}\n\n            Console.WriteLine(\"Drink more ovaltine. \\n What is the message you would like to encode or decode?\");\n            string message = Console.ReadLine().ToLower();\n\n            // Ask for the rotation (or how many spaces the letter will change by)\n            Console.WriteLine(\"How many characters are you shifting by?\");\n            int rotation = Convert.ToInt32(Console.ReadLine());\n           \n            // create a loop that will change each letter by the number of spaces (rotation)\n            for(int i = 0; i < message.Length; i = i + 1)\n            {\n                char thisletter = message[i];\n                int letterNum = (int)thisletter;\n\n                string encodedLetter = \"\";\n                int encodedNum = 0;\n\n                    if (thisletter == ' ')\n                    {\n                        encodedLetter = \" \";\n                    }\n                    else\n                    {\n                        if (response == \"e\")\n                        {\n                            encodedNum = letterNum + rotation;\n                            if (encodedNum > 122)\n                            {\n                                encodedNum = encodedNum - 26;\n                            }\n                        }\n                        if (response == \"d\")\n                        {\n                            encodedNum = letterNum - rotation;\n                            if (encodedNum < 97)\n                            {\n                                encodedNum = encodedNum + 26;\n                            }\n                        }\n                        encodedLetter = Convert.ToString((char)encodedNum);\n                        Console.Write(encodedLetter);\n                    }\n                }               \n            }\n        }\n    }\n}\n```",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p><a href=\"https://matrix.to/#/@imaniemanuel:matrix.workhardpgh.com\">imaniemanuel</a>: <a href=\"https://matrix.to/#/@tobiasfunction:matrix.workhardpgh.com\">Tobias Tobak (he/him)</a> <a href=\"https://matrix.to/#/@yockeyjessica:matrix.workhardpgh.com\">Jessica Yockey</a></p>\n<pre><code class=\"language-csharp\">using System;\n\nnamespace Decoder_Rings\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n\n            // Ovaltine\n            // JGNNQ BQQ\n            // 2\n            // HELLO ZOO\n\n            // ASCII or array storing the letters of the alphabet\n            // If array: breakdown each character into a corresponding number 'a=1' 'b=2' 'c=3'\n            // Apply the shift to the number, and then switch back to the letter\n            // If ASCII: apply the change to the ASCII number. no need to have several arrays\n            // How to change to ASCII = (int)'a'\n\n            // either: solve one character at a time\n            // or make an array of every single letter's ASCII number\n            // Ask for encoding or decoding, put the if statements for encode or decode within the loop\n            // Encoder\n            // Ask for the message\n\n            // have the loop end once it reaches the end of the message. for loop?\n            // show the encoded message to the user\n            // Decoder\n            // ask for the encoded message\n            // ask for the rotation\n            // show the decoded version\n            string response = &quot;&quot;;\n            while (response != &quot;q&quot;)\n            {\n            \n            Console.WriteLine(&quot;Welcome to the encoder ring, would you like to encode or decode? \\n Type E to encode, D to decode, or Q to quit.&quot;);\n            response = Console.ReadLine().ToLower();\n                //if (response != &quot;e&quot; || response != &quot;d&quot; || response != &quot;q&quot;)\n                //{\n                //    Console.WriteLine(&quot;Please try again.&quot;);\n                //}\n\n            Console.WriteLine(&quot;Drink more ovaltine. \\n What is the message you would like to encode or decode?&quot;);\n            string message = Console.ReadLine().ToLower();\n\n            // Ask for the rotation (or how many spaces the letter will change by)\n            Console.WriteLine(&quot;How many characters are you shifting by?&quot;);\n            int rotation = Convert.ToInt32(Console.ReadLine());\n           \n            // create a loop that will change each letter by the number of spaces (rotation)\n            for(int i = 0; i &lt; message.Length; i = i + 1)\n            {\n                char thisletter = message[i];\n                int letterNum = (int)thisletter;\n\n                string encodedLetter = &quot;&quot;;\n                int encodedNum = 0;\n\n                    if (thisletter == ' ')\n                    {\n                        encodedLetter = &quot; &quot;;\n                    }\n                    else\n                    {\n                        if (response == &quot;e&quot;)\n                        {\n                            encodedNum = letterNum + rotation;\n                            if (encodedNum &gt; 122)\n                            {\n                                encodedNum = encodedNum - 26;\n                            }\n                        }\n                        if (response == &quot;d&quot;)\n                        {\n                            encodedNum = letterNum - rotation;\n                            if (encodedNum &lt; 97)\n                            {\n                                encodedNum = encodedNum + 26;\n                            }\n                        }\n                        encodedLetter = Convert.ToString((char)encodedNum);\n                        Console.Write(encodedLetter);\n                    }\n                }               \n            }\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$1649946596485TlVmd:matrix.workhardpgh.com",
      "origin_server_ts": 1649946596689,
      "unsigned": {
        "age": 269132395
      },
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com"
    },
    {
      "type": "m.room.message",
      "sender": "@joewalker147:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "current functional mad libs\n\n```\nusing System;\n\nnamespace MadLibs_Project\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Mad Libs Project\n            //================\n            //question and concerns and CHALLeemgESs\n            //how do we handled multiple nouns,blanks, etc and place them in the correct spots\n            //setting specific variables for specific spots\n            //editing the story issues\n            //chronological order/in order??\n            //user --> 10 year old playing the game\n            //multiple prompts (user made prompt??)\n            //simple prompt -->> build out --->> SAD LIBS\n            //I went to the {{noun}} store and bought a {{adjective}} {{noun}}\n\n            //======== process ==========\n            //ask user for inputs\n            //variety of inputs (nouns,adjects,etc)\n            //store inputs\n            // store multiple inputs \n            //handle inputs - replace {input spaces} in prompt with {user inputs}\n            //place inputs into story\n            //print out completed story with {user inputs}\n\n            //===stretch goals===\n            //loop the mad lib\n            //storing multiple prompts\n            //place same inputs into multiple prompts\n\n            Console.WriteLine(\"Welcome to Mad Libs, bucko\");\n            string[] partsofSpeech = { \"noun\", \"verb\", \"adjective\" };\n            Word[] words = new Word[partsofSpeech.Length];\n            for (int i = 0; i < words.Length; i++)\n            {\n                words[i] = new Word();\n                words[i].PartOfSpeech = partsofSpeech[i];\n            }\n\n            for (int i = 0; i < words.Length; i++)\n            {\n                string tempPartOfSpeech = words[i].PartOfSpeech;\n                Console.WriteLine(\"Give me a \" + tempPartOfSpeech);\n                string input = Console.ReadLine();\n                words[i].UserInput = input;\n               \n            }\n            Console.WriteLine($\"{words[0].UserInput} is {words[1].UserInput}ing at the {words[2].UserInput} place\");\n\n        }\n    }\n\n    class Word\n    {\n        public string PartOfSpeech; //nouns, verbs, adjs, etc\n        public string UserInput;\n\n    }\n}\n```\n\nYemi Truechild (she/her) Tobias Tobak (he/him) Spenser Greeley ",
            "mimetype": "text/plain"
          },
          {
            "body": "<p>current functional mad libs</p>\n<pre><code>using System;\n\nnamespace MadLibs_Project\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Mad Libs Project\n            //================\n            //question and concerns and CHALLeemgESs\n            //how do we handled multiple nouns,blanks, etc and place them in the correct spots\n            //setting specific variables for specific spots\n            //editing the story issues\n            //chronological order/in order??\n            //user --&gt; 10 year old playing the game\n            //multiple prompts (user made prompt??)\n            //simple prompt --&gt;&gt; build out ---&gt;&gt; SAD LIBS\n            //I went to the {{noun}} store and bought a {{adjective}} {{noun}}\n\n            //======== process ==========\n            //ask user for inputs\n            //variety of inputs (nouns,adjects,etc)\n            //store inputs\n            // store multiple inputs \n            //handle inputs - replace {input spaces} in prompt with {user inputs}\n            //place inputs into story\n            //print out completed story with {user inputs}\n\n            //===stretch goals===\n            //loop the mad lib\n            //storing multiple prompts\n            //place same inputs into multiple prompts\n\n            Console.WriteLine(&quot;Welcome to Mad Libs, bucko&quot;);\n            string[] partsofSpeech = { &quot;noun&quot;, &quot;verb&quot;, &quot;adjective&quot; };\n            Word[] words = new Word[partsofSpeech.Length];\n            for (int i = 0; i &lt; words.Length; i++)\n            {\n                words[i] = new Word();\n                words[i].PartOfSpeech = partsofSpeech[i];\n            }\n\n            for (int i = 0; i &lt; words.Length; i++)\n            {\n                string tempPartOfSpeech = words[i].PartOfSpeech;\n                Console.WriteLine(&quot;Give me a &quot; + tempPartOfSpeech);\n                string input = Console.ReadLine();\n                words[i].UserInput = input;\n               \n            }\n            Console.WriteLine($&quot;{words[0].UserInput} is {words[1].UserInput}ing at the {words[2].UserInput} place&quot;);\n\n        }\n    }\n\n    class Word\n    {\n        public string PartOfSpeech; //nouns, verbs, adjs, etc\n        public string UserInput;\n\n    }\n}\n</code></pre>\n<p><a href=\"https://matrix.to/#/@onoyemi:matrix.workhardpgh.com\">Yemi Truechild (she/her)</a> <a href=\"https://matrix.to/#/@tobiasfunction:matrix.workhardpgh.com\">Tobias Tobak (he/him)</a> <a href=\"https://matrix.to/#/@spensermg:matrix.workhardpgh.com\">Spenser Greeley</a></p>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "current functional mad libs\n\n```\nusing System;\n\nnamespace MadLibs_Project\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Mad Libs Project\n            //================\n            //question and concerns and CHALLeemgESs\n            //how do we handled multiple nouns,blanks, etc and place them in the correct spots\n            //setting specific variables for specific spots\n            //editing the story issues\n            //chronological order/in order??\n            //user --> 10 year old playing the game\n            //multiple prompts (user made prompt??)\n            //simple prompt -->> build out --->> SAD LIBS\n            //I went to the {{noun}} store and bought a {{adjective}} {{noun}}\n\n            //======== process ==========\n            //ask user for inputs\n            //variety of inputs (nouns,adjects,etc)\n            //store inputs\n            // store multiple inputs \n            //handle inputs - replace {input spaces} in prompt with {user inputs}\n            //place inputs into story\n            //print out completed story with {user inputs}\n\n            //===stretch goals===\n            //loop the mad lib\n            //storing multiple prompts\n            //place same inputs into multiple prompts\n\n            Console.WriteLine(\"Welcome to Mad Libs, bucko\");\n            string[] partsofSpeech = { \"noun\", \"verb\", \"adjective\" };\n            Word[] words = new Word[partsofSpeech.Length];\n            for (int i = 0; i < words.Length; i++)\n            {\n                words[i] = new Word();\n                words[i].PartOfSpeech = partsofSpeech[i];\n            }\n\n            for (int i = 0; i < words.Length; i++)\n            {\n                string tempPartOfSpeech = words[i].PartOfSpeech;\n                Console.WriteLine(\"Give me a \" + tempPartOfSpeech);\n                string input = Console.ReadLine();\n                words[i].UserInput = input;\n               \n            }\n            Console.WriteLine($\"{words[0].UserInput} is {words[1].UserInput}ing at the {words[2].UserInput} place\");\n\n        }\n    }\n\n    class Word\n    {\n        public string PartOfSpeech; //nouns, verbs, adjs, etc\n        public string UserInput;\n\n    }\n}\n```\n\nYemi Truechild (she/her) Tobias Tobak (he/him) Spenser Greeley ",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>current functional mad libs</p>\n<pre><code>using System;\n\nnamespace MadLibs_Project\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Mad Libs Project\n            //================\n            //question and concerns and CHALLeemgESs\n            //how do we handled multiple nouns,blanks, etc and place them in the correct spots\n            //setting specific variables for specific spots\n            //editing the story issues\n            //chronological order/in order??\n            //user --&gt; 10 year old playing the game\n            //multiple prompts (user made prompt??)\n            //simple prompt --&gt;&gt; build out ---&gt;&gt; SAD LIBS\n            //I went to the {{noun}} store and bought a {{adjective}} {{noun}}\n\n            //======== process ==========\n            //ask user for inputs\n            //variety of inputs (nouns,adjects,etc)\n            //store inputs\n            // store multiple inputs \n            //handle inputs - replace {input spaces} in prompt with {user inputs}\n            //place inputs into story\n            //print out completed story with {user inputs}\n\n            //===stretch goals===\n            //loop the mad lib\n            //storing multiple prompts\n            //place same inputs into multiple prompts\n\n            Console.WriteLine(&quot;Welcome to Mad Libs, bucko&quot;);\n            string[] partsofSpeech = { &quot;noun&quot;, &quot;verb&quot;, &quot;adjective&quot; };\n            Word[] words = new Word[partsofSpeech.Length];\n            for (int i = 0; i &lt; words.Length; i++)\n            {\n                words[i] = new Word();\n                words[i].PartOfSpeech = partsofSpeech[i];\n            }\n\n            for (int i = 0; i &lt; words.Length; i++)\n            {\n                string tempPartOfSpeech = words[i].PartOfSpeech;\n                Console.WriteLine(&quot;Give me a &quot; + tempPartOfSpeech);\n                string input = Console.ReadLine();\n                words[i].UserInput = input;\n               \n            }\n            Console.WriteLine($&quot;{words[0].UserInput} is {words[1].UserInput}ing at the {words[2].UserInput} place&quot;);\n\n        }\n    }\n\n    class Word\n    {\n        public string PartOfSpeech; //nouns, verbs, adjs, etc\n        public string UserInput;\n\n    }\n}\n</code></pre>\n<p><a href=\"https://matrix.to/#/@onoyemi:matrix.workhardpgh.com\">Yemi Truechild (she/her)</a> <a href=\"https://matrix.to/#/@tobiasfunction:matrix.workhardpgh.com\">Tobias Tobak (he/him)</a> <a href=\"https://matrix.to/#/@spensermg:matrix.workhardpgh.com\">Spenser Greeley</a></p>\n"
      },
      "event_id": "$1649957460511bGvYu:matrix.workhardpgh.com",
      "origin_server_ts": 1649957460845,
      "unsigned": {
        "age": 258268239,
        "m.relations": {
          "m.replace": {
            "event_id": "$1649957500512bSvAd:matrix.workhardpgh.com",
            "origin_server_ts": 1649957500634,
            "sender": "@joewalker147:matrix.workhardpgh.com"
          }
        }
      },
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com"
    },
    {
      "type": "m.room.message",
      "sender": "@taslater:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "Regex 4 LYFE\n\n```csharp\nusing System;\nusing System.Text.RegularExpressions;\n\nnamespace MadlibRegex\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // MadLib template string\n            string madlibTemplate = \"[Author] wrote my favorite book [book] and sometimes I [verb] the pages [adverb].\";\n\n            // tell the user what we're doing\n            Console.WriteLine(\"Let's do a madlib! What could possibly go wrong?!\\n\");\n\n            // === REGEX EXPLAINED: ===\n            //        @\"\\[.*?\\]\"\n            // @ before string creates a verbatim string\n            // verbatim strings let us write strings without extra escapes (backslashes)\n            //\n            // --- 3 Pieces of the Regex ---\n            //           \\[.*?\\]\n            //\n            //              \\[\n            // A literal character that matches an open bracket \"[\",\n            // escaped by backslash.\n            // Some special characters need to be escaped because otherwise\n            // they have special meaning in Regex\n            //\n            //             .*?\n            // These three characters work together.\n            // The dot (.) matches any one character at all.\n            // The star (*) quantifies 0 or more repetitions of the dot (.)\n            // That is, match 0 or more of any character.\n            // The question mark (?) is greedy. It stops matching early.\n            // Without the question mark, regex would just keep matching until\n            // it found the very last close bracket (]).\n            //\n            // -- Putting these pieces together --\n            //\n            //              \\]\n            // A literal character that matches an open bracket \"]\",\n            // escaped by backslash.\n\n            // iterate through the matches\n            foreach (Match m in Regex.Matches(madlibTemplate, @\"\\[.*?\\]\"))\n            // Regex.Matches returns MatchCollection object that we iterate over\n            {\n                // get the string that was matched\n                // Match objects have property \"Value\" (m.Value)\n                // that stores the part of the string that matches\n                // ie. \"[Author]\"\n                string matchValue = m.Value;\n                // chop off the brackets at beginning and end\n                // ie. \"Author\"\n                string matchPhrase = matchValue[1..^1];\n                // ask for input\n                Console.WriteLine($\"Please enter a {matchPhrase}:\");\n                // store input to replace the stuff in brackets\n                // __replaceWith__ is what we want to add to the template\n                string replaceWith = Console.ReadLine();\n                // make a fancy Regex object from the stuff in brackets that we matched\n                // it's the same as __matchValue__ just nicely escaped\n                // __replaceMe__ is what we want to replace\n                Regex replaceMe = new Regex(Regex.Escape(matchValue));\n                // replace the bracket stuff with the user input __replaceWith__\n                // the \"1\" tells Replace to only replace the first matching instance\n                // ie. don't replace every \"[noun]\" in template\n                madlibTemplate = replaceMe.Replace(madlibTemplate, replaceWith, 1);\n            }\n\n            // show the user what they wrote\n            Console.WriteLine($\"\\nHere it is, you sick sunuvagun:\\n{madlibTemplate}\");\n        }\n    }\n}\n\n```",
            "mimetype": "text/plain"
          },
          {
            "body": "<p>Regex 4 LYFE</p>\n<pre><code class=\"language-csharp\">using System;\nusing System.Text.RegularExpressions;\n\nnamespace MadlibRegex\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // MadLib template string\n            string madlibTemplate = &quot;[Author] wrote my favorite book [book] and sometimes I [verb] the pages [adverb].&quot;;\n\n            // tell the user what we're doing\n            Console.WriteLine(&quot;Let's do a madlib! What could possibly go wrong?!\\n&quot;);\n\n            // === REGEX EXPLAINED: ===\n            //        @&quot;\\[.*?\\]&quot;\n            // @ before string creates a verbatim string\n            // verbatim strings let us write strings without extra escapes (backslashes)\n            //\n            // --- 3 Pieces of the Regex ---\n            //           \\[.*?\\]\n            //\n            //              \\[\n            // A literal character that matches an open bracket &quot;[&quot;,\n            // escaped by backslash.\n            // Some special characters need to be escaped because otherwise\n            // they have special meaning in Regex\n            //\n            //             .*?\n            // These three characters work together.\n            // The dot (.) matches any one character at all.\n            // The star (*) quantifies 0 or more repetitions of the dot (.)\n            // That is, match 0 or more of any character.\n            // The question mark (?) is greedy. It stops matching early.\n            // Without the question mark, regex would just keep matching until\n            // it found the very last close bracket (]).\n            //\n            // -- Putting these pieces together --\n            //\n            //              \\]\n            // A literal character that matches an open bracket &quot;]&quot;,\n            // escaped by backslash.\n\n            // iterate through the matches\n            foreach (Match m in Regex.Matches(madlibTemplate, @&quot;\\[.*?\\]&quot;))\n            // Regex.Matches returns MatchCollection object that we iterate over\n            {\n                // get the string that was matched\n                // Match objects have property &quot;Value&quot; (m.Value)\n                // that stores the part of the string that matches\n                // ie. &quot;[Author]&quot;\n                string matchValue = m.Value;\n                // chop off the brackets at beginning and end\n                // ie. &quot;Author&quot;\n                string matchPhrase = matchValue[1..^1];\n                // ask for input\n                Console.WriteLine($&quot;Please enter a {matchPhrase}:&quot;);\n                // store input to replace the stuff in brackets\n                // __replaceWith__ is what we want to add to the template\n                string replaceWith = Console.ReadLine();\n                // make a fancy Regex object from the stuff in brackets that we matched\n                // it's the same as __matchValue__ just nicely escaped\n                // __replaceMe__ is what we want to replace\n                Regex replaceMe = new Regex(Regex.Escape(matchValue));\n                // replace the bracket stuff with the user input __replaceWith__\n                // the &quot;1&quot; tells Replace to only replace the first matching instance\n                // ie. don't replace every &quot;[noun]&quot; in template\n                madlibTemplate = replaceMe.Replace(madlibTemplate, replaceWith, 1);\n            }\n\n            // show the user what they wrote\n            Console.WriteLine($&quot;\\nHere it is, you sick sunuvagun:\\n{madlibTemplate}&quot;);\n        }\n    }\n}\n\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "Regex 4 LYFE\n\n```csharp\nusing System;\nusing System.Text.RegularExpressions;\n\nnamespace MadlibRegex\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // MadLib template string\n            string madlibTemplate = \"[Author] wrote my favorite book [book] and sometimes I [verb] the pages [adverb].\";\n\n            // tell the user what we're doing\n            Console.WriteLine(\"Let's do a madlib! What could possibly go wrong?!\\n\");\n\n            // === REGEX EXPLAINED: ===\n            //        @\"\\[.*?\\]\"\n            // @ before string creates a verbatim string\n            // verbatim strings let us write strings without extra escapes (backslashes)\n            //\n            // --- 3 Pieces of the Regex ---\n            //           \\[.*?\\]\n            //\n            //              \\[\n            // A literal character that matches an open bracket \"[\",\n            // escaped by backslash.\n            // Some special characters need to be escaped because otherwise\n            // they have special meaning in Regex\n            //\n            //             .*?\n            // These three characters work together.\n            // The dot (.) matches any one character at all.\n            // The star (*) quantifies 0 or more repetitions of the dot (.)\n            // That is, match 0 or more of any character.\n            // The question mark (?) is greedy. It stops matching early.\n            // Without the question mark, regex would just keep matching until\n            // it found the very last close bracket (]).\n            //\n            // -- Putting these pieces together --\n            //\n            //              \\]\n            // A literal character that matches an open bracket \"]\",\n            // escaped by backslash.\n\n            // iterate through the matches\n            foreach (Match m in Regex.Matches(madlibTemplate, @\"\\[.*?\\]\"))\n            // Regex.Matches returns MatchCollection object that we iterate over\n            {\n                // get the string that was matched\n                // Match objects have property \"Value\" (m.Value)\n                // that stores the part of the string that matches\n                // ie. \"[Author]\"\n                string matchValue = m.Value;\n                // chop off the brackets at beginning and end\n                // ie. \"Author\"\n                string matchPhrase = matchValue[1..^1];\n                // ask for input\n                Console.WriteLine($\"Please enter a {matchPhrase}:\");\n                // store input to replace the stuff in brackets\n                // __replaceWith__ is what we want to add to the template\n                string replaceWith = Console.ReadLine();\n                // make a fancy Regex object from the stuff in brackets that we matched\n                // it's the same as __matchValue__ just nicely escaped\n                // __replaceMe__ is what we want to replace\n                Regex replaceMe = new Regex(Regex.Escape(matchValue));\n                // replace the bracket stuff with the user input __replaceWith__\n                // the \"1\" tells Replace to only replace the first matching instance\n                // ie. don't replace every \"[noun]\" in template\n                madlibTemplate = replaceMe.Replace(madlibTemplate, replaceWith, 1);\n            }\n\n            // show the user what they wrote\n            Console.WriteLine($\"\\nHere it is, you sick sunuvagun:\\n{madlibTemplate}\");\n        }\n    }\n}\n\n```",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Regex 4 LYFE</p>\n<pre><code class=\"language-csharp\">using System;\nusing System.Text.RegularExpressions;\n\nnamespace MadlibRegex\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // MadLib template string\n            string madlibTemplate = &quot;[Author] wrote my favorite book [book] and sometimes I [verb] the pages [adverb].&quot;;\n\n            // tell the user what we're doing\n            Console.WriteLine(&quot;Let's do a madlib! What could possibly go wrong?!\\n&quot;);\n\n            // === REGEX EXPLAINED: ===\n            //        @&quot;\\[.*?\\]&quot;\n            // @ before string creates a verbatim string\n            // verbatim strings let us write strings without extra escapes (backslashes)\n            //\n            // --- 3 Pieces of the Regex ---\n            //           \\[.*?\\]\n            //\n            //              \\[\n            // A literal character that matches an open bracket &quot;[&quot;,\n            // escaped by backslash.\n            // Some special characters need to be escaped because otherwise\n            // they have special meaning in Regex\n            //\n            //             .*?\n            // These three characters work together.\n            // The dot (.) matches any one character at all.\n            // The star (*) quantifies 0 or more repetitions of the dot (.)\n            // That is, match 0 or more of any character.\n            // The question mark (?) is greedy. It stops matching early.\n            // Without the question mark, regex would just keep matching until\n            // it found the very last close bracket (]).\n            //\n            // -- Putting these pieces together --\n            //\n            //              \\]\n            // A literal character that matches an open bracket &quot;]&quot;,\n            // escaped by backslash.\n\n            // iterate through the matches\n            foreach (Match m in Regex.Matches(madlibTemplate, @&quot;\\[.*?\\]&quot;))\n            // Regex.Matches returns MatchCollection object that we iterate over\n            {\n                // get the string that was matched\n                // Match objects have property &quot;Value&quot; (m.Value)\n                // that stores the part of the string that matches\n                // ie. &quot;[Author]&quot;\n                string matchValue = m.Value;\n                // chop off the brackets at beginning and end\n                // ie. &quot;Author&quot;\n                string matchPhrase = matchValue[1..^1];\n                // ask for input\n                Console.WriteLine($&quot;Please enter a {matchPhrase}:&quot;);\n                // store input to replace the stuff in brackets\n                // __replaceWith__ is what we want to add to the template\n                string replaceWith = Console.ReadLine();\n                // make a fancy Regex object from the stuff in brackets that we matched\n                // it's the same as __matchValue__ just nicely escaped\n                // __replaceMe__ is what we want to replace\n                Regex replaceMe = new Regex(Regex.Escape(matchValue));\n                // replace the bracket stuff with the user input __replaceWith__\n                // the &quot;1&quot; tells Replace to only replace the first matching instance\n                // ie. don't replace every &quot;[noun]&quot; in template\n                madlibTemplate = replaceMe.Replace(madlibTemplate, replaceWith, 1);\n            }\n\n            // show the user what they wrote\n            Console.WriteLine($&quot;\\nHere it is, you sick sunuvagun:\\n{madlibTemplate}&quot;);\n        }\n    }\n}\n\n</code></pre>\n"
      },
      "event_id": "$1649957605513YLPXU:matrix.workhardpgh.com",
      "origin_server_ts": 1649957605163,
      "unsigned": {
        "age": 258123921,
        "transaction_id": "m1649957605026.7",
        "m.relations": {
          "m.replace": {
            "event_id": "$1649964618527iIUWq:matrix.workhardpgh.com",
            "origin_server_ts": 1649964618694,
            "sender": "@taslater:matrix.workhardpgh.com"
          }
        }
      },
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com"
    },
    {
      "type": "m.room.message",
      "sender": "@uugengiven:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "> <@taslater:matrix.workhardpgh.com> Regex 4 LYFE\n> \n> ```csharp\n> using System;\n> using System.Text.RegularExpressions;\n> \n> namespace MadlibRegex\n> {\n>     class Program\n>     {\n>         static void Main(string[] args)\n>         {\n>             string outline = \"[Author] wrote my favorite book [book] and sometimes I [verb] the pages [adverb].\";\n> \n>             Console.WriteLine(\"Let's do a madlib! What could possibly go wrong?!\\n\");\n>             foreach (Match m in Regex.Matches(outline, @\"\\[(.*?)\\]\"))\n>             {\n>                 string matchValue = m.Value;\n>                 string matchPhrase = matchValue[1..^1];\n>                 Console.WriteLine($\"Please enter a {matchPhrase}:\");\n>                 string replaceWith = Console.ReadLine();\n>                 Regex replaceMe = new Regex(Regex.Escape(matchValue));\n>                 outline = replaceMe.Replace(outline, replaceWith, 1);\n>             }\n> \n>             Console.WriteLine($\"\\nHere it is, you sick sunuvagun:\\n{outline}\");\n>         }\n>     }\n> }\n\nCan you write out, in english, what that Regex is doing on line 13?",
            "mimetype": "text/plain"
          },
          {
            "body": "<mx-reply><blockquote><a href=\"https://matrix.to/#/!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com/$1649957605513YLPXU:matrix.workhardpgh.com?via=matrix.workhardpgh.com\">In reply to</a> <a href=\"https://matrix.to/#/@taslater:matrix.workhardpgh.com\">@taslater:matrix.workhardpgh.com</a><br><p>Regex 4 LYFE</p>\n<pre><code class=\"language-csharp\">using System;\nusing System.Text.RegularExpressions;\n\nnamespace MadlibRegex\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string outline = \"[Author] wrote my favorite book [book] and sometimes I [verb] the pages [adverb].\";\n\n            Console.WriteLine(\"Let's do a madlib! What could possibly go wrong?!\\n\");\n            foreach (Match m in Regex.Matches(outline, @\"\\[(.*?)\\]\"))\n            {\n                string matchValue = m.Value;\n                string matchPhrase = matchValue[1..^1];\n                Console.WriteLine($\"Please enter a {matchPhrase}:\");\n                string replaceWith = Console.ReadLine();\n                Regex replaceMe = new Regex(Regex.Escape(matchValue));\n                outline = replaceMe.Replace(outline, replaceWith, 1);\n            }\n\n            Console.WriteLine($\"\\nHere it is, you sick sunuvagun:\\n{outline}\");\n        }\n    }\n}\n</code></pre>\n</blockquote></mx-reply>Can you write out, in english, what that Regex is doing on line 13?",
            "mimetype": "text/html"
          }
        ],
        "body": "> <@taslater:matrix.workhardpgh.com> Regex 4 LYFE\n> \n> ```csharp\n> using System;\n> using System.Text.RegularExpressions;\n> \n> namespace MadlibRegex\n> {\n>     class Program\n>     {\n>         static void Main(string[] args)\n>         {\n>             string outline = \"[Author] wrote my favorite book [book] and sometimes I [verb] the pages [adverb].\";\n> \n>             Console.WriteLine(\"Let's do a madlib! What could possibly go wrong?!\\n\");\n>             foreach (Match m in Regex.Matches(outline, @\"\\[(.*?)\\]\"))\n>             {\n>                 string matchValue = m.Value;\n>                 string matchPhrase = matchValue[1..^1];\n>                 Console.WriteLine($\"Please enter a {matchPhrase}:\");\n>                 string replaceWith = Console.ReadLine();\n>                 Regex replaceMe = new Regex(Regex.Escape(matchValue));\n>                 outline = replaceMe.Replace(outline, replaceWith, 1);\n>             }\n> \n>             Console.WriteLine($\"\\nHere it is, you sick sunuvagun:\\n{outline}\");\n>         }\n>     }\n> }\n\nCan you write out, in english, what that Regex is doing on line 13?",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<mx-reply><blockquote><a href=\"https://matrix.to/#/!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com/$1649957605513YLPXU:matrix.workhardpgh.com?via=matrix.workhardpgh.com\">In reply to</a> <a href=\"https://matrix.to/#/@taslater:matrix.workhardpgh.com\">@taslater:matrix.workhardpgh.com</a><br><p>Regex 4 LYFE</p>\n<pre><code class=\"language-csharp\">using System;\nusing System.Text.RegularExpressions;\n\nnamespace MadlibRegex\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string outline = \"[Author] wrote my favorite book [book] and sometimes I [verb] the pages [adverb].\";\n\n            Console.WriteLine(\"Let's do a madlib! What could possibly go wrong?!\\n\");\n            foreach (Match m in Regex.Matches(outline, @\"\\[(.*?)\\]\"))\n            {\n                string matchValue = m.Value;\n                string matchPhrase = matchValue[1..^1];\n                Console.WriteLine($\"Please enter a {matchPhrase}:\");\n                string replaceWith = Console.ReadLine();\n                Regex replaceMe = new Regex(Regex.Escape(matchValue));\n                outline = replaceMe.Replace(outline, replaceWith, 1);\n            }\n\n            Console.WriteLine($\"\\nHere it is, you sick sunuvagun:\\n{outline}\");\n        }\n    }\n}\n</code></pre>\n</blockquote></mx-reply>Can you write out, in english, what that Regex is doing on line 13?",
        "m.relates_to": {
          "m.in_reply_to": {
            "event_id": "$1649957605513YLPXU:matrix.workhardpgh.com"
          }
        }
      },
      "event_id": "$1649958496514xTxdS:matrix.workhardpgh.com",
      "origin_server_ts": 1649958496452,
      "unsigned": {
        "age": 257232632
      },
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com"
    },
    {
      "type": "m.room.message",
      "sender": "@alex_vanlan:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "*Media omitted*",
        "format": "org.matrix.custom.html",
        "formatted_body": "<em>Media omitted</em>"
      },
      "event_id": "$1649958561515lwZhN:matrix.workhardpgh.com",
      "origin_server_ts": 1649958561203,
      "unsigned": {
        "age": 257167881
      },
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com"
    },
    {
      "type": "m.room.message",
      "sender": "@alex_vanlan:matrix.workhardpgh.com",
      "content": {
        "body": "Me, peering in from the void, wondering why this class is so into regex ",
        "format": "org.matrix.custom.html",
        "msgtype": "m.text",
        "formatted_body": "Me, peering in from the void, wondering why this class is so into regex"
      },
      "event_id": "$1649958574516SxIvW:matrix.workhardpgh.com",
      "origin_server_ts": 1649958574014,
      "unsigned": {
        "age": 257155070,
        "m.relations": {
          "m.annotation": {
            "chunk": [
              {
                "type": "m.reaction",
                "key": "😅",
                "count": 2
              }
            ]
          }
        }
      },
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com"
    },
    {
      "type": "m.room.message",
      "sender": "@davidlasky:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "```\nusing System;\n\nnamespace MadLibs\n{\n    class Program\n    {\n        static void FindWords(string textRaw)\n        {\n            bool insideBrackets = false;\n            string finalOutput = \"\";\n            string questionPhrase = \"\";\n            for (int i = 0; i < textRaw.Length; i++)\n            {\n                if (textRaw[i] == '[')\n                {\n                    insideBrackets = true;\n                    //we start building a term\n                }\n                else if (textRaw[i] == ']')\n                {\n                    //we finish building a term\n                    insideBrackets = false;\n                    //use questionPhrase to ask user for a word, immediately dump word into final answer in correct place\n                    finalOutput= finalOutput+AnswerPrompt(questionPhrase);\n                    //erase questionPhrase to get ready for the next word\n                    questionPhrase = \"\";\n                }\n                else if (insideBrackets)\n                {\n                    //building the questionPhrase, the kind of word we're gonna ask for\n                    questionPhrase = questionPhrase + textRaw[i];  \n                }\n                else\n                {\n                    finalOutput = finalOutput + textRaw[i];\n                }\n            }\n            //Console.WriteLine(questionPhrase);\n            Console.WriteLine(finalOutput);\n        }\n        static string AnswerPrompt(string request)\n        {\n            //ask for an input\n            Console.WriteLine(\"Please give me a(n) \" + request);\n            //receive and record and input\n            string input = Console.ReadLine().ToLower();\n            //??tick one step up in our array to get ready for our next input??\n            return input;\n        }\n        static void Main(string[] args)\n        {\n         \n            string textRaw = \"Oh about [number] days ago, I was walking in [place] when I saw a [tchotchke] and decided, you know what, I might just do a [crime] so that I can do get one! So I went ahead and [adverb] [verb] [number] times. Now, I wasn't that successful so officer [Person's Name] took me in his police car down to the station. Oh my, the things I shared a cell with! There was a [adjective] [noun], and a [adjective] [noun], and at least [number] [adjective] [plural nouns]! Anyways, I was sentenced to [time] years in prison where I spend my time [jerund] and [jerund].\";\n            bool playing = true;\n            while (playing)\n            {\n                Console.WriteLine(\"Do you wanna get NUTSO CRAZY with madlibs????(Y/N)\");\n                string task = Console.ReadLine().ToUpper();\n                if (task==\"Y\")\n                {\n                    //playing game\n                    FindWords(textRaw);\n                }\n                //quit game\n                else if (task==\"N\")\n                {\n                    playing = false;\n                }\n                //error message\n                else\n                {\n                    Console.WriteLine(\"come on man, I said 'Y/N'\");\n                }\n            }\n        }\n    }\n}\n//=========outline in english time, my dudes=====\n//read a madlib string\n//sort out the variables needed\n//prompt user for different parts of speech (noun, pronoun, name a crime, etc)\n//recieve/record answers\n//write out completed madlib\n//ask user if they wanna play again\n\n//===========implementation deets==================\n//Make a spot in the code to receive a madlibs text\n//comb our madlibs text to find out variables\n//make variables for users to fill\n//prompt user for words with CodeWriteLines\n//Save answers as strings with names or some way to call them\n//as a class array\n//concatonate (turn them into a cat) answers with story\n//print concatonated concatination of concatinated story\n//LOOP to play again or quit\n//generate a story with holes in it",
            "mimetype": "text/plain"
          },
          {
            "body": "<pre><code>using System;\n\nnamespace MadLibs\n{\n    class Program\n    {\n        static void FindWords(string textRaw)\n        {\n            bool insideBrackets = false;\n            string finalOutput = &quot;&quot;;\n            string questionPhrase = &quot;&quot;;\n            for (int i = 0; i &lt; textRaw.Length; i++)\n            {\n                if (textRaw[i] == '[')\n                {\n                    insideBrackets = true;\n                    //we start building a term\n                }\n                else if (textRaw[i] == ']')\n                {\n                    //we finish building a term\n                    insideBrackets = false;\n                    //use questionPhrase to ask user for a word, immediately dump word into final answer in correct place\n                    finalOutput= finalOutput+AnswerPrompt(questionPhrase);\n                    //erase questionPhrase to get ready for the next word\n                    questionPhrase = &quot;&quot;;\n                }\n                else if (insideBrackets)\n                {\n                    //building the questionPhrase, the kind of word we're gonna ask for\n                    questionPhrase = questionPhrase + textRaw[i];  \n                }\n                else\n                {\n                    finalOutput = finalOutput + textRaw[i];\n                }\n            }\n            //Console.WriteLine(questionPhrase);\n            Console.WriteLine(finalOutput);\n        }\n        static string AnswerPrompt(string request)\n        {\n            //ask for an input\n            Console.WriteLine(&quot;Please give me a(n) &quot; + request);\n            //receive and record and input\n            string input = Console.ReadLine().ToLower();\n            //??tick one step up in our array to get ready for our next input??\n            return input;\n        }\n        static void Main(string[] args)\n        {\n         \n            string textRaw = &quot;Oh about [number] days ago, I was walking in [place] when I saw a [tchotchke] and decided, you know what, I might just do a [crime] so that I can do get one! So I went ahead and [adverb] [verb] [number] times. Now, I wasn't that successful so officer [Person's Name] took me in his police car down to the station. Oh my, the things I shared a cell with! There was a [adjective] [noun], and a [adjective] [noun], and at least [number] [adjective] [plural nouns]! Anyways, I was sentenced to [time] years in prison where I spend my time [jerund] and [jerund].&quot;;\n            bool playing = true;\n            while (playing)\n            {\n                Console.WriteLine(&quot;Do you wanna get NUTSO CRAZY with madlibs????(Y/N)&quot;);\n                string task = Console.ReadLine().ToUpper();\n                if (task==&quot;Y&quot;)\n                {\n                    //playing game\n                    FindWords(textRaw);\n                }\n                //quit game\n                else if (task==&quot;N&quot;)\n                {\n                    playing = false;\n                }\n                //error message\n                else\n                {\n                    Console.WriteLine(&quot;come on man, I said 'Y/N'&quot;);\n                }\n            }\n        }\n    }\n}\n//=========outline in english time, my dudes=====\n//read a madlib string\n//sort out the variables needed\n//prompt user for different parts of speech (noun, pronoun, name a crime, etc)\n//recieve/record answers\n//write out completed madlib\n//ask user if they wanna play again\n\n//===========implementation deets==================\n//Make a spot in the code to receive a madlibs text\n//comb our madlibs text to find out variables\n//make variables for users to fill\n//prompt user for words with CodeWriteLines\n//Save answers as strings with names or some way to call them\n//as a class array\n//concatonate (turn them into a cat) answers with story\n//print concatonated concatination of concatinated story\n//LOOP to play again or quit\n//generate a story with holes in it\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "```\nusing System;\n\nnamespace MadLibs\n{\n    class Program\n    {\n        static void FindWords(string textRaw)\n        {\n            bool insideBrackets = false;\n            string finalOutput = \"\";\n            string questionPhrase = \"\";\n            for (int i = 0; i < textRaw.Length; i++)\n            {\n                if (textRaw[i] == '[')\n                {\n                    insideBrackets = true;\n                    //we start building a term\n                }\n                else if (textRaw[i] == ']')\n                {\n                    //we finish building a term\n                    insideBrackets = false;\n                    //use questionPhrase to ask user for a word, immediately dump word into final answer in correct place\n                    finalOutput= finalOutput+AnswerPrompt(questionPhrase);\n                    //erase questionPhrase to get ready for the next word\n                    questionPhrase = \"\";\n                }\n                else if (insideBrackets)\n                {\n                    //building the questionPhrase, the kind of word we're gonna ask for\n                    questionPhrase = questionPhrase + textRaw[i];  \n                }\n                else\n                {\n                    finalOutput = finalOutput + textRaw[i];\n                }\n            }\n            //Console.WriteLine(questionPhrase);\n            Console.WriteLine(finalOutput);\n        }\n        static string AnswerPrompt(string request)\n        {\n            //ask for an input\n            Console.WriteLine(\"Please give me a(n) \" + request);\n            //receive and record and input\n            string input = Console.ReadLine().ToLower();\n            //??tick one step up in our array to get ready for our next input??\n            return input;\n        }\n        static void Main(string[] args)\n        {\n         \n            string textRaw = \"Oh about [number] days ago, I was walking in [place] when I saw a [tchotchke] and decided, you know what, I might just do a [crime] so that I can do get one! So I went ahead and [adverb] [verb] [number] times. Now, I wasn't that successful so officer [Person's Name] took me in his police car down to the station. Oh my, the things I shared a cell with! There was a [adjective] [noun], and a [adjective] [noun], and at least [number] [adjective] [plural nouns]! Anyways, I was sentenced to [time] years in prison where I spend my time [jerund] and [jerund].\";\n            bool playing = true;\n            while (playing)\n            {\n                Console.WriteLine(\"Do you wanna get NUTSO CRAZY with madlibs????(Y/N)\");\n                string task = Console.ReadLine().ToUpper();\n                if (task==\"Y\")\n                {\n                    //playing game\n                    FindWords(textRaw);\n                }\n                //quit game\n                else if (task==\"N\")\n                {\n                    playing = false;\n                }\n                //error message\n                else\n                {\n                    Console.WriteLine(\"come on man, I said 'Y/N'\");\n                }\n            }\n        }\n    }\n}\n//=========outline in english time, my dudes=====\n//read a madlib string\n//sort out the variables needed\n//prompt user for different parts of speech (noun, pronoun, name a crime, etc)\n//recieve/record answers\n//write out completed madlib\n//ask user if they wanna play again\n\n//===========implementation deets==================\n//Make a spot in the code to receive a madlibs text\n//comb our madlibs text to find out variables\n//make variables for users to fill\n//prompt user for words with CodeWriteLines\n//Save answers as strings with names or some way to call them\n//as a class array\n//concatonate (turn them into a cat) answers with story\n//print concatonated concatination of concatinated story\n//LOOP to play again or quit\n//generate a story with holes in it",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<pre><code>using System;\n\nnamespace MadLibs\n{\n    class Program\n    {\n        static void FindWords(string textRaw)\n        {\n            bool insideBrackets = false;\n            string finalOutput = &quot;&quot;;\n            string questionPhrase = &quot;&quot;;\n            for (int i = 0; i &lt; textRaw.Length; i++)\n            {\n                if (textRaw[i] == '[')\n                {\n                    insideBrackets = true;\n                    //we start building a term\n                }\n                else if (textRaw[i] == ']')\n                {\n                    //we finish building a term\n                    insideBrackets = false;\n                    //use questionPhrase to ask user for a word, immediately dump word into final answer in correct place\n                    finalOutput= finalOutput+AnswerPrompt(questionPhrase);\n                    //erase questionPhrase to get ready for the next word\n                    questionPhrase = &quot;&quot;;\n                }\n                else if (insideBrackets)\n                {\n                    //building the questionPhrase, the kind of word we're gonna ask for\n                    questionPhrase = questionPhrase + textRaw[i];  \n                }\n                else\n                {\n                    finalOutput = finalOutput + textRaw[i];\n                }\n            }\n            //Console.WriteLine(questionPhrase);\n            Console.WriteLine(finalOutput);\n        }\n        static string AnswerPrompt(string request)\n        {\n            //ask for an input\n            Console.WriteLine(&quot;Please give me a(n) &quot; + request);\n            //receive and record and input\n            string input = Console.ReadLine().ToLower();\n            //??tick one step up in our array to get ready for our next input??\n            return input;\n        }\n        static void Main(string[] args)\n        {\n         \n            string textRaw = &quot;Oh about [number] days ago, I was walking in [place] when I saw a [tchotchke] and decided, you know what, I might just do a [crime] so that I can do get one! So I went ahead and [adverb] [verb] [number] times. Now, I wasn't that successful so officer [Person's Name] took me in his police car down to the station. Oh my, the things I shared a cell with! There was a [adjective] [noun], and a [adjective] [noun], and at least [number] [adjective] [plural nouns]! Anyways, I was sentenced to [time] years in prison where I spend my time [jerund] and [jerund].&quot;;\n            bool playing = true;\n            while (playing)\n            {\n                Console.WriteLine(&quot;Do you wanna get NUTSO CRAZY with madlibs????(Y/N)&quot;);\n                string task = Console.ReadLine().ToUpper();\n                if (task==&quot;Y&quot;)\n                {\n                    //playing game\n                    FindWords(textRaw);\n                }\n                //quit game\n                else if (task==&quot;N&quot;)\n                {\n                    playing = false;\n                }\n                //error message\n                else\n                {\n                    Console.WriteLine(&quot;come on man, I said 'Y/N'&quot;);\n                }\n            }\n        }\n    }\n}\n//=========outline in english time, my dudes=====\n//read a madlib string\n//sort out the variables needed\n//prompt user for different parts of speech (noun, pronoun, name a crime, etc)\n//recieve/record answers\n//write out completed madlib\n//ask user if they wanna play again\n\n//===========implementation deets==================\n//Make a spot in the code to receive a madlibs text\n//comb our madlibs text to find out variables\n//make variables for users to fill\n//prompt user for words with CodeWriteLines\n//Save answers as strings with names or some way to call them\n//as a class array\n//concatonate (turn them into a cat) answers with story\n//print concatonated concatination of concatinated story\n//LOOP to play again or quit\n//generate a story with holes in it\n</code></pre>\n"
      },
      "event_id": "$1649961001518uawIq:matrix.workhardpgh.com",
      "origin_server_ts": 1649961001260,
      "unsigned": {
        "age": 254727824,
        "m.relations": {
          "m.replace": {
            "event_id": "$1649969168533LBTWN:matrix.workhardpgh.com",
            "origin_server_ts": 1649969168781,
            "sender": "@davidlasky:matrix.workhardpgh.com"
          }
        }
      },
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com"
    },
    {
      "type": "m.room.member",
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com",
      "sender": "@andrew:matrix.workhardpgh.com",
      "content": {
        "membership": "join",
        "displayname": "Andy Hickman"
      },
      "state_key": "@andrew:matrix.workhardpgh.com",
      "event_id": "$1649962972520AAcgN:matrix.workhardpgh.com",
      "origin_server_ts": 1649962972351,
      "unsigned": {
        "replaces_state": "$164910091727vJRqP:matrix.workhardpgh.com",
        "prev_content": {
          "membership": "join",
          "displayname": "andrew"
        },
        "prev_sender": "@andrew:matrix.workhardpgh.com",
        "age": 252756733
      },
      "user_id": "@andrew:matrix.workhardpgh.com",
      "age": 252756733,
      "replaces_state": "$164910091727vJRqP:matrix.workhardpgh.com",
      "prev_content": {
        "membership": "join",
        "displayname": "andrew"
      }
    },
    {
      "type": "m.room.message",
      "sender": "@taslater:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "> <@uugengiven:matrix.workhardpgh.com> Can you write out, in english, what that Regex is doing on line 13?\n\nWorking on it in our group right now! I will post updated code with detailed comments soon!",
            "mimetype": "text/plain"
          },
          {
            "body": "<mx-reply><blockquote><a href=\"https://matrix.to/#/!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com/$1649958496514xTxdS:matrix.workhardpgh.com?via=matrix.workhardpgh.com\">In reply to</a> <a href=\"https://matrix.to/#/@uugengiven:matrix.workhardpgh.com\">@uugengiven:matrix.workhardpgh.com</a><br>Can you write out, in english, what that Regex is doing on line 13?</blockquote></mx-reply>Working on it in our group right now! I will post updated code with detailed comments soon!",
            "mimetype": "text/html"
          }
        ],
        "body": "> <@uugengiven:matrix.workhardpgh.com> Can you write out, in english, what that Regex is doing on line 13?\n\nWorking on it in our group right now! I will post updated code with detailed comments soon!",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<mx-reply><blockquote><a href=\"https://matrix.to/#/!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com/$1649958496514xTxdS:matrix.workhardpgh.com?via=matrix.workhardpgh.com\">In reply to</a> <a href=\"https://matrix.to/#/@uugengiven:matrix.workhardpgh.com\">@uugengiven:matrix.workhardpgh.com</a><br>Can you write out, in english, what that Regex is doing on line 13?</blockquote></mx-reply>Working on it in our group right now! I will post updated code with detailed comments soon!",
        "m.relates_to": {
          "m.in_reply_to": {
            "event_id": "$1649958496514xTxdS:matrix.workhardpgh.com"
          }
        }
      },
      "event_id": "$1649963281523zXjar:matrix.workhardpgh.com",
      "origin_server_ts": 1649963281610,
      "unsigned": {
        "age": 252447474,
        "transaction_id": "m1649963281382.8"
      },
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com"
    },
    {
      "type": "m.room.message",
      "sender": "@shaunapage:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.text": "``csharp",
        "body": "``csharp",
        "msgtype": "m.text"
      },
      "event_id": "$1649963859524CRAgE:matrix.workhardpgh.com",
      "origin_server_ts": 1649963859508,
      "unsigned": {
        "age": 251869576
      },
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com"
    },
    {
      "type": "m.room.message",
      "sender": "@shaunapage:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "```csharp",
            "mimetype": "text/plain"
          },
          {
            "body": "<pre><code class=\"language-csharp\"></code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "```csharp",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<pre><code class=\"language-csharp\"></code></pre>\n"
      },
      "event_id": "$1649963890525iViCW:matrix.workhardpgh.com",
      "origin_server_ts": 1649963890297,
      "unsigned": {
        "age": 251838787
      },
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com"
    },
    {
      "type": "m.room.message",
      "sender": "@shaunapage:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "```csharp\nusing System;\n\nnamespace decoder_ring\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string madlib = \"The world's best [noun]\";\n            int start = 0;\n            int end = 0;\n            Console.WriteLine(\"Please give us a noun . \");\n            string answer1 = Console.ReadLine();\n\n                for (int i = 0; i < madlib.Length; i++)\n            {\n                if (madlib[i] == '[')\n                {\n                   \n\n                    Console.WriteLine(i);\n                    start = i; \n                }\n                if (madlib[i] == ']')\n                {\n                    Console.WriteLine(i);\n                    end = i;\n                }\n            }\n//formatting of a substring is : madlib.Substring(int start, int length)\n//madlib.Replace(search for, replacement)\n\n            Console.WriteLine(madlib.Substring(start, end - start + 1));\n             string word1 = madlib.Substring(start, end - start +1);\n            Console.WriteLine(madlib.Replace(word1, answer1));\n           \n\n            \n        }\n\n\n    }\n    \n}\n",
            "mimetype": "text/plain"
          },
          {
            "body": "<pre><code class=\"language-csharp\">using System;\n\nnamespace decoder_ring\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string madlib = &quot;The world's best [noun]&quot;;\n            int start = 0;\n            int end = 0;\n            Console.WriteLine(&quot;Please give us a noun . &quot;);\n            string answer1 = Console.ReadLine();\n\n                for (int i = 0; i &lt; madlib.Length; i++)\n            {\n                if (madlib[i] == '[')\n                {\n                   \n\n                    Console.WriteLine(i);\n                    start = i; \n                }\n                if (madlib[i] == ']')\n                {\n                    Console.WriteLine(i);\n                    end = i;\n                }\n            }\n//formatting of a substring is : madlib.Substring(int start, int length)\n//madlib.Replace(search for, replacement)\n\n            Console.WriteLine(madlib.Substring(start, end - start + 1));\n             string word1 = madlib.Substring(start, end - start +1);\n            Console.WriteLine(madlib.Replace(word1, answer1));\n           \n\n            \n        }\n\n\n    }\n    \n}\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "```csharp\nusing System;\n\nnamespace decoder_ring\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string madlib = \"The world's best [noun]\";\n            int start = 0;\n            int end = 0;\n            Console.WriteLine(\"Please give us a noun . \");\n            string answer1 = Console.ReadLine();\n\n                for (int i = 0; i < madlib.Length; i++)\n            {\n                if (madlib[i] == '[')\n                {\n                   \n\n                    Console.WriteLine(i);\n                    start = i; \n                }\n                if (madlib[i] == ']')\n                {\n                    Console.WriteLine(i);\n                    end = i;\n                }\n            }\n//formatting of a substring is : madlib.Substring(int start, int length)\n//madlib.Replace(search for, replacement)\n\n            Console.WriteLine(madlib.Substring(start, end - start + 1));\n             string word1 = madlib.Substring(start, end - start +1);\n            Console.WriteLine(madlib.Replace(word1, answer1));\n           \n\n            \n        }\n\n\n    }\n    \n}\n",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<pre><code class=\"language-csharp\">using System;\n\nnamespace decoder_ring\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            string madlib = &quot;The world's best [noun]&quot;;\n            int start = 0;\n            int end = 0;\n            Console.WriteLine(&quot;Please give us a noun . &quot;);\n            string answer1 = Console.ReadLine();\n\n                for (int i = 0; i &lt; madlib.Length; i++)\n            {\n                if (madlib[i] == '[')\n                {\n                   \n\n                    Console.WriteLine(i);\n                    start = i; \n                }\n                if (madlib[i] == ']')\n                {\n                    Console.WriteLine(i);\n                    end = i;\n                }\n            }\n//formatting of a substring is : madlib.Substring(int start, int length)\n//madlib.Replace(search for, replacement)\n\n            Console.WriteLine(madlib.Substring(start, end - start + 1));\n             string word1 = madlib.Substring(start, end - start +1);\n            Console.WriteLine(madlib.Replace(word1, answer1));\n           \n\n            \n        }\n\n\n    }\n    \n}\n</code></pre>\n"
      },
      "event_id": "$1649963905526UJQjM:matrix.workhardpgh.com",
      "origin_server_ts": 1649963905997,
      "unsigned": {
        "age": 251823087
      },
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com"
    },
    {
      "type": "m.room.message",
      "sender": "@taslater:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "> <@taslater:matrix.workhardpgh.com> Working on it in our group right now! I will post updated code with detailed comments soon!\n\nI have added an unholy quantity of comments if anyone is interested.\n\nAlso, my incredible group Jessica Yockey Andy Hickman davidlasky also solved MadLibs in a totally different and lovely other way as well!",
            "mimetype": "text/plain"
          },
          {
            "body": "<mx-reply><blockquote><a href=\"https://matrix.to/#/!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com/$1649963281523zXjar:matrix.workhardpgh.com?via=matrix.workhardpgh.com\">In reply to</a> <a href=\"https://matrix.to/#/@taslater:matrix.workhardpgh.com\">@taslater:matrix.workhardpgh.com</a><br>Working on it in our group right now! I will post updated code with detailed comments soon!</blockquote></mx-reply><p>I have added an unholy quantity of comments if anyone is interested.</p>\n<p>Also, my incredible group <a href=\"https://matrix.to/#/@yockeyjessica:matrix.workhardpgh.com\">Jessica Yockey</a> <a href=\"https://matrix.to/#/@andrew:matrix.workhardpgh.com\">Andy Hickman</a> <a href=\"https://matrix.to/#/@davidlasky:matrix.workhardpgh.com\">davidlasky</a> also solved MadLibs in a totally different and lovely other way as well!</p>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "> <@taslater:matrix.workhardpgh.com> Working on it in our group right now! I will post updated code with detailed comments soon!\n\nI have added an unholy quantity of comments if anyone is interested.\n\nAlso, my incredible group Jessica Yockey Andy Hickman davidlasky also solved MadLibs in a totally different and lovely other way as well!",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<mx-reply><blockquote><a href=\"https://matrix.to/#/!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com/$1649963281523zXjar:matrix.workhardpgh.com?via=matrix.workhardpgh.com\">In reply to</a> <a href=\"https://matrix.to/#/@taslater:matrix.workhardpgh.com\">@taslater:matrix.workhardpgh.com</a><br>Working on it in our group right now! I will post updated code with detailed comments soon!</blockquote></mx-reply><p>I have added an unholy quantity of comments if anyone is interested.</p>\n<p>Also, my incredible group <a href=\"https://matrix.to/#/@yockeyjessica:matrix.workhardpgh.com\">Jessica Yockey</a> <a href=\"https://matrix.to/#/@andrew:matrix.workhardpgh.com\">Andy Hickman</a> <a href=\"https://matrix.to/#/@davidlasky:matrix.workhardpgh.com\">davidlasky</a> also solved MadLibs in a totally different and lovely other way as well!</p>\n",
        "m.relates_to": {
          "m.in_reply_to": {
            "event_id": "$1649963281523zXjar:matrix.workhardpgh.com"
          }
        }
      },
      "event_id": "$1649964763528xwzOL:matrix.workhardpgh.com",
      "origin_server_ts": 1649964763472,
      "unsigned": {
        "age": 250965612,
        "transaction_id": "m1649964763241.10"
      },
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com"
    },
    {
      "type": "m.room.message",
      "sender": "@joewalker147:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "Writing a Mad Libs \n\n```csharp\n\nusing System;\n\nnamespace MadLibs_Project\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Mad Libs Project\n            //================\n            //question and concerns and CHALLeemgESs\n            //how do we handled multiple nouns,blanks, etc and place them in the correct spots\n            //setting specific variables for specific spots\n            //editing the story issues\n            //chronological order/in order??\n            //user --> 10 year old playing the game\n            //multiple prompts (user made prompt??)\n            //simple prompt -->> build out --->> SAD LIBS\n            //I went to the {{noun}} store and bought a {{adjective}} {{noun}}\n\n            //======== process ==========\n            //ask user for inputs\n            //variety of inputs (nouns,adjects,etc)\n            //store inputs\n            // store multiple inputs \n            //handle inputs - replace {input spaces} in prompt with {user inputs}\n            //place inputs into story\n            //print out completed story with {user inputs}\n\n            //===stretch goals===\n            //loop the mad lib\n            //storing multiple prompts\n            //place same inputs into multiple prompts\n\n            Console.WriteLine(\"Welcome to Mad Libs, bucko! \\n Feelin' lazy? (a) \\n Feelin' creative? (b)  \");\n            string option = Console.ReadLine().ToLower();\n            //Ask the user to play our game or make their game\n\n            if (option == \"a\")\n            {\n\n                //written out our story in an array\n                string[] story =   {\"I have a \",\"*adjective\",\" \", \"*type of animal\",\n                \". It \",\"*verb that ends in 's'\", \" down the \", \"*location\", \" and upsets the \", \"*group\",\".\"};\n                //our words array is the same length as our story array\n                Word[] words = new Word[story.Length];\n\n\n                for (int i = 0; i < story.Length; i++)\n                {\n                    string phrase = story[i];\n                    if (phrase[0] == '*')\n                    //using a for loop, we search the story for places the user should fill in\n                    {\n                        words[i] = new Word();\n                        words[i].PartOfSpeech = phrase;\n\n                        Console.WriteLine(\"give me a \" + phrase);\n                        //identifies which *phrase is needed and asks for it \n                        string input = Console.ReadLine();\n                        //user enters their input for each *phrase\n                        words[i].UserInput = input;\n                        story[i] = words[i].UserInput;\n                        //repeats until all *phrases have inputs\n                    }\n\n                }\n                Console.WriteLine(string.Join(\"\", story));\n                //writes out the story from array with the user inputs \n            }\n\n            if (option == \"b\")\n            {\n                Console.WriteLine(\"So ya wanna write your own story \\nYou'll input below \\nA little something like this \\nEx) [type of animal] was going to the [place]\");\n                string UserStory = Console.ReadLine();\n                int startPlace = 0;\n                int endPlace = 0;\n                //explain the rules to the user and have them write us a mad libs story \n\n\n\n                for (int i = 0; i < UserStory.Length; i++)\n                {\n                    if (UserStory[i] == '[')\n                    {\n                        startPlace = i;\n                    }\n                    //designating the begining of our substring/space to fill in\n                    else if (UserStory[i] == ']')\n                    {\n                        endPlace = i + 1;\n                        string ThisBlank = UserStory.Substring(startPlace, (endPlace - startPlace));\n                        //designate the ending of our substring\n\n                        ThisBlank = ThisBlank.Replace(\"[\", \"\").Replace(\"]\", \"\");\n                        //remove the brackets to ask for prettier inputs\n\n                        Console.WriteLine(\"give me a \" + ThisBlank);\n                        string thisinput = Console.ReadLine();\n                        //ask user for mad lib inputs for their designated blankspaces\n\n                        UserStory = UserStory.Remove(startPlace, (endPlace - startPlace)).Insert(startPlace, thisinput);\n                        //inserts the user inputs into their designated blankspaces\n\n                    }\n                }\n                Console.WriteLine(UserStory);\n                //write the completed story\n            }\n        }\n    }\n\n    class Word\n        //for option a\n    {\n        public string PartOfSpeech;\n        //storing what we are asking the user to replace\n        public string UserInput;\n        //storing what the user enters into the mad lib\n    }\n}\n\n```\n\nYemi Truechild (she/her) Tobias Tobak (he/him) Spenser Greeley",
            "mimetype": "text/plain"
          },
          {
            "body": "<p>Writing a Mad Libs</p>\n<pre><code class=\"language-csharp\">\nusing System;\n\nnamespace MadLibs_Project\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Mad Libs Project\n            //================\n            //question and concerns and CHALLeemgESs\n            //how do we handled multiple nouns,blanks, etc and place them in the correct spots\n            //setting specific variables for specific spots\n            //editing the story issues\n            //chronological order/in order??\n            //user --&gt; 10 year old playing the game\n            //multiple prompts (user made prompt??)\n            //simple prompt --&gt;&gt; build out ---&gt;&gt; SAD LIBS\n            //I went to the {{noun}} store and bought a {{adjective}} {{noun}}\n\n            //======== process ==========\n            //ask user for inputs\n            //variety of inputs (nouns,adjects,etc)\n            //store inputs\n            // store multiple inputs \n            //handle inputs - replace {input spaces} in prompt with {user inputs}\n            //place inputs into story\n            //print out completed story with {user inputs}\n\n            //===stretch goals===\n            //loop the mad lib\n            //storing multiple prompts\n            //place same inputs into multiple prompts\n\n            Console.WriteLine(&quot;Welcome to Mad Libs, bucko! \\n Feelin' lazy? (a) \\n Feelin' creative? (b)  &quot;);\n            string option = Console.ReadLine().ToLower();\n            //Ask the user to play our game or make their game\n\n            if (option == &quot;a&quot;)\n            {\n\n                //written out our story in an array\n                string[] story =   {&quot;I have a &quot;,&quot;*adjective&quot;,&quot; &quot;, &quot;*type of animal&quot;,\n                &quot;. It &quot;,&quot;*verb that ends in 's'&quot;, &quot; down the &quot;, &quot;*location&quot;, &quot; and upsets the &quot;, &quot;*group&quot;,&quot;.&quot;};\n                //our words array is the same length as our story array\n                Word[] words = new Word[story.Length];\n\n\n                for (int i = 0; i &lt; story.Length; i++)\n                {\n                    string phrase = story[i];\n                    if (phrase[0] == '*')\n                    //using a for loop, we search the story for places the user should fill in\n                    {\n                        words[i] = new Word();\n                        words[i].PartOfSpeech = phrase;\n\n                        Console.WriteLine(&quot;give me a &quot; + phrase);\n                        //identifies which *phrase is needed and asks for it \n                        string input = Console.ReadLine();\n                        //user enters their input for each *phrase\n                        words[i].UserInput = input;\n                        story[i] = words[i].UserInput;\n                        //repeats until all *phrases have inputs\n                    }\n\n                }\n                Console.WriteLine(string.Join(&quot;&quot;, story));\n                //writes out the story from array with the user inputs \n            }\n\n            if (option == &quot;b&quot;)\n            {\n                Console.WriteLine(&quot;So ya wanna write your own story \\nYou'll input below \\nA little something like this \\nEx) [type of animal] was going to the [place]&quot;);\n                string UserStory = Console.ReadLine();\n                int startPlace = 0;\n                int endPlace = 0;\n                //explain the rules to the user and have them write us a mad libs story \n\n\n\n                for (int i = 0; i &lt; UserStory.Length; i++)\n                {\n                    if (UserStory[i] == '[')\n                    {\n                        startPlace = i;\n                    }\n                    //designating the begining of our substring/space to fill in\n                    else if (UserStory[i] == ']')\n                    {\n                        endPlace = i + 1;\n                        string ThisBlank = UserStory.Substring(startPlace, (endPlace - startPlace));\n                        //designate the ending of our substring\n\n                        ThisBlank = ThisBlank.Replace(&quot;[&quot;, &quot;&quot;).Replace(&quot;]&quot;, &quot;&quot;);\n                        //remove the brackets to ask for prettier inputs\n\n                        Console.WriteLine(&quot;give me a &quot; + ThisBlank);\n                        string thisinput = Console.ReadLine();\n                        //ask user for mad lib inputs for their designated blankspaces\n\n                        UserStory = UserStory.Remove(startPlace, (endPlace - startPlace)).Insert(startPlace, thisinput);\n                        //inserts the user inputs into their designated blankspaces\n\n                    }\n                }\n                Console.WriteLine(UserStory);\n                //write the completed story\n            }\n        }\n    }\n\n    class Word\n        //for option a\n    {\n        public string PartOfSpeech;\n        //storing what we are asking the user to replace\n        public string UserInput;\n        //storing what the user enters into the mad lib\n    }\n}\n\n</code></pre>\n<p><a href=\"https://matrix.to/#/@onoyemi:matrix.workhardpgh.com\">Yemi Truechild (she/her)</a> <a href=\"https://matrix.to/#/@tobiasfunction:matrix.workhardpgh.com\">Tobias Tobak (he/him)</a> <a href=\"https://matrix.to/#/@spensermg:matrix.workhardpgh.com\">Spenser Greeley</a></p>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "Writing a Mad Libs \n\n```csharp\n\nusing System;\n\nnamespace MadLibs_Project\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Mad Libs Project\n            //================\n            //question and concerns and CHALLeemgESs\n            //how do we handled multiple nouns,blanks, etc and place them in the correct spots\n            //setting specific variables for specific spots\n            //editing the story issues\n            //chronological order/in order??\n            //user --> 10 year old playing the game\n            //multiple prompts (user made prompt??)\n            //simple prompt -->> build out --->> SAD LIBS\n            //I went to the {{noun}} store and bought a {{adjective}} {{noun}}\n\n            //======== process ==========\n            //ask user for inputs\n            //variety of inputs (nouns,adjects,etc)\n            //store inputs\n            // store multiple inputs \n            //handle inputs - replace {input spaces} in prompt with {user inputs}\n            //place inputs into story\n            //print out completed story with {user inputs}\n\n            //===stretch goals===\n            //loop the mad lib\n            //storing multiple prompts\n            //place same inputs into multiple prompts\n\n            Console.WriteLine(\"Welcome to Mad Libs, bucko! \\n Feelin' lazy? (a) \\n Feelin' creative? (b)  \");\n            string option = Console.ReadLine().ToLower();\n            //Ask the user to play our game or make their game\n\n            if (option == \"a\")\n            {\n\n                //written out our story in an array\n                string[] story =   {\"I have a \",\"*adjective\",\" \", \"*type of animal\",\n                \". It \",\"*verb that ends in 's'\", \" down the \", \"*location\", \" and upsets the \", \"*group\",\".\"};\n                //our words array is the same length as our story array\n                Word[] words = new Word[story.Length];\n\n\n                for (int i = 0; i < story.Length; i++)\n                {\n                    string phrase = story[i];\n                    if (phrase[0] == '*')\n                    //using a for loop, we search the story for places the user should fill in\n                    {\n                        words[i] = new Word();\n                        words[i].PartOfSpeech = phrase;\n\n                        Console.WriteLine(\"give me a \" + phrase);\n                        //identifies which *phrase is needed and asks for it \n                        string input = Console.ReadLine();\n                        //user enters their input for each *phrase\n                        words[i].UserInput = input;\n                        story[i] = words[i].UserInput;\n                        //repeats until all *phrases have inputs\n                    }\n\n                }\n                Console.WriteLine(string.Join(\"\", story));\n                //writes out the story from array with the user inputs \n            }\n\n            if (option == \"b\")\n            {\n                Console.WriteLine(\"So ya wanna write your own story \\nYou'll input below \\nA little something like this \\nEx) [type of animal] was going to the [place]\");\n                string UserStory = Console.ReadLine();\n                int startPlace = 0;\n                int endPlace = 0;\n                //explain the rules to the user and have them write us a mad libs story \n\n\n\n                for (int i = 0; i < UserStory.Length; i++)\n                {\n                    if (UserStory[i] == '[')\n                    {\n                        startPlace = i;\n                    }\n                    //designating the begining of our substring/space to fill in\n                    else if (UserStory[i] == ']')\n                    {\n                        endPlace = i + 1;\n                        string ThisBlank = UserStory.Substring(startPlace, (endPlace - startPlace));\n                        //designate the ending of our substring\n\n                        ThisBlank = ThisBlank.Replace(\"[\", \"\").Replace(\"]\", \"\");\n                        //remove the brackets to ask for prettier inputs\n\n                        Console.WriteLine(\"give me a \" + ThisBlank);\n                        string thisinput = Console.ReadLine();\n                        //ask user for mad lib inputs for their designated blankspaces\n\n                        UserStory = UserStory.Remove(startPlace, (endPlace - startPlace)).Insert(startPlace, thisinput);\n                        //inserts the user inputs into their designated blankspaces\n\n                    }\n                }\n                Console.WriteLine(UserStory);\n                //write the completed story\n            }\n        }\n    }\n\n    class Word\n        //for option a\n    {\n        public string PartOfSpeech;\n        //storing what we are asking the user to replace\n        public string UserInput;\n        //storing what the user enters into the mad lib\n    }\n}\n\n```\n\nYemi Truechild (she/her) Tobias Tobak (he/him) Spenser Greeley",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p>Writing a Mad Libs</p>\n<pre><code class=\"language-csharp\">\nusing System;\n\nnamespace MadLibs_Project\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Mad Libs Project\n            //================\n            //question and concerns and CHALLeemgESs\n            //how do we handled multiple nouns,blanks, etc and place them in the correct spots\n            //setting specific variables for specific spots\n            //editing the story issues\n            //chronological order/in order??\n            //user --&gt; 10 year old playing the game\n            //multiple prompts (user made prompt??)\n            //simple prompt --&gt;&gt; build out ---&gt;&gt; SAD LIBS\n            //I went to the {{noun}} store and bought a {{adjective}} {{noun}}\n\n            //======== process ==========\n            //ask user for inputs\n            //variety of inputs (nouns,adjects,etc)\n            //store inputs\n            // store multiple inputs \n            //handle inputs - replace {input spaces} in prompt with {user inputs}\n            //place inputs into story\n            //print out completed story with {user inputs}\n\n            //===stretch goals===\n            //loop the mad lib\n            //storing multiple prompts\n            //place same inputs into multiple prompts\n\n            Console.WriteLine(&quot;Welcome to Mad Libs, bucko! \\n Feelin' lazy? (a) \\n Feelin' creative? (b)  &quot;);\n            string option = Console.ReadLine().ToLower();\n            //Ask the user to play our game or make their game\n\n            if (option == &quot;a&quot;)\n            {\n\n                //written out our story in an array\n                string[] story =   {&quot;I have a &quot;,&quot;*adjective&quot;,&quot; &quot;, &quot;*type of animal&quot;,\n                &quot;. It &quot;,&quot;*verb that ends in 's'&quot;, &quot; down the &quot;, &quot;*location&quot;, &quot; and upsets the &quot;, &quot;*group&quot;,&quot;.&quot;};\n                //our words array is the same length as our story array\n                Word[] words = new Word[story.Length];\n\n\n                for (int i = 0; i &lt; story.Length; i++)\n                {\n                    string phrase = story[i];\n                    if (phrase[0] == '*')\n                    //using a for loop, we search the story for places the user should fill in\n                    {\n                        words[i] = new Word();\n                        words[i].PartOfSpeech = phrase;\n\n                        Console.WriteLine(&quot;give me a &quot; + phrase);\n                        //identifies which *phrase is needed and asks for it \n                        string input = Console.ReadLine();\n                        //user enters their input for each *phrase\n                        words[i].UserInput = input;\n                        story[i] = words[i].UserInput;\n                        //repeats until all *phrases have inputs\n                    }\n\n                }\n                Console.WriteLine(string.Join(&quot;&quot;, story));\n                //writes out the story from array with the user inputs \n            }\n\n            if (option == &quot;b&quot;)\n            {\n                Console.WriteLine(&quot;So ya wanna write your own story \\nYou'll input below \\nA little something like this \\nEx) [type of animal] was going to the [place]&quot;);\n                string UserStory = Console.ReadLine();\n                int startPlace = 0;\n                int endPlace = 0;\n                //explain the rules to the user and have them write us a mad libs story \n\n\n\n                for (int i = 0; i &lt; UserStory.Length; i++)\n                {\n                    if (UserStory[i] == '[')\n                    {\n                        startPlace = i;\n                    }\n                    //designating the begining of our substring/space to fill in\n                    else if (UserStory[i] == ']')\n                    {\n                        endPlace = i + 1;\n                        string ThisBlank = UserStory.Substring(startPlace, (endPlace - startPlace));\n                        //designate the ending of our substring\n\n                        ThisBlank = ThisBlank.Replace(&quot;[&quot;, &quot;&quot;).Replace(&quot;]&quot;, &quot;&quot;);\n                        //remove the brackets to ask for prettier inputs\n\n                        Console.WriteLine(&quot;give me a &quot; + ThisBlank);\n                        string thisinput = Console.ReadLine();\n                        //ask user for mad lib inputs for their designated blankspaces\n\n                        UserStory = UserStory.Remove(startPlace, (endPlace - startPlace)).Insert(startPlace, thisinput);\n                        //inserts the user inputs into their designated blankspaces\n\n                    }\n                }\n                Console.WriteLine(UserStory);\n                //write the completed story\n            }\n        }\n    }\n\n    class Word\n        //for option a\n    {\n        public string PartOfSpeech;\n        //storing what we are asking the user to replace\n        public string UserInput;\n        //storing what the user enters into the mad lib\n    }\n}\n\n</code></pre>\n<p><a href=\"https://matrix.to/#/@onoyemi:matrix.workhardpgh.com\">Yemi Truechild (she/her)</a> <a href=\"https://matrix.to/#/@tobiasfunction:matrix.workhardpgh.com\">Tobias Tobak (he/him)</a> <a href=\"https://matrix.to/#/@spensermg:matrix.workhardpgh.com\">Spenser Greeley</a></p>\n"
      },
      "event_id": "$1649968471530OoWJn:matrix.workhardpgh.com",
      "origin_server_ts": 1649968471789,
      "unsigned": {
        "age": 247257295,
        "m.relations": {
          "m.replace": {
            "event_id": "$1649969270537bHLmv:matrix.workhardpgh.com",
            "origin_server_ts": 1649969270126,
            "sender": "@joewalker147:matrix.workhardpgh.com"
          }
        }
      },
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com"
    },
    {
      "type": "m.room.message",
      "sender": "@tobiasfunction:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.text": "We ended up figuring out two totally different ways to handle it",
        "body": "We ended up figuring out two totally different ways to handle it",
        "msgtype": "m.text"
      },
      "event_id": "$1649968881532jXGZb:matrix.workhardpgh.com",
      "origin_server_ts": 1649968881555,
      "unsigned": {
        "age": 246847529
      },
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com"
    },
    {
      "type": "m.room.message",
      "sender": "@shaunapage:matrix.workhardpgh.com",
      "content": {
        "org.matrix.msc1767.message": [
          {
            "body": "```csharp\nusing System;\n\nnamespace decoder_ring\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //this is the madlib we'll be defining'\n            string madlib = \"I wanted to go my favorite bar [animal]\" + \n            \"I left home without my [noun]. \\n \";\n            //\"I never leave home without my [noun]! \" +\n            //\"\\n Instead I stayed home and baked [noun] \";\n//words that define the madlib that we'll be replacing\n            string[] words = new string[100];\n//Array that defines the replacement words\n            string[] answers = new string[100];\n            //start variable\n            int start = 0;\n            //end variable\n            int end = 0;\n\n            //Console.WriteLine(\"Please give us a noun. \");\n\n            //tells us how many times to search for replacement words\n            while ((madlib.Split('[').Length - 1) > 0) {\n                //tells us the number of times we need to replace words \n                Console.WriteLine(madlib.Split('[').Length - 1);\n                //tells us to search through every character of the madlib\n                for (int i = 0; i < madlib.Length; i++)\n                    //if function: tells us to look for the start brackets\n            {\n                if (madlib[i] == '[')\n                {\n                    //Console.WriteLine(i);\n                    start = i; \n                }\n                //tells us to look for the end brackets \n                if (madlib[i] == ']')\n                {\n                    //Console.WriteLine(i);\n                    end = i;\n                }\n            }\n//formatting of a substring is : madlib.Substring(int start, int length)\n//madlib.Replace(search for, replacement)\n\n                //tells the user the instances that need replaced\n            Console.WriteLine(\"Please enter a \" + madlib.Substring(start, end - start + 1));\n                //defines user's response as the answer\n            answers[0] = Console.ReadLine();\n                //defines a particular word to be replaced w/ start and ends of brackets\n            words[0] = madlib.Substring(start, end - start +1);\n                //replaces that particuar word w/ that particualr answer\n            Console.WriteLine(madlib.Replace(words[0], answers[0]));\n                //makes changes within madlib at each individual instance\n                madlib = madlib.Replace(words[0], answers[0]); \n          }\n            \n        }\n\n\n    }\n    \n}\n\n",
            "mimetype": "text/plain"
          },
          {
            "body": "<pre><code class=\"language-csharp\">using System;\n\nnamespace decoder_ring\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //this is the madlib we'll be defining'\n            string madlib = &quot;I wanted to go my favorite bar [animal]&quot; + \n            &quot;I left home without my [noun]. \\n &quot;;\n            //&quot;I never leave home without my [noun]! &quot; +\n            //&quot;\\n Instead I stayed home and baked [noun] &quot;;\n//words that define the madlib that we'll be replacing\n            string[] words = new string[100];\n//Array that defines the replacement words\n            string[] answers = new string[100];\n            //start variable\n            int start = 0;\n            //end variable\n            int end = 0;\n\n            //Console.WriteLine(&quot;Please give us a noun. &quot;);\n\n            //tells us how many times to search for replacement words\n            while ((madlib.Split('[').Length - 1) &gt; 0) {\n                //tells us the number of times we need to replace words \n                Console.WriteLine(madlib.Split('[').Length - 1);\n                //tells us to search through every character of the madlib\n                for (int i = 0; i &lt; madlib.Length; i++)\n                    //if function: tells us to look for the start brackets\n            {\n                if (madlib[i] == '[')\n                {\n                    //Console.WriteLine(i);\n                    start = i; \n                }\n                //tells us to look for the end brackets \n                if (madlib[i] == ']')\n                {\n                    //Console.WriteLine(i);\n                    end = i;\n                }\n            }\n//formatting of a substring is : madlib.Substring(int start, int length)\n//madlib.Replace(search for, replacement)\n\n                //tells the user the instances that need replaced\n            Console.WriteLine(&quot;Please enter a &quot; + madlib.Substring(start, end - start + 1));\n                //defines user's response as the answer\n            answers[0] = Console.ReadLine();\n                //defines a particular word to be replaced w/ start and ends of brackets\n            words[0] = madlib.Substring(start, end - start +1);\n                //replaces that particuar word w/ that particualr answer\n            Console.WriteLine(madlib.Replace(words[0], answers[0]));\n                //makes changes within madlib at each individual instance\n                madlib = madlib.Replace(words[0], answers[0]); \n          }\n            \n        }\n\n\n    }\n    \n}\n\n</code></pre>\n",
            "mimetype": "text/html"
          }
        ],
        "body": "```csharp\nusing System;\n\nnamespace decoder_ring\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //this is the madlib we'll be defining'\n            string madlib = \"I wanted to go my favorite bar [animal]\" + \n            \"I left home without my [noun]. \\n \";\n            //\"I never leave home without my [noun]! \" +\n            //\"\\n Instead I stayed home and baked [noun] \";\n//words that define the madlib that we'll be replacing\n            string[] words = new string[100];\n//Array that defines the replacement words\n            string[] answers = new string[100];\n            //start variable\n            int start = 0;\n            //end variable\n            int end = 0;\n\n            //Console.WriteLine(\"Please give us a noun. \");\n\n            //tells us how many times to search for replacement words\n            while ((madlib.Split('[').Length - 1) > 0) {\n                //tells us the number of times we need to replace words \n                Console.WriteLine(madlib.Split('[').Length - 1);\n                //tells us to search through every character of the madlib\n                for (int i = 0; i < madlib.Length; i++)\n                    //if function: tells us to look for the start brackets\n            {\n                if (madlib[i] == '[')\n                {\n                    //Console.WriteLine(i);\n                    start = i; \n                }\n                //tells us to look for the end brackets \n                if (madlib[i] == ']')\n                {\n                    //Console.WriteLine(i);\n                    end = i;\n                }\n            }\n//formatting of a substring is : madlib.Substring(int start, int length)\n//madlib.Replace(search for, replacement)\n\n                //tells the user the instances that need replaced\n            Console.WriteLine(\"Please enter a \" + madlib.Substring(start, end - start + 1));\n                //defines user's response as the answer\n            answers[0] = Console.ReadLine();\n                //defines a particular word to be replaced w/ start and ends of brackets\n            words[0] = madlib.Substring(start, end - start +1);\n                //replaces that particuar word w/ that particualr answer\n            Console.WriteLine(madlib.Replace(words[0], answers[0]));\n                //makes changes within madlib at each individual instance\n                madlib = madlib.Replace(words[0], answers[0]); \n          }\n            \n        }\n\n\n    }\n    \n}\n\n",
        "msgtype": "m.text",
        "format": "org.matrix.custom.html",
        "formatted_body": "<pre><code class=\"language-csharp\">using System;\n\nnamespace decoder_ring\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //this is the madlib we'll be defining'\n            string madlib = &quot;I wanted to go my favorite bar [animal]&quot; + \n            &quot;I left home without my [noun]. \\n &quot;;\n            //&quot;I never leave home without my [noun]! &quot; +\n            //&quot;\\n Instead I stayed home and baked [noun] &quot;;\n//words that define the madlib that we'll be replacing\n            string[] words = new string[100];\n//Array that defines the replacement words\n            string[] answers = new string[100];\n            //start variable\n            int start = 0;\n            //end variable\n            int end = 0;\n\n            //Console.WriteLine(&quot;Please give us a noun. &quot;);\n\n            //tells us how many times to search for replacement words\n            while ((madlib.Split('[').Length - 1) &gt; 0) {\n                //tells us the number of times we need to replace words \n                Console.WriteLine(madlib.Split('[').Length - 1);\n                //tells us to search through every character of the madlib\n                for (int i = 0; i &lt; madlib.Length; i++)\n                    //if function: tells us to look for the start brackets\n            {\n                if (madlib[i] == '[')\n                {\n                    //Console.WriteLine(i);\n                    start = i; \n                }\n                //tells us to look for the end brackets \n                if (madlib[i] == ']')\n                {\n                    //Console.WriteLine(i);\n                    end = i;\n                }\n            }\n//formatting of a substring is : madlib.Substring(int start, int length)\n//madlib.Replace(search for, replacement)\n\n                //tells the user the instances that need replaced\n            Console.WriteLine(&quot;Please enter a &quot; + madlib.Substring(start, end - start + 1));\n                //defines user's response as the answer\n            answers[0] = Console.ReadLine();\n                //defines a particular word to be replaced w/ start and ends of brackets\n            words[0] = madlib.Substring(start, end - start +1);\n                //replaces that particuar word w/ that particualr answer\n            Console.WriteLine(madlib.Replace(words[0], answers[0]));\n                //makes changes within madlib at each individual instance\n                madlib = madlib.Replace(words[0], answers[0]); \n          }\n            \n        }\n\n\n    }\n    \n}\n\n</code></pre>\n"
      },
      "event_id": "$1649969977540pcoLG:matrix.workhardpgh.com",
      "origin_server_ts": 1649969977047,
      "unsigned": {
        "age": 245752037
      },
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com"
    },
    {
      "type": "m.room.message",
      "sender": "@renata42:matrix.workhardpgh.com",
      "content": {
        "msgtype": "m.text",
        "body": "imaniemanuel: Rich Stanley jallison Me\n```\nusing System;\n\nnamespace TeamJagLibs\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Prompt V---V\n\n            //[Author] wrote my favorite book[book] and sometimes I[verb] the pages[adverb].\n\n\n            //[Date]\n\n            //Dear[Last Name],\n\n            // It has come to my attention that your child, [child's name], has eaten an inordinate amount of paste and is costing the school district [amount needed for football uniforms]. Please pay back this amount immediately.\n\n            //Thank you,\n            //[Your name]\n\n            //--------------------------------------------------------------------------------------\\\\\n\n\n            //We're gonna need a story we can cut pieces out of\n            // Write a story, pick out words we want to replace after writing the story. \n            // Reader fills out the cut out pieces. \n            // Story plays out with the words the reader puts out.\n            // \n            // One story at a time. Then MAYBE do more stories. \n            // \n\n\n            // \"Once upon a time, there was a (adjective1) (noun1) who was very (adjective2). He (verb1) up a (noun2) to (verb2) some (noun plural).\n            // He tried to (verb2) up the (noun3)) but he was too (adjective3) and (verb3) (adjective4) down the (noun4).\" \n\n\n            //---------------------------------------------------------------------------------------------\\\\\n\n            //Actual Stuff Do\n\n            // Search through the strings.Write out the actual story as a string\n            // Tell the computer to search through the string and look for the opening bracket []\n            // Inside the opened bracket computer wants to take what's in that bracket  (Nouns, verbs, and adjectives) and save it. \n            // Ask the user to give their input (Fills into that bracket)\n            // The computer will reprint that string with the user inputs.\n\n            // After we save the story ---> We pick through the brackets[]\n            // Then we replace what's in the brackets with our variables for different words \n            // Then print the new story which we will store with a different variable name with the replacements. \n\n            //string story = \"? wrote my favorite book[book] and sometimes I[verb] the pages[adverb].\";\n            //foreach(Char '[' in story);\n            \n            \n            string story = \"[Author] wrote my favorite book [title] and sometimes I [verb] the pages [adverb].\";\n\n            bool offon = true;\n\n            while (offon) // <---\n            {\n\n                int position1 = story.IndexOf('[');\n                int position2 = story.IndexOf(']');\n                string word1 = story.Substring(position1, position2 - position1 + 1);\n\n                Console.WriteLine(\"Provide a name \");\n                story = story.Replace(word1, Console.ReadLine());  // <--- Replace ?\n                int position3 = story.IndexOf('[');\n                int position4 = story.IndexOf(']');\n                string word2 = story.Substring(position3, position4 - position3 + 1);\n                Console.WriteLine(\"Provide a book title \");\n                story = story.Replace(word2, Console.ReadLine());\n                int position5 = story.IndexOf('[');\n                int position6 = story.IndexOf(']');\n                string word3 = story.Substring(position5, position6 - position5 + 1);\n                Console.WriteLine(\"Provide a verb \");\n                story = story.Replace(word3, Console.ReadLine());\n                int position7 = story.IndexOf('[');\n                int position8 = story.IndexOf(']');\n                string word4 = story.Substring(position7, position8 - position7 + 1);\n                Console.WriteLine(\"Provide an adverb \");\n                story = story.Replace(word4, Console.ReadLine());                                                                         \n                 \n                Console.WriteLine(story);\n\n\n                if (story[0] > -1)\n                {\n                    offon = false;\n                }\n            }\n            //Console.ReadLine();\n\n        }\n    }\n}\n",
        "format": "org.matrix.custom.html",
        "formatted_body": "<p><a href=\"https://matrix.to/#/@imaniemanuel:matrix.workhardpgh.com\">imaniemanuel</a>: <a href=\"https://matrix.to/#/@richcstan:matrix.workhardpgh.com\">Rich Stanley</a> <a href=\"https://matrix.to/#/@jallison:matrix.workhardpgh.com\">jallison</a> Me</p>\n<pre><code>using System;\n\nnamespace TeamJagLibs\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            //Prompt V---V\n\n            //[Author] wrote my favorite book[book] and sometimes I[verb] the pages[adverb].\n\n\n            //[Date]\n\n            //Dear[Last Name],\n\n            // It has come to my attention that your child, [child's name], has eaten an inordinate amount of paste and is costing the school district [amount needed for football uniforms]. Please pay back this amount immediately.\n\n            //Thank you,\n            //[Your name]\n\n            //--------------------------------------------------------------------------------------\\\\\n\n\n            //We're gonna need a story we can cut pieces out of\n            // Write a story, pick out words we want to replace after writing the story. \n            // Reader fills out the cut out pieces. \n            // Story plays out with the words the reader puts out.\n            // \n            // One story at a time. Then MAYBE do more stories. \n            // \n\n\n            // &quot;Once upon a time, there was a (adjective1) (noun1) who was very (adjective2). He (verb1) up a (noun2) to (verb2) some (noun plural).\n            // He tried to (verb2) up the (noun3)) but he was too (adjective3) and (verb3) (adjective4) down the (noun4).&quot; \n\n\n            //---------------------------------------------------------------------------------------------\\\\\n\n            //Actual Stuff Do\n\n            // Search through the strings.Write out the actual story as a string\n            // Tell the computer to search through the string and look for the opening bracket []\n            // Inside the opened bracket computer wants to take what's in that bracket  (Nouns, verbs, and adjectives) and save it. \n            // Ask the user to give their input (Fills into that bracket)\n            // The computer will reprint that string with the user inputs.\n\n            // After we save the story ---&gt; We pick through the brackets[]\n            // Then we replace what's in the brackets with our variables for different words \n            // Then print the new story which we will store with a different variable name with the replacements. \n\n            //string story = &quot;? wrote my favorite book[book] and sometimes I[verb] the pages[adverb].&quot;;\n            //foreach(Char '[' in story);\n            \n            \n            string story = &quot;[Author] wrote my favorite book [title] and sometimes I [verb] the pages [adverb].&quot;;\n\n            bool offon = true;\n\n            while (offon) // &lt;---\n            {\n\n                int position1 = story.IndexOf('[');\n                int position2 = story.IndexOf(']');\n                string word1 = story.Substring(position1, position2 - position1 + 1);\n\n                Console.WriteLine(&quot;Provide a name &quot;);\n                story = story.Replace(word1, Console.ReadLine());  // &lt;--- Replace ?\n                int position3 = story.IndexOf('[');\n                int position4 = story.IndexOf(']');\n                string word2 = story.Substring(position3, position4 - position3 + 1);\n                Console.WriteLine(&quot;Provide a book title &quot;);\n                story = story.Replace(word2, Console.ReadLine());\n                int position5 = story.IndexOf('[');\n                int position6 = story.IndexOf(']');\n                string word3 = story.Substring(position5, position6 - position5 + 1);\n                Console.WriteLine(&quot;Provide a verb &quot;);\n                story = story.Replace(word3, Console.ReadLine());\n                int position7 = story.IndexOf('[');\n                int position8 = story.IndexOf(']');\n                string word4 = story.Substring(position7, position8 - position7 + 1);\n                Console.WriteLine(&quot;Provide an adverb &quot;);\n                story = story.Replace(word4, Console.ReadLine());                                                                         \n                 \n                Console.WriteLine(story);\n\n\n                if (story[0] &gt; -1)\n                {\n                    offon = false;\n                }\n            }\n            //Console.ReadLine();\n\n        }\n    }\n}\n</code></pre>\n"
      },
      "event_id": "$1649970009541xHqyC:matrix.workhardpgh.com",
      "origin_server_ts": 1649970009219,
      "unsigned": {
        "age": 245719865,
        "m.relations": {
          "m.replace": {
            "event_id": "$1649970088542PYwbJ:matrix.workhardpgh.com",
            "origin_server_ts": 1649970088273,
            "sender": "@renata42:matrix.workhardpgh.com"
          }
        }
      },
      "room_id": "!aSdBuzQRUhbZHcWCuJ:matrix.workhardpgh.com"
    }
  ]
}